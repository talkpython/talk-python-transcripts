WEBVTT

00:00:01.479 --> 00:00:04.400
<v Michael Kennedy>Falko, Radja, welcome to Talk Python To Me.

00:00:05.100 --> 00:00:13.740
<v Michael Kennedy>I'm so excited to talk about GUIs, maybe even a little hint of a desktop GUI for Python.

00:00:13.980 --> 00:00:14.600
<v Michael Kennedy>Oh my goodness.

00:00:15.260 --> 00:00:16.400
<v Michael Kennedy>You all have built something great.

00:00:16.540 --> 00:00:17.800
<v Michael Kennedy>So welcome to Talk Python To Me.

00:00:18.020 --> 00:00:18.580
<v Rodja>Happy to have you here.

00:00:18.740 --> 00:00:19.760
<v Rodja>Falko RAJIA: Thank you for having us.

00:00:21.199 --> 00:00:22.580
<v Michael Kennedy>Yeah, great to have you here.

00:00:23.000 --> 00:00:24.520
<v Michael Kennedy>We're going to talk about NiceGUI.

00:00:26.059 --> 00:00:29.640
<v Michael Kennedy>Sometimes said Nice GUI, but we're going to learn that it's NiceGUI.

00:00:30.420 --> 00:00:42.200
<v Michael Kennedy>And basically, a nice blend of Python plus web plus a possible package in these up as-- I don't know what you want to call it.

00:00:42.260 --> 00:00:43.720
<v Michael Kennedy>I think the name's probably already taken.

00:00:44.140 --> 00:00:47.120
<v Michael Kennedy>But I feel like not Electron, but Positron, right?

00:00:47.260 --> 00:00:51.420
<v Speaker 3>Like we got to have something with a P, but that's kind of like Electron for like-- Good idea.

00:00:52.740 --> 00:00:57.760
<v Michael Kennedy>Yeah, I believe Posit might already have that taken for their new IDE thing.

00:00:58.200 --> 00:00:59.980
<v Michael Kennedy>Anyway, welcome.

00:01:00.540 --> 00:01:04.239
<v Michael Kennedy>Let's get a quick bit of background on both of you all before we dive into the project.

00:01:04.839 --> 00:01:05.540
<v Michael Kennedy>Falko, you want to go first?

00:01:06.280 --> 00:01:06.780
<v Falko>Tell us about yourself.

00:01:08.620 --> 00:01:09.740
<v Falko>Yeah, I'm Falko Schindler.

00:01:10.819 --> 00:01:18.340
<v Falko>I'm basically addicted to programming since my childhood, but I only discovered Python around 12 years ago.

00:01:18.600 --> 00:01:21.720
<v Falko>It was the time when I finished my PhD at the university.

00:01:22.740 --> 00:01:27.260
<v Falko>And that was also the time I met Rodja and I became one of his first employees.

00:01:28.040 --> 00:01:30.460
<v Falko>of the newly founded company, Zauberzeug.

00:01:31.560 --> 00:01:35.320
<v Falko>And now I'm a full stack software developer and robotics engineer.

00:01:36.320 --> 00:01:45.300
<v Falko>And I've been working on a wide range of projects like mobile apps, web apps, robotics, microcontrollers, basically the full stack.

00:01:46.300 --> 00:01:55.860
<v Falko>And yeah, and since 2021, I'm one of the, or we both are the creators of NiceGUI, a Python based web framework.

00:01:57.440 --> 00:02:04.180
<v Michael Kennedy>Yeah, awesome. What languages, what tech were you using before? You said 12 years ago you got into Python. What was before Python?

00:02:04.700 --> 00:02:10.380
<v Falko>I basically was introduced to Python as an alternative to MATLAB, which I was using at the university quite a lot.

00:02:11.680 --> 00:02:25.720
<v Falko>But I grew up with Pascal and did other stuff like web development, of course, with HTML, CSS, JavaScript, and some C-based languages, of course.

00:02:26.920 --> 00:02:32.160
<v Michael Kennedy>yeah nice i did a lot of matlab when i was in university and grad school and stuff and then

00:02:32.680 --> 00:02:57.140
<v Rodja>then i escaped Rodja yeah welcome welcome thank you um my name is Rodja trapper i'm um living here in um havixberg near mÃ¼nster where i founded the company and um i've grown up on a horse farm um But at 13 years of age or so, there was the first computer in my room and I was really addicted.

00:02:57.720 --> 00:02:59.100
<v Rodja>But I started only programming.

00:02:59.500 --> 00:03:05.060
<v Rodja>Then in school afterwards, there was a course of study where I needed to program something.

00:03:05.140 --> 00:03:07.520
<v Rodja>And I really got into this and I liked it very much.

00:03:07.820 --> 00:03:12.460
<v Rodja>I struggled in school normally, but the programming made it all worse, I think.

00:03:13.240 --> 00:03:18.880
<v Rodja>And yeah, then after a course of study of computer science, I worked a little bit in Berlin and then moved back to my home.

00:03:19.280 --> 00:03:26.300
<v Rodja>town with my three kids now. And yeah, now we, I founded the company 2012. It's Zauberzeug.

00:03:26.960 --> 00:03:51.200
<v Rodja>It's like a company where we do mobile automation, robotic stuff, and also a lot of software development and AI. So we bring everything together. We have mechanical people and electrical engineers, but a lot of software engineers. And yeah, we're doing all the things which are needed to be to automate stuff and mainly in the agricultural sector because we

00:03:51.320 --> 00:04:21.040
<v Michael Kennedy>are of course very close to test grounds there and yeah it's nice. Yeah very neat you know a lot of the places that say robotics they're like a kind of toy things or or you know Roomba like things but these are serious these go out on farms and exactly and in a large scale human assistance yeah it's fantastic yeah we really it's so it's like we really want to do the hard and

00:04:21.040 --> 00:04:47.620
<v Rodja>the difficult stuff uh to to advance in the field and do the advanced research to find new solutions and automations for uh the difficult parts where traditionally only human hands can do stuff and we want to be on organic farms and in horse stables and so all the all the tricky parts where everything needs to be very perfectly suited together to uh yeah bring a new age into place yeah

00:04:48.520 --> 00:04:54.320
<v Michael Kennedy>yeah sounds cool did you found stop azoic uh like right out of school or how did you get to starting

00:04:54.320 --> 00:05:37.160
<v Rodja>this company um yeah i um after the while studying um i was very sure and even in school i was sure that i wanted to one day found my own company but i was a little bit uh yeah i i needed to know a little bit about how to do how to run a company and so i moved to berlin for uh four years and uh get got into a nice uh company art and com and learned a lot of project work and how things work together and after that i was very sure to i can do that and i i did the freelancing and and contractual work, and then the contracts grew a little bit bigger, and then I decided, okay, this is the right time.

00:05:37.500 --> 00:05:49.060
<v Rodja>I can hire my first employee and start the company and grow from there just in little steps and basically bootstrap myself.

00:05:50.380 --> 00:05:51.340
<v Michael Kennedy>Yeah, well, congratulations.

00:05:51.900 --> 00:05:54.340
<v Michael Kennedy>It's not easy to start or run a business, is it?

00:05:54.630 --> 00:06:00.820
<v Rodja>Yeah, it's true, but especially if you really, most things I like is programming.

00:06:01.040 --> 00:06:15.180
<v Rodja>So I needed to really think about how to arrange the company and how to do the things that I still can do like 20 to 30 hours a day a week by programming and sitting down and thinking about the cool and nice stuff.

00:06:16.380 --> 00:06:17.780
<v Speaker 3>That guy helps me with that.

00:06:18.719 --> 00:06:46.300
<v Michael Kennedy>Yeah, of course. We're going to talk about it. Good for you because I think staying grounded in the technology really gives you an edge to, you know, Falko comes to you and says, hey, I'm working on this project and I want to use this tech or should we use FastAPI or whatever? You're like, yeah, of course. I've been working FastAPI or whatever. Vice versa, right? Like you're swimming in the waters and it's really good. Awesome. All right.

00:06:46.600 --> 00:06:49.900
<v Michael Kennedy>Well, you already gave a bit of a shout out to it.

00:06:50.960 --> 00:06:53.340
<v Michael Kennedy>Let's talk about NiceGUI.

00:06:53.560 --> 00:07:22.320
<v Michael Kennedy>And like we were talking just a little bit before I hit record, a lot of the projects, it's really, I think, powerful to talk a bit about how you pronounce things because I don't know, I end up at a lot of conferences or maybe conferences, not as much, but meet people that are doing programming And they'll tell me that they installed a library from PyPy, and it was NumPy.

00:07:22.370 --> 00:07:23.680
<v Michael Kennedy>And I'm like, hold on, hold on, hold on.

00:07:24.560 --> 00:07:27.840
<v Michael Kennedy>You know, the people who make that, they call that PyPI, and they call it NumPy.

00:07:28.380 --> 00:07:31.400
<v Michael Kennedy>And so just P-Y-X, for example, right?

00:07:31.520 --> 00:07:32.960
<v Michael Kennedy>It could have many pronunciations.

00:07:33.080 --> 00:07:35.180
<v Michael Kennedy>There's nothing implicit about how you say that one.

00:07:35.360 --> 00:07:37.400
<v Michael Kennedy>But Charlie Maher says P-Y-X.

00:07:37.550 --> 00:07:41.120
<v Michael Kennedy>And so you guys talk a bit about the naming and the pronunciation.

00:07:41.310 --> 00:07:42.560
<v Michael Kennedy>I think it's an interesting story.

00:07:44.320 --> 00:08:10.880
<v Falko>Yeah, we have been looking for a name for a UI framework where, yeah, the name, the term nice was not on the table yet, but we had a kind of mindset in our minds. And in the And we played around with the GUI term and ended up wanted to call it a Nice Guy.

00:08:12.780 --> 00:08:20.300
<v Falko>A pun on the Nice Guy ethos, a guy which is just who tries to be nice to everyone and tries to do things right.

00:08:21.200 --> 00:08:23.120
<v Speaker 3>Like a friendly UI framework, right?

00:08:23.470 --> 00:08:23.600
<v Falko>Exactly.

00:08:23.910 --> 00:08:26.660
<v Falko>And that's what we had in mind for our UI framework.

00:08:27.340 --> 00:08:36.880
<v Falko>But we couldn't write it like the guy with a Y because then you would Google a NiceGUI and you would never find our framework.

00:08:37.080 --> 00:08:42.620
<v Falko>And that's why we had to find a term that's unique in the internet and it works quite well.

00:08:44.060 --> 00:08:51.100
<v Falko>There were other examples where I don't understand until today why did they call it like that?

00:08:51.840 --> 00:08:53.540
<v Falko>You just don't find it.

00:08:55.720 --> 00:08:57.680
<v Falko>Yeah, that was basically the motivation for the name.

00:08:58.420 --> 00:09:04.420
<v Falko>And we didn't make it that explicit that it should be pronounced "NiceGUI," but we are

00:09:04.520 --> 00:09:05.520
<v Michael Kennedy>fine with "NiceGUI" as well.

00:09:05.960 --> 00:09:15.840
<v Michael Kennedy>Yeah, well, I do appreciate that you have something unique in the search, both in the search and in these days in the AI.

00:09:16.620 --> 00:09:36.380
<v Michael Kennedy>I'm working on a program with "NiceGUI," like, "Well, is he really helpful?" no, no, no, there's a framework. So it's having something that you can search is super, super important. It's as if Jupyter spelled it the same way as the planet instead of with the Y, right?

00:09:36.600 --> 00:09:42.300
<v Michael Kennedy>And you're like, oh no, you're never going to find anything about this. It's like all space.

00:09:43.920 --> 00:09:53.000
<v Michael Kennedy>So very cool. I know at some point we're going to talk about version 3.0 and there's already a couple comments in the chat of the excited things about there.

00:09:53.510 --> 00:09:55.220
<v Michael Kennedy>But we're going to save that for a little bit later.

00:09:55.660 --> 00:10:00.380
<v Michael Kennedy>Let's just start by talking a little bit about where did this come from?

00:10:00.820 --> 00:10:02.060
<v Michael Kennedy>Why did you all build this?

00:10:02.360 --> 00:10:05.400
<v Michael Kennedy>I'm going to guess robots, but Radja?

00:10:05.840 --> 00:10:14.660
<v Rodja>Yeah, of course it's robots because a lot of things hinge around the robot interfaces and interaction with that.

00:10:15.740 --> 00:10:25.500
<v Rodja>Basically, I think we did a lot of interface design before, and we also invented interfaces before and how to write them.

00:10:26.640 --> 00:10:36.560
<v Rodja>But one day, Falko came into the office and said, "Okay, I need to control this motor controller and I need to tune it." And the robot is driving around, so we only have Wi-Fi.

00:10:36.900 --> 00:10:38.740
<v Rodja>We need to have some access to the system.

00:10:39.400 --> 00:10:45.980
<v Rodja>And he basically wrote something up where he could write some Python code, and there came out some web interface.

00:10:46.340 --> 00:10:47.100
<v Rodja>And it was really nice.

00:10:47.190 --> 00:10:48.500
<v Rodja>And I said, "Whoa, this is great.

00:10:48.760 --> 00:10:52.680
<v Rodja>"Let's do that." And maybe, Falko, you can take it from here because--

00:10:55.080 --> 00:10:55.960
<v Falko>- Yeah, exactly.

00:10:56.150 --> 00:11:13.620
<v Falko>We had a kind of a moving target and we had to control it, but just the command line interface is sometimes too weak to control sliders, because we had to tune some parameters or we wanted some sliders and maybe a joystick and some things like that.

00:11:13.780 --> 00:11:24.440
<v Falko>And I think the manufacturer already came with some user interface for it, or they were in the making of such a framework.

00:11:25.440 --> 00:11:35.580
<v Falko>And it was very limited, but it gave the idea of, okay, the UI framework could consist of some building blocks that you could somehow arrange, but why do it graphically?

00:11:35.880 --> 00:11:37.380
<v Falko>Why not writing it?

00:11:37.720 --> 00:11:44.380
<v Falko>We could simply write the building blocks in Python or in other language, but of course, Python was our choice.

00:11:45.779 --> 00:11:51.580
<v Falko>And so in Python, you can quickly create a web server with FastAPI.

00:11:51.900 --> 00:11:54.280
<v Falko>So this part is basically solved.

00:11:55.080 --> 00:12:02.300
<v Falko>And then the idea was the building blocks could simply deliver some HTML with corresponding CSS and JavaScript.

00:12:03.580 --> 00:12:05.700
<v Falko>At that time, I was working in Angular.

00:12:06.560 --> 00:12:14.220
<v Falko>So the very first commits of NiceGUI was based on FastAPI and angular.

00:12:15.280 --> 00:12:16.780
<v Falko>And later we switched to view.

00:12:19.300 --> 00:12:19.860
<v Rodja>Yeah.

00:12:20.120 --> 00:12:20.200
<v Falko>Yeah.

00:12:20.200 --> 00:12:26.100
<v Falko>And within a few hours, the basic concept was, was there and was looking promising.

00:12:26.700 --> 00:12:31.720
<v Falko>Of course, not to the extent that we could imagine it could get that large.

00:12:32.560 --> 00:12:39.540
<v Falko>that was just meant as an internal tool just for doing some internal things.

00:12:41.740 --> 00:12:48.340
<v Rodja>- But what we did there is we set a lot on one computer and did wishful programming.

00:12:48.820 --> 00:12:54.200
<v Rodja>How did we would like to have written the UI and what should be on the screen there?

00:12:54.560 --> 00:12:58.500
<v Rodja>So we rewrote it and tested it, and then we thought, okay, how to implement this?

00:12:58.700 --> 00:13:04.580
<v Rodja>So we have a very, very nice interface for the developer, but how to write it actually the framework behind that.

00:13:04.720 --> 00:13:05.800
<v Rodja>And this was the challenge.

00:13:06.380 --> 00:13:11.820
<v Rodja>But after we did it a little bit, and then we started the first project with that, and we thought, okay, let's do all the robotic stuff with it.

00:13:11.940 --> 00:13:13.560
<v Rodja>And let's do our website with that.

00:13:13.680 --> 00:13:35.520
<v Rodja>So the website of sauerzeug.com is also written in NiceGUI, like the full documentation of the NiceGUI webpage and all the things we are doing really a lot of things, big interfaces where we have annotation programs and data pipelines, and so we really use it now everywhere.

00:13:35.920 --> 00:13:42.780
<v Rodja>And it's grown much faster and more robust than only just conductorial motor.

00:13:44.360 --> 00:13:45.360
<v Michael Kennedy>That's really great.

00:13:46.190 --> 00:13:56.940
<v Michael Kennedy>You know, even just looking at the UI, it's got this kind of friendly feel to the way the UI looks.

00:13:56.940 --> 00:13:57.580
<v Michael Kennedy>You know what I mean?

00:13:58.040 --> 00:13:58.200
<v Rodja>Yeah.

00:13:58.900 --> 00:13:59.100
<v Michael Kennedy>Yeah.

00:13:59.520 --> 00:14:19.500
<v Rodja>we are very happy to have also a professional graphic designer in our team, not only for the robotics, but also for websites. And we really are thinking about how to present the things here. And you can do basically anything a NiceGUI here, because it's just HTML, HTML and JavaScript.

00:14:21.000 --> 00:14:27.520
<v Rodja>You can do everything, but you can most things you can do simply in Python without touching all the underlying infrastructure.

00:14:28.380 --> 00:14:28.480
<v Rodja>Yeah.

00:14:29.160 --> 00:14:33.560
<v Michael Kennedy>So you're telling me that those cool robots we saw cruising around--

00:14:33.560 --> 00:14:34.240
<v Rodja>They're running NiceGUIs.

00:14:34.959 --> 00:14:36.900
<v Michael Kennedy>They have a little web--

00:14:37.100 --> 00:14:37.580
<v Rodja>Yeah, exactly.

00:14:38.220 --> 00:14:40.820
<v Michael Kennedy>NiceGUI server cruising on top of them?

00:14:41.040 --> 00:14:41.160
<v Rodja>Yeah.

00:14:42.259 --> 00:14:45.500
<v Speaker 3>And how do you figure out-- do you give them a name?

00:14:46.120 --> 00:14:58.120
<v Michael Kennedy>Sorry, do you give them like DNS names, like FunDN-- like Marco or whatever, like Marco-- in just HTTP Marco and start working with them?

00:14:58.240 --> 00:14:59.200
<v Michael Kennedy>Or how does that work?

00:14:59.420 --> 00:15:02.620
<v Rodja>The first few robots, we had some names for it.

00:15:02.620 --> 00:15:05.080
<v Rodja>But right now, we are just counting them up.

00:15:05.080 --> 00:15:07.600
<v Rodja>So it's F35 or something.

00:15:08.320 --> 00:15:12.940
<v Rodja>Because there are so many, and you need to really find the right one, which is running where.

00:15:14.260 --> 00:15:27.320
<v Rodja>But we have also in NiceDi a web interface where we can manage the whole hive of all the robots running around and looking at the battery status and what they have done, the KPIs and so on.

00:15:28.260 --> 00:15:30.000
<v Falko>The F stands for Field Friend.

00:15:30.940 --> 00:15:33.600
<v Falko>So we call them the Field Friends.

00:15:35.580 --> 00:15:36.060
<v Michael Kennedy>Amazing.

00:15:37.680 --> 00:15:40.760
<v Michael Kennedy>Let's talk a little bit about building blocks, I guess.

00:15:40.820 --> 00:15:43.420
<v Michael Kennedy>And then we could talk a little bit about the API.

00:15:45.020 --> 00:15:47.560
<v Michael Kennedy>So you chose FastAPI.

00:15:47.900 --> 00:15:52.300
<v Michael Kennedy>And you said you considered Angular, but you went with Vue, but maybe through Quasar.

00:15:53.140 --> 00:15:56.440
<v Michael Kennedy>So let's, why FastAPI?

00:15:56.440 --> 00:15:59.240
<v Michael Kennedy>I mean, FastAPI is certainly a good choice.

00:15:59.980 --> 00:16:00.120
<v Rodja>Yeah.

00:16:00.780 --> 00:16:01.320
<v Michael Kennedy>But why?

00:16:02.480 --> 00:16:06.620
<v Speaker 3>FastAPI is great because it's, yeah,

00:16:07.020 --> 00:16:10.500
<v Rodja>you can write very good REST interfaces with that.

00:16:10.860 --> 00:16:16.340
<v Rodja>And also what you get is this whole async support.

00:16:16.740 --> 00:16:19.980
<v Rodja>So you have a ASGI server running there.

00:16:20.760 --> 00:16:31.780
<v Rodja>So it's from our point of view, much better suited for this super large scaling and a single CPU running all the tasks than for example, Flask or so.

00:16:32.399 --> 00:16:40.020
<v Rodja>And so FastAPI was quite of natural for us because we switched from Flask to FastAPI a few years before.

00:16:40.520 --> 00:16:44.100
<v Rodja>We were very sure that we can work with that.

00:16:44.300 --> 00:16:49.940
<v Rodja>And this is supporting all the web traffic and server stuff we need.

00:16:50.080 --> 00:16:52.960
<v Rodja>And we did also a few big applications with that.

00:16:53.100 --> 00:16:56.480
<v Rodja>So this was quite a no-brainer for us.

00:16:58.300 --> 00:16:58.700
<v Michael Kennedy>- Okay.

00:17:00.440 --> 00:17:03.100
<v Michael Kennedy>And then Falko, you talked about Angular.

00:17:03.400 --> 00:17:08.839
<v Michael Kennedy>I don't know if this is Angular 1 or 2, but I know the transition from 1 to 2 was a little rocky.

00:17:09.220 --> 00:17:14.880
<v Falko>I mean, these-- - It was after 1, it was 2 or 3, I'm not sure.

00:17:15.199 --> 00:17:17.740
<v Michael Kennedy>- Okay, so you didn't have to write out that roller coaster.

00:17:18.400 --> 00:17:22.920
<v Michael Kennedy>But then you chose Vue, and if I got that right, it's actually Quasar.

00:17:23.420 --> 00:17:24.660
<v Michael Kennedy>That's not Quasar, that's Quasar.

00:17:26.659 --> 00:17:28.500
<v Michael Kennedy>Tell us a bit about this.

00:17:29.540 --> 00:17:31.980
<v Falko>I know Vue pretty well, but I don't know Quasar.

00:17:33.139 --> 00:17:34.360
<v Falko>- We didn't know it either.

00:17:35.320 --> 00:17:51.520
<v Falko>Though I have to mention one important step in the development of the NiceGUIs was when we were thinking about a good name, we thought we brainstormed and we thought, At one point we thought it's basically, we are writing everything in Python.

00:17:51.780 --> 00:17:54.960
<v Falko>So it's just Python, just Python, just PI.

00:17:55.860 --> 00:17:58.460
<v Falko>So we ended up and wanted to use the name just PI.

00:17:58.640 --> 00:18:03.640
<v Falko>And we looked up if there's something else called just PI already.

00:18:04.000 --> 00:18:10.580
<v Falko>And as it turns out, there was a UI framework, exactly what we were about to do with NiceGUI.

00:18:12.060 --> 00:18:12.940
<v Michael Kennedy>- What was your thought?

00:18:13.000 --> 00:18:15.980
<v Michael Kennedy>Were you like, oh no, why am I even doing this?

00:18:16.840 --> 00:18:17.340
<v Falko>Kind of.

00:18:17.620 --> 00:18:18.220
<v Falko>Oh, look.

00:18:19.680 --> 00:18:24.200
<v Falko>They've been ahead of us pretty much.

00:18:24.680 --> 00:18:27.160
<v Falko>They already had a full-fledged UI framework basically.

00:18:28.920 --> 00:18:31.940
<v Falko>But it was a bit low level for us.

00:18:32.360 --> 00:18:36.760
<v Falko>They basically mimicked HTML elements.

00:18:37.560 --> 00:18:37.700
<v Falko>Yeah.

00:18:38.000 --> 00:18:40.200
<v Michael Kennedy>I think I've seen this before and talked about it.

00:18:40.200 --> 00:18:40.360
<v Michael Kennedy>Yeah.

00:18:41.820 --> 00:18:43.340
<v Falko>Yeah, maybe.

00:18:45.340 --> 00:18:48.220
<v Falko>But they also used Quaser already.

00:18:49.240 --> 00:18:58.680
<v Falko>And so we still wanted to build our own framework with our own components and some nicer API in our point of views.

00:18:59.940 --> 00:19:02.520
<v Falko>But we decided to use JustPy as a foundation.

00:19:02.880 --> 00:19:09.140
<v Falko>And that's where Vue and Quaser came into NiceGuy as part of the JustPy foundation.

00:19:10.320 --> 00:19:19.320
<v Falko>And just maybe a year later, we had some issues, some unsolved bugs with JustPy, a bit poor performance.

00:19:20.440 --> 00:19:31.640
<v Falko>And there was an effort to save JustPy and to push it forward, and so that we can stay relying on it.

00:19:32.340 --> 00:19:43.020
<v Falko>But in the end, we decided to stop it, to remove it from the code base, to reimplement the whole transportation layer and do it ourselves.

00:19:43.460 --> 00:19:45.380
<v Falko>And it turned out pretty, pretty successful.

00:19:45.920 --> 00:20:07.640
<v Falko>I think we, we turned out,  yeah, with less bugs, with a better performance and,  and maybe, maybe a year later, just by was basically, put on hold and, isn't developed any, any longer, but it was a very important,  tool for us.

00:20:07.720 --> 00:20:09.920
<v Falko>a very important foundation.

00:20:10.500 --> 00:20:24.840
<v Rodja>It's a great stepping stone to give us some fundament where we could really, which we could use to show what we want to do with the user interface, how to develop the user interface and what abstraction is the right one.

00:20:25.130 --> 00:20:29.580
<v Rodja>And then we could easily swap out the engine after the first release.

00:20:29.900 --> 00:20:30.360
<v Michael Kennedy>Yeah.

00:20:32.600 --> 00:20:36.900
<v Michael Kennedy>One thing when I see, this is not a judgment on just Pi.

00:20:37.160 --> 00:20:39.000
<v Michael Kennedy>People send me this kind of stuff all the time.

00:20:39.410 --> 00:20:41.060
<v Michael Kennedy>Not all the time, but often enough.

00:20:41.200 --> 00:20:46.820
<v Michael Kennedy>They're like, oh, here's a really cool thing that lets you not use HTML or JavaScript.

00:20:46.970 --> 00:20:48.200
<v Michael Kennedy>You just do everything in Python.

00:20:49.540 --> 00:20:53.340
<v Michael Kennedy>And sometimes the examples are just so close to HTML.

00:20:53.700 --> 00:20:55.600
<v Michael Kennedy>The frameworks are so close to HTML.

00:20:55.840 --> 00:20:58.500
<v Michael Kennedy>It's like, well, why would I not just use HTML?

00:20:59.680 --> 00:21:06.540
<v Michael Kennedy>If it's like I have to create divs and I've got to create spans.

00:21:06.920 --> 00:21:10.980
<v Michael Kennedy>Like literally the framework is just the same as HTML, but in Python.

00:21:11.340 --> 00:21:14.040
<v Michael Kennedy>Like that's interesting and it's a cool framework.

00:21:14.180 --> 00:21:26.800
<v Michael Kennedy>But also there's so much tooling for working with styling, et cetera, deploying HTML that I don't know, I feel like it's maybe too low level, kind of like you were saying.

00:21:27.760 --> 00:21:28.000
<v Rodja>Yeah.

00:21:28.840 --> 00:21:39.860
<v Rodja>And so yeah, a little bit higher abstraction where you have a button and you can put a click handler And if the button is clicked, then of course the click handler is called.

00:21:40.640 --> 00:21:43.760
<v Rodja>That was really the main goal of Night Sky.

00:21:44.940 --> 00:21:47.980
<v Rodja>And I think that works pretty well and it's scaled very far.

00:21:48.280 --> 00:21:55.420
<v Rodja>So we could also have other UI elements like E-charts also where we have really diagrams and things like that.

00:21:56.700 --> 00:22:01.260
<v Michael Kennedy>Yeah, I think, Vito, you were talking about Vue and Quasar.

00:22:01.960 --> 00:22:08.800
<v Michael Kennedy>One of the concepts in that world is kind of like components and bigger building blocks just raw HTML elements.

00:22:09.300 --> 00:22:15.240
<v Michael Kennedy>Here's a card, or here's a turnstile, or here's a panel or whatever.

00:22:16.560 --> 00:22:25.820
<v Michael Kennedy>And I think that that's a much better programming level to talk about these UI building block elements rather than HTML elements.

00:22:26.180 --> 00:22:31.140
<v Rodja>It relieves the developer from the plumbing a lot.

00:22:31.660 --> 00:22:37.320
<v Rodja>We can think about, OK, what do we want to show, at what time, and how does it all connect together.

00:22:37.760 --> 00:22:47.220
<v Rodja>If it's too fine granular, then it's really-- this fine-grained stuff is really taking up all your mental energy to think about what you really want to achieve there.

00:22:48.560 --> 00:22:49.460
<v Michael Kennedy>100% agree.

00:22:49.760 --> 00:22:53.500
<v Michael Kennedy>OK, so that brings us back to Quasar a bit.

00:22:54.020 --> 00:22:56.540
<v Falko>So Quasar is kind of these building blocks.

00:22:56.580 --> 00:22:57.060
<v Falko>Is that right?

00:22:58.600 --> 00:23:00.200
<v Falko>Yeah, right, exactly.

00:23:02.540 --> 00:23:06.760
<v Falko>It turned out to be the main UI framework in NiceGUI.

00:23:07.060 --> 00:23:11.420
<v Falko>Most or many elements are based on Quasar or existing Quasar components.

00:23:12.440 --> 00:23:15.440
<v Falko>We call them elements in NiceGUI but there are components in Quasar.

00:23:19.480 --> 00:23:27.660
<v Falko>And other components or elements like eCharts or something, they are independent of Quasar.

00:23:29.060 --> 00:23:42.460
<v Falko>Yeah, so you're not tied to using Quasar when using NiceGUI, but it delivers a nice foundation, a basic set of elements you can use.

00:23:43.240 --> 00:23:43.520
<v Falko>Cool.

00:23:44.160 --> 00:23:48.540
<v Michael Kennedy>So another one-- let's go with this.

00:23:49.379 --> 00:23:58.240
<v Michael Kennedy>The AG grid looks like a super cool way to put grids of data, editable grids, Sortable grids.

00:23:58.900 --> 00:24:04.200
<v Michael Kennedy>And tell us about-- this is probably something you do a lot with the analytics coming off the robots and stuff.

00:24:04.380 --> 00:24:07.620
<v Michael Kennedy>But I know other people do other interesting things.

00:24:07.630 --> 00:24:12.020
<v Michael Kennedy>An example on their website is kind of a stock chart that updates live.

00:24:13.559 --> 00:24:19.080
<v Falko>Yeah, we learned 8G grid also through JustPy.

00:24:19.090 --> 00:24:21.880
<v Falko>It was the way to present a table in JustPy.

00:24:22.260 --> 00:24:24.480
<v Falko>So we basically adopted it.

00:24:26.420 --> 00:24:35.780
<v Falko>Meanwhile, we are also offering a UI table, which is a quasar table.

00:24:36.560 --> 00:24:51.140
<v Falko>So you can choose if you want to use UI ag grid or AG grid for an AG grid, or you can use the quasar table, which is a bit different in look and feel and the interface.

00:24:54.620 --> 00:24:54.760
<v Falko>Yeah.

00:24:55.540 --> 00:25:03.120
<v Rodja>But generally what we discovered when NiceGuy grew bigger and bigger that people really are into these tables.

00:25:03.370 --> 00:25:05.040
<v Speaker 3>They really need that a lot.

00:25:05.610 --> 00:25:06.460
<v Rodja>And all the features.

00:25:06.740 --> 00:25:09.260
<v Rodja>And AG Grid, for example, is really, really powerful.

00:25:10.080 --> 00:25:24.740
<v Rodja>And the abstraction we chose at NiceGuy is really great to bring all this into the Python world, where you can simply write something in and you can use it in the web like it would be in the web, but you use it simply in Python.

00:25:25.340 --> 00:25:31.700
<v Rodja>And so the interaction with that, when you're writing, when you're developing, what do we want to do?

00:25:31.800 --> 00:25:40.060
<v Rodja>And so it's quite a good fit together and we could map all the features basically into Python.

00:25:40.580 --> 00:25:47.180
<v Rodja>And this is true for all the other elements also that they are simply just a JavaScript component somewhere.

00:25:47.540 --> 00:25:51.800
<v Rodja>And we can write a small layer around that to bring it into the Python world.

00:25:51.800 --> 00:26:02.120
<v Rodja>And then you can really instantiate the object and then it automatically connects to, we have a web server and send the messages over the secure channel to the website.

00:26:02.380 --> 00:26:11.100
<v Rodja>And so we have this great user interface at the browser and in Python, it's simply just a Python program, running everything you want to run.

00:26:11.920 --> 00:26:17.680
<v Michael Kennedy>- Yeah, and I definitely wanna dive into the server front end data exchange.

00:26:17.760 --> 00:26:18.580
<v Michael Kennedy>This is gonna be fun.

00:26:20.320 --> 00:26:37.500
<v Michael Kennedy>But running things out, I guess we also have really nice charts with e-charts. These look, I guess, you know, there's a pretty strong data science story here as well with what you all can build and the tools you got integrated, right?

00:26:38.500 --> 00:27:37.920
<v Rodja>Yeah, of course. There are a lot of data scientists out there which really like to use a simple framework to simply show a chart. And there are other kinds of frameworks which can on that like streamlet or so um but streamlet is quite difficult when you come to state management how to do the database ss or how to integrate another third python library or so you get really uh stuck into that and this was also our one of the motivations behind NiceGUI when we invented it because of course we knew streamlit and we know how to use it but um and this is also a lot of charts or so um but nice boy um NiceGUI is really um meant to be very friendly for the programmer to not break the intentions you have and also be very powerful and of course with uh each charts and also other charting libraries we can very easily integrate we have some powerful tools

00:27:38.080 --> 00:27:45.020
<v Michael Kennedy>here for data scientists yeah it looks beautiful now the final final building block that i want to to talk about.

00:27:45.800 --> 00:27:50.560
<v Michael Kennedy>I kind of said this earlier with this looking towards this in mind.

00:27:51.140 --> 00:27:56.860
<v Michael Kennedy>If you do everything in Python and you're just doing HTML, then it gets really hard to style those sorts of things.

00:27:57.660 --> 00:28:02.160
<v Michael Kennedy>But you all chose Tailwind for your styling, right?

00:28:02.310 --> 00:28:08.620
<v Michael Kennedy>And if you need to, you can actually almost drop into the HTML level and do Tailwind type of stuff.

00:28:08.670 --> 00:28:13.280
<v Michael Kennedy>But there's also a fluent API in Python to apply Tailwind classes.

00:28:15.240 --> 00:28:18.340
<v Michael Kennedy>Give people-- I don't know how much I've talked about Tailwind.

00:28:18.420 --> 00:28:20.440
<v Michael Kennedy>I'm sure there's a lot of people that are like, what is Tailwind?

00:28:21.320 --> 00:28:23.940
<v Michael Kennedy>And then why is it special?

00:28:24.080 --> 00:28:32.740
<v Michael Kennedy>Why is it especially good for this type of programming where you're interacting with the widgets or the components themselves?

00:28:36.300 --> 00:28:43.220
<v Falko>Yeah, Tailwind or Tailwind CSS is basically an abstraction layer for CSS.

00:28:43.760 --> 00:28:56.140
<v Falko>CSS is the way you are styling things in the web, in HTML, plain HTML is pretty dry and has no styling and you're usually using CSS to style it.

00:28:56.840 --> 00:29:04.020
<v Falko>And Tailwind CSS makes it a bit easier, for example, well, we have a good example.

00:29:06.020 --> 00:29:18.780
<v Falko>It provides many shortcuts by adding classes to your HTML elements, you're achieving more complicated things or you just can write it shorter.

00:29:20.419 --> 00:29:28.100
<v Falko>And so like a P4 is four units padding for an element.

00:29:28.200 --> 00:29:28.880
<v Speaker 3>Right, right, right.

00:29:28.970 --> 00:29:29.620
<v Speaker 3>All the way around.

00:29:30.190 --> 00:29:46.060
<v Falko>Yeah, usually then the fun starts when you can add prefixes like hover, then this styling only applies when hovering and for certain screen sizes or in dark mode and not in light mode and things.

00:29:47.020 --> 00:29:47.800
<v Falko>So it's pretty powerful.

00:29:48.220 --> 00:29:53.860
<v Falko>And by adding it to NiceGUI, you have an easy way to style your elements.

00:29:54.800 --> 00:30:02.660
<v Falko>You have been written in Python without having to write plain CSS.

00:30:03.620 --> 00:30:04.140
<v Falko>It's a bit shorter.

00:30:04.700 --> 00:30:13.360
<v Falko>beginning we didn't think that it would take off so much, but when you start using it, you do not want to stop and then you want to write all your styling and tailwind.

00:30:13.740 --> 00:30:13.820
<v Speaker 3>Right.

00:30:13.860 --> 00:31:08.940
<v Falko>It's easy and simple. But to address your thought about, well, then you can, I'm assuming that you are thinking then you can just use plain HTML and tailwind. We thought about introducing a NiceGUI abstraction, some kind of styling language in NiceGUI, which is on top of Tailwind CSS. But this proves to be very hard. And then you don't win that much that it's worth the effort. And if you are introducing a new abstraction layer, then you have to document it, you have to test it, you have to find the right level of abstraction. And using Tailwind CSS as it is, we just can refer to the documentation, which is great, and everybody can just look it up.

00:31:10.840 --> 00:31:18.140
<v Falko>And while doing though, learning CSS and styling and tailwind, that's useful as well.

00:31:19.280 --> 00:32:22.300
<v Rodja>I think we had a pull request like four years ago, or multiple attempts to create an own layout engine where you can define, okay, where, how might hold the width and how the height and stuff like that. But then you need to think about, okay, this is always the web, what you're talking about. And it's super, super powerful. And the language for the web for styling is CSS. There's no way around it. If you find some other abstraction, it will definitely break at some points and also not allow every um mutation and every uh kind of variance or so and we i i don't um maybe we will introduce something uh later on or some time but um what we really try to do with NiceGUI is that you can do the simple things very easily and you can do it very quickly but the difficult thing things should also be doable yeah and so if we have an abstraction then like in streamlit, you cannot do it. It's just you are locked in. And this is not something we would

00:32:22.420 --> 00:32:49.360
<v Michael Kennedy>like to have a NiceGUI. Yeah. I think one of the interesting things on Tailwind is that, you know, it's kind of grouped in the utility CSS frameworks. And I don't know if that makes any more sense to people who already know Tailwind. But it lets you put the CSS classes right onto the elements and that directly affects them because a lot of CSS frameworks have a kind of a very separated here's your CSS and style.

00:32:49.570 --> 00:32:59.360
<v Michael Kennedy>And then here's your the effect it has like if it's in a row, if it's in a container, which is in a row, which then has this property, then it has some effect.

00:33:00.030 --> 00:33:02.960
<v Michael Kennedy>And there's a very big separation of ideas.

00:33:03.170 --> 00:33:12.200
<v Michael Kennedy>And this is more of a let's leverage the locality like right on the element, you can see that it says font-medium, text-2xl.

00:33:12.220 --> 00:33:15.940
<v Michael Kennedy>Like, oh, OK, well, that's what the property-- you don't have to look anywhere else than right there, right?

00:33:16.520 --> 00:33:20.060
<v Michael Kennedy>And so it still works pretty well, I think, with NiceGUI.

00:33:20.260 --> 00:33:32.720
<v Michael Kennedy>Because as you're working in Python writing code, when you apply the style, you apply it to the thing in a real similar way to Tailwind, unlike, say, Bootstrap or something more separated.

00:33:33.240 --> 00:33:33.480
<v Rodja>Yeah.

00:33:33.860 --> 00:33:38.240
<v Rodja>Also, when you look at C# and Xaml also, They wanted to separate the layout from the content.

00:33:38.870 --> 00:33:40.880
<v Rodja>And we decided that it's not good to do this.

00:33:41.620 --> 00:33:51.780
<v Rodja>Because when you're writing UI, this is a good example for the with statement, where you open a context to do an intent like, okay, no, we have a new row.

00:33:51.950 --> 00:33:53.300
<v Rodja>And inside the row, there's another row.

00:33:53.600 --> 00:33:58.600
<v Rodja>We have always an intent, invention, so that you can look at it.

00:33:58.870 --> 00:34:02.320
<v Rodja>And you see in the code, okay, there's something new going on in Clojure.

00:34:02.720 --> 00:34:07.440
<v Rodja>And when you can then put the styling right to it, then you really know, okay, this is the point.

00:34:08.060 --> 00:34:10.060
<v Rodja>There's what's going on, and you can simply do it.

00:34:10.290 --> 00:34:12.800
<v Rodja>And of course, you can do all the abstractions you can do with Python.

00:34:12.960 --> 00:34:17.500
<v Rodja>You can make a class from that and use the component somewhere more abstract.

00:34:17.649 --> 00:34:24.320
<v Rodja>You don't need to write like 100 lines of code in UI code right from one step to the other.

00:34:24.460 --> 00:34:29.360
<v Rodja>But when you have UI code, you can really look at it and understand very good the structure of it.

00:34:29.860 --> 00:34:30.860
<v Rodja>Yeah, 100%.

00:34:30.929 --> 00:34:34.220
<v Michael Kennedy>Yeah, I'm actually, I don't know if people know, I'm a pretty big fan of C#.

00:34:35.200 --> 00:34:36.260
<v Michael Kennedy>dot net and so on.

00:34:36.790 --> 00:34:38.260
<v Michael Kennedy>Not as much as Python, but for sure.

00:34:38.399 --> 00:34:39.360
<v Michael Kennedy>But I hate SAML.

00:34:39.550 --> 00:34:41.020
<v Michael Kennedy>I hate the way they build that.

00:34:41.320 --> 00:34:43.000
<v Michael Kennedy>It's such a frustrating framework to work in.

00:34:43.260 --> 00:34:43.600
<v Michael Kennedy>Never.

00:34:44.720 --> 00:34:51.300
<v Michael Kennedy>Interesting Astro Strongbox out there says, love NiceGUI building a battery pack simulation GUI plot.

00:34:51.520 --> 00:34:53.580
<v Michael Kennedy>UI dot plotly figure dot classes.

00:34:54.360 --> 00:34:56.260
<v Michael Kennedy>W dash full H dash 100.

00:34:56.690 --> 00:34:56.800
<v Michael Kennedy>Boom.

00:34:57.170 --> 00:34:57.700
<v Michael Kennedy>Just like that.

00:34:58.020 --> 00:34:58.320
<v Rodja>Great.

00:34:59.260 --> 00:35:00.960
<v Michael Kennedy>Yeah, and that is the NiceGUI code.

00:35:01.080 --> 00:35:08.980
<v Michael Kennedy>So maybe it's a good time to start talking about how Maybe how do we get started working with this?

00:35:09.100 --> 00:35:09.900
<v Michael Kennedy>Let me zoom out a little.

00:35:12.279 --> 00:35:14.000
<v Michael Kennedy>So find some examples.

00:35:14.000 --> 00:35:14.080
<v Speaker 3>Yeah.

00:35:14.860 --> 00:35:17.500
<v Speaker 3>Right on the art page of our website, exactly.

00:35:18.140 --> 00:35:22.020
<v Falko>There we have basically the most minimal NiceGUI app.

00:35:22.420 --> 00:35:27.660
<v Falko>And it was always important to us that this is easy and short.

00:35:28.120 --> 00:35:32.720
<v Falko>And the minimal NiceGUI app is basically three lines of code.

00:35:32.880 --> 00:35:36.940
<v Falko>you import NiceGUI or you import UI from NiceGUI.

00:35:38.000 --> 00:35:41.100
<v Falko>You add some label, maybe UI label, hello.

00:35:41.920 --> 00:35:45.180
<v Falko>And then you write UI run, and this will run the UI for you.

00:35:45.540 --> 00:35:46.100
<v Falko>Start the server.

00:35:47.980 --> 00:35:50.540
<v Falko>As a default, it auto-reloads when you change the code.

00:35:50.740 --> 00:35:52.820
<v Falko>It automatically opens the browser for you.

00:35:53.400 --> 00:35:54.960
<v Falko>So you're right on the right URL.

00:35:56.180 --> 00:35:56.880
<v Falko>And that's it.

00:35:57.120 --> 00:35:57.860
<v Falko>And your app is running.

00:36:01.000 --> 00:36:01.340
<v Falko>All right.

00:36:02.120 --> 00:36:05.240
<v Falko>Let's talk through what actually happens when this code runs.

00:36:05.420 --> 00:36:13.840
<v Michael Kennedy>So you run this, and then this basically starts a server running uveacorn on the default port for FastAPI, which is 8000.

00:36:14.140 --> 00:36:15.500
<v Michael Kennedy>So localhost 8000.

00:36:15.540 --> 00:36:22.120
<v Michael Kennedy>You click that, it opens in a browser, and you've got a UI element that is a label.

00:36:22.240 --> 00:36:23.380
<v Michael Kennedy>It says, hello, NiceGUI.

00:36:26.580 --> 00:36:28.640
<v Michael Kennedy>And that's unimpressive, of course.

00:36:28.880 --> 00:37:10.420
<v Rodja>because it's just sending some html to the web browser and the web browser is rendering it but in the background the web page is connecting back to the server with an id of a client which is created on the server and says okay i'm connecting back i now establish a web socket connection and from there on the web browser is connected to the web server and all the events which are happening like when you have a button or so when you press it the command is sent through the web socket to the server and then the server can decide okay what to do about this what is the command what should be done and then it executes the python code and sends back the commands for the ui update to the web page and so we have this dynamic interaction very neatly packed into the

00:37:10.470 --> 00:37:42.940
<v Michael Kennedy>web socket connection yeah and that's where it starts to get interesting so for example if you pull up the docs for button it has an on click and the thing you pass to that on click is a python callable right and if i go to the button in the page and i click it stuff happens in html but you're telling me that's because there's a web socket that connects some kind of javascript trigger to a python action on the back end is that right

00:37:43.480 --> 00:38:19.640
<v Rodja>yeah exactly in the in the example here there's the on click handler is just a lambda statement calling ui notify and then a message like you clicked me and then if the button is clicked the web socket could sense the to the server that the command is the button is clicked and then the server decides okay i have a click handler on this button and i will now execute the python code there and the ui notify will then decide okay when i execute i will take the message pack it into the web socket connection and send it to the um to the browser again and the browser then decides okay let's show the message here in Quasar.

00:38:20.980 --> 00:38:24.180
<v Rodja>And so you see the message appearing on the screen like a pop-up.

00:38:25.640 --> 00:38:34.640
<v Michael Kennedy>And this runs in the context of a Python executable on the server, I guess, depends on how you connect to it, right?

00:38:34.650 --> 00:38:44.180
<v Michael Kennedy>It could be a desktop application, so it runs maybe as an invisible server on your machine or in the case you described earlier, on the robot and so on, right?

00:38:44.500 --> 00:39:14.460
<v Rodja>Yeah, or simply deployed to the cloud, like with any framework, there are a lot of things like you can simply host it behind an Apache web server or traffic, or even use things like these, what we are using a lot when we are hosting services like FlyIO, they are really nice for, yeah, simply having a server, hosting it, getting an IP address and the domain registration, and then you can simply run all the code there.

00:39:15.600 --> 00:39:16.760
<v Michael Kennedy>Yeah, that's awesome.

00:39:17.720 --> 00:39:18.900
<v Michael Kennedy>So fly.io, OK, interesting.

00:39:19.300 --> 00:39:21.800
<v Michael Kennedy>How about Caddy?

00:39:21.900 --> 00:39:23.340
<v Michael Kennedy>Have you checked out Caddy?

00:39:23.500 --> 00:39:24.340
<v Michael Kennedy>Have you guys played with this?

00:39:25.240 --> 00:39:40.560
<v Rodja>I think we have not used it a lot ourselves, but this is something people in the community asked us about or use it even and reported that it's a nice and a great server environment.

00:39:41.960 --> 00:39:44.440
<v Michael Kennedy>Yeah, it seems really interesting.

00:39:44.920 --> 00:39:50.640
<v Michael Kennedy>One of the big selling points is it automatically does SSL creation through Let's Encrypt.

00:39:50.780 --> 00:40:01.920
<v Michael Kennedy>So if you set up a server on a domain, and you just access it, and it doesn't have SSL yet, it'll just, as part of the first request, just create an SSL certificate, which is pretty cool.

00:40:03.320 --> 00:40:08.140
<v Michael Kennedy>I've thought about using it, but I have 2,000 lines of Nginx configuration.

00:40:09.720 --> 00:40:12.120
<v Speaker 3>It's not time well spent to try to convert all that

00:40:12.220 --> 00:40:13.500
<v Michael Kennedy>to work seamlessly with Caddy.

00:40:13.540 --> 00:40:14.180
<v Michael Kennedy>It's just like, you know what?

00:40:14.240 --> 00:40:16.420
<v Michael Kennedy>it works, let's just not go down that.

00:40:16.780 --> 00:40:18.300
<v Michael Kennedy>So very cool.

00:40:19.100 --> 00:40:24.400
<v Michael Kennedy>All right, let's go back to more UI elements and more programming models.

00:40:25.240 --> 00:40:32.400
<v Michael Kennedy>I think it might be fun to take a little bit of a tour of the different things that you can build.

00:40:34.000 --> 00:40:40.600
<v Michael Kennedy>So if I jump over here, maybe let's go controls, for example.

00:40:41.340 --> 00:40:42.120
<v Michael Kennedy>We talked about buttons.

00:40:43.820 --> 00:40:46.760
<v Michael Kennedy>But you've got little groups of action buttons.

00:40:47.700 --> 00:40:49.080
<v Michael Kennedy>You've got dropdowns.

00:40:51.220 --> 00:40:53.820
<v Michael Kennedy>A lot of different little expanding-- what do you call this?

00:40:54.040 --> 00:40:55.080
<v Michael Kennedy>Floating action buttons.

00:40:57.000 --> 00:40:58.240
<v Michael Kennedy>Badges that have numbers.

00:40:58.500 --> 00:41:08.900
<v Michael Kennedy>Like in macOS in your dock or on mobile phones, you've got a little icon, but then it gets a little number over it with notifications, those kinds of things.

00:41:09.440 --> 00:41:13.760
<v Michael Kennedy>Talk about some of the UI elements that you think good building blocks?

00:41:17.000 --> 00:41:18.340
<v Falko>Yeah, you mentioned some.

00:41:20.400 --> 00:41:25.320
<v Falko>Most of them, if you check the first line of the documentation, it says based on Quasar's

00:41:25.840 --> 00:41:28.360
<v Speaker 3>Q button toggle or Q chip.

00:41:30.740 --> 00:41:36.240
<v Falko>Right now you're looking at mostly the elements which were borrowed from Quasar.

00:41:39.000 --> 00:41:49.260
<v Falko>- They are mostly not that spectacular from the implementation point of view because they've just fit easily into the NiceGUI framework.

00:41:50.039 --> 00:41:53.660
<v Falko>We are writing a small wrapper class and that's mostly it.

00:41:53.660 --> 00:42:03.960
<v Falko>We just say use the tag Q button and then the rest is done by view, translating the view button tag into a real button.

00:42:05.980 --> 00:42:10.920
<v Falko>Other elements need some help from our side where we adjust the front end code.

00:42:13.240 --> 00:42:16.820
<v Falko>And then there are elements like the more complex things.

00:42:16.890 --> 00:42:30.120
<v Falko>We have 3D views where we use three JS, which is completely independent of a quasar, which we use for our robots quite a bit.

00:42:31.540 --> 00:43:06.820
<v Falko>So we implemented kind of a subset of a tiny subset 3.js is just huge but some building blocks we are using a lot, some 3D objects like cubes, even 3D meshes and some 2D elements and you can control the camera and move it around interactively, group objects, animate objects, and it's a quite powerful foundation for what you want to do with your robot maybe.

00:43:08.560 --> 00:43:17.040
<v Rodja>- And what you can see when you look at the interface and the writing the API also, you simply say, okay, I get it with a new UI scene.

00:43:17.520 --> 00:43:30.000
<v Rodja>I then have with a group or with some element and you can then write like the scene STL and you load some STL file in 3G, in 3D.

00:43:30.220 --> 00:43:54.820
<v Rodja>And the thing is that it's also, we try to make it very, very simple from the API that when you are writing code that you don't have this to think about, okay, what to do next and how to arrange it or so, but you simply can write it down and then you have modifiers like.scale 0.3 that you can really say, okay, no, it's a little bit smaller And here you go with auto intention and completion.

00:43:55.300 --> 00:43:55.420
<v Rodja>Yeah.

00:43:55.420 --> 00:43:55.660
<v Michael Kennedy>Yeah.

00:43:55.880 --> 00:43:57.300
<v Michael Kennedy>You know what I really like about this?

00:43:57.920 --> 00:44:08.980
<v Michael Kennedy>That the shape of the code mirrors-- the hierarchy of the code mirrors the hierarchy of the HTML and the DOM and all those kinds of things.

00:44:09.200 --> 00:44:09.920
<v Michael Kennedy>That is really nice.

00:44:10.380 --> 00:44:16.860
<v Michael Kennedy>So you have a context manager for the grid, and then you put the things into the grid.

00:44:18.600 --> 00:44:24.220
<v Michael Kennedy>And it looks visually like the code of the things that are in the grid is indented into that area,

00:44:24.270 --> 00:44:52.520
<v Falko>right? Yeah, that's an example for two very important design decisions in our language, basically. The one is the with statement, which could be read as a within statement, but it's called with, but it's close enough. So you're saying with a grid, we are arranging these these elements like this and all elements that are nested in the with statement in the grid appear within the grid.

00:44:53.160 --> 00:44:53.740
<v Falko>That's one thing.

00:44:54.060 --> 00:44:59.040
<v Falko>And as you say, that results in a very visually clear code.

00:44:59.690 --> 00:45:04.920
<v Falko>And the other one is the builder pattern, which we strongly encourage and use a lot.

00:45:06.060 --> 00:45:19.020
<v Falko>Most modifiers like styling or event registrations binding can be done with a method which returns the object itself so you can chain them.

00:45:20.140 --> 00:46:09.820
<v Falko>Like you could scale the teapot and move it and rotate it and all in one line. And if you break the line, then it still looks visually grouped and you still see, okay, that's one element which is undergoing some transformations. It turns out pretty nicely. In contrast to what we saw at the just by example, which was one pain point with just by itself, they don't do that, the automatic context switching, but they use classic add functions. You have to create the object first, and then you can create the container, and then you can add the object to the container. And in And you lose complete control over the structure of the UI.

00:46:10.660 --> 00:46:11.900
<v Falko>The code doesn't match the UI.

00:46:13.060 --> 00:46:13.480
<v Falko>And that's what--

00:46:13.480 --> 00:46:18.260
<v Michael Kennedy>It's really tough to figure out when it gets to be a complicated UI setup.

00:46:19.420 --> 00:46:27.140
<v Michael Kennedy>And it's fine for automation to write this kind of code if you had a builder sort of thing, but it's not good to read.

00:46:27.580 --> 00:46:28.040
<v Speaker 3>Yeah, exactly.

00:46:29.540 --> 00:46:29.780
<v Rodja>Yeah.

00:46:31.940 --> 00:46:48.800
<v Rodja>Another interesting element could be the interactive image, which we came up with because the normal image from Quasar is very powerful but could not do overlays where you can paint on the object in image coordinates.

00:46:49.440 --> 00:47:10.800
<v Rodja>And so now the interactive image where you can simply click and do annotations like drawing circles and getting mouse events back from the image coordinates, which we use for annotating images for AI trainings and so, but also to overlay camera data and things like that.

00:47:11.610 --> 00:47:14.020
<v Rodja>And also the image can be very efficiently updated.

00:47:14.280 --> 00:47:18.460
<v Rodja>So we simply update the image content.

00:47:19.380 --> 00:47:27.400
<v Rodja>And when we send the data back to the browser, only when the browser really decides, okay, now I can load a new image, then it will update the image.

00:47:27.720 --> 00:47:39.280
<v Rodja>So if you have a lower bandwidth connection and you send update images 30 times a second, and the connection only can do two images per second, then it will only load two images per second.

00:47:39.740 --> 00:47:42.880
<v Rodja>And you have automatic frame control with that.

00:47:45.240 --> 00:47:45.880
<v Michael Kennedy>Very cool.

00:47:46.100 --> 00:47:47.180
<v Michael Kennedy>Yeah, that's amazing.

00:47:49.600 --> 00:47:56.280
<v Michael Kennedy>So I think I want to focus a little bit more on some UI elements and some building concepts to drive home a few points.

00:47:56.820 --> 00:48:02.900
<v Michael Kennedy>And then maybe we can talk some of the deployment, the 3.0 side of things.

00:48:07.940 --> 00:48:10.580
<v Michael Kennedy>So I see a very interesting question in the chat.

00:48:10.900 --> 00:48:11.760
<v Michael Kennedy>We'll come to that.

00:48:12.040 --> 00:48:23.880
<v Michael Kennedy>So one of the things I want to talk about is sub pages and building basically-- how do you build-- so these are all really interesting building blocks, right?

00:48:24.580 --> 00:48:26.040
<v Michael Kennedy>Each of these have been super impressive.

00:48:27.280 --> 00:48:33.600
<v Michael Kennedy>But how do I create something that has the feeling of more than one page?

00:48:33.640 --> 00:48:34.720
<v Michael Kennedy>How do I navigate around?

00:48:34.720 --> 00:48:39.300
<v Michael Kennedy>How do I give it a navigational structure and elements and so on?

00:48:39.780 --> 00:48:42.720
<v Rodja>So yeah, maybe talk a bit about that.

00:48:44.560 --> 00:48:53.720
<v Rodja>The basic idea of what comes from FastAPI is simply you send a get request via browser, and you get a web page.

00:48:53.980 --> 00:48:59.740
<v Rodja>and then you look at it and when you click on a link, then you send another get request and you get another page and you show it.

00:49:00.000 --> 00:49:04.300
<v Rodja>So this is the normal way and this is what NiceGUI supports from day one.

00:49:05.240 --> 00:49:16.220
<v Rodja>But now in preparation for our 3.0 release, we also introduced the sub-page concept where you simply have support for a single page application.

00:49:16.900 --> 00:49:25.660
<v Rodja>Only once connect to the server, get your image, get your website and then you can say, okay, there's a sub page.

00:49:25.740 --> 00:49:32.880
<v Rodja>And if I click that, then the content will be replaced, cleared and drawn a new with another function.

00:49:33.740 --> 00:49:37.100
<v Rodja>And so you can navigate on the page and it's much, much faster.

00:49:38.460 --> 00:49:40.380
<v Michael Kennedy>Yeah, that's, and it's support.

00:49:40.600 --> 00:49:50.400
<v Michael Kennedy>It's more spa friendly, single page application friendly, which potentially you could right click on and say install.

00:49:52.060 --> 00:49:52.880
<v Rodja>Yeah, exactly.

00:49:52.990 --> 00:49:57.880
<v Rodja>Yeah, I think the single page application is sounds so easy from the concept.

00:49:58.240 --> 00:50:05.580
<v Rodja>So we did a few runs and edit to get the API right and to get everything into place.

00:50:05.880 --> 00:50:13.520
<v Rodja>And if you look at the code, it's really demanding from a maintainer point of view, because there's a lot of going on.

00:50:13.520 --> 00:50:15.500
<v Rodja>You need to rewrite the history of the browser.

00:50:15.660 --> 00:50:19.520
<v Rodja>So back and forth buttons are working correctly and nested subpages.

00:50:19.660 --> 00:50:21.620
<v Rodja>So subpages in subpages and stuff like that.

00:50:21.780 --> 00:50:22.900
<v Michael Kennedy>You need to all support that.

00:50:23.540 --> 00:50:27.800
<v Michael Kennedy>You could grab the URL and then send it to somebody

00:50:27.940 --> 00:50:29.900
<v Speaker 3>and they have to open it as they go to the right place.

00:50:30.080 --> 00:50:30.960
<v Speaker 3>All these things are hard.

00:50:34.140 --> 00:50:35.260
<v Speaker 3>So is this something...

00:50:35.560 --> 00:50:36.060
<v Speaker 3>Sorry, go ahead, Falko.

00:50:36.920 --> 00:50:42.820
<v Falko>The documentation page itself uses the subpage concept, which is basically a single page application.

00:50:44.940 --> 00:50:47.620
<v Falko>our way of writing single page applications.

00:50:48.660 --> 00:50:53.820
<v Falko>So if you open the menu and jump from one subject to another,

00:50:54.640 --> 00:50:56.860
<v Speaker 3>this is all done without reloading,

00:50:57.020 --> 00:51:03.020
<v Falko>without sending new get requests to the server, just swapping the content, and that's much faster.

00:51:04.060 --> 00:51:05.360
<v Michael Kennedy>Yeah, that's cool.

00:51:05.400 --> 00:51:09.000
<v Michael Kennedy>And if I right click on it, I can say, install page as an app.

00:51:10.260 --> 00:51:12.280
<v Michael Kennedy>All right, that's pretty awesome.

00:51:12.900 --> 00:51:15.220
<v Michael Kennedy>I'm actually a huge fan of single page applications.

00:51:15.450 --> 00:51:17.580
<v Michael Kennedy>I think it's really great.

00:51:17.720 --> 00:51:25.360
<v Michael Kennedy>It's-- you know, you could save it into your doc or your task bar, and sure, it's just a web page.

00:51:26.400 --> 00:51:35.280
<v Michael Kennedy>But it actually-- I think it makes a really big difference to have it there just appearing to you as a separate thing.

00:51:35.330 --> 00:51:40.340
<v Michael Kennedy>You can command tab or alt tab between them easier, all sorts of stuff.

00:51:40.840 --> 00:51:47.920
<v Rodja>- Yeah, the web is really the most powerful application engine you have ever got.

00:51:48.540 --> 00:52:04.280
<v Rodja>So running web pages as desktop applications, like Electron or like your Proton idea was that you say, okay, there's something, and we support this with NiceGuy.

00:52:04.440 --> 00:52:16.260
<v Rodja>You can simply write, okay, I will have a native true argument in the UI run, and then you start it up and it's really enclosed in a window, but it's still running the web application there.

00:52:16.420 --> 00:52:21.340
<v Rodja>And because the web is so powerful and with NiceGuy, you can get access to all these powerful features.

00:52:21.860 --> 00:52:27.240
<v Rodja>You can really write very nice applications right now with all the interaction simply in Python.

00:52:28.000 --> 00:52:29.080
<v Michael Kennedy>- Yeah, all right.

00:52:29.500 --> 00:52:35.140
<v Michael Kennedy>Let's talk a little more deployment before we jump into the 3.0 features.

00:52:37.720 --> 00:52:44.900
<v Michael Kennedy>So first of all, You've got ui.run, and that was even in your three-line example that appears at the end.

00:52:45.540 --> 00:53:00.320
<v Michael Kennedy>You pass a bunch of commands like reload false and those sorts of things in order to give it more of a high-performance perspective instead of watching for reloads and that kind of stuff.

00:53:02.120 --> 00:53:18.940
<v Michael Kennedy>With that one, I can just go and put it into-- run it on my server in a VM, point Nginx or Caddy or whatever at the local host port, and set up an SSL certificate, and just turn it into a proper web application, right?

00:53:19.080 --> 00:53:22.460
<v Michael Kennedy>Because it's basically FastAPI on that end, right?

00:53:22.760 --> 00:53:22.960
<v Michael Kennedy>So--

00:53:23.180 --> 00:53:23.520
<v Rodja>Yeah.

00:53:23.720 --> 00:53:31.540
<v Rodja>It's simply starting the server, and then it opens the port, and you can access it however you like and how you want your deployment to be.

00:53:32.740 --> 00:54:04.040
<v Rodja>But I think one of the interesting feature requests from the community was that they have an existing FastAPI application and they want to have add some UI to it. And the interesting part is that it's really easy because it's all FastAPI, so we could sub mount it. And there's a UI run with statement where you can say, okay, I have this, I want to run this within another FastAPI app behind that. And then you give a sub path and then all your application is running on another FastAPI app.

00:54:05.320 --> 00:54:05.560
<v Michael Kennedy>Interesting.

00:54:06.000 --> 00:54:06.140
<v Michael Kennedy>Okay.

00:54:08.660 --> 00:54:14.120
<v Michael Kennedy>And I guess because it's running on UVicorn, that's already a production Python app server.

00:54:14.680 --> 00:54:27.760
<v Michael Kennedy>But one of the things that happens frequently when you put stuff into production for more than just a small project is you have a web garden, I guess it's called, where you have multiple workers of UVicorn or something like that.

00:54:27.840 --> 00:54:29.520
<v Michael Kennedy>And that works okay if you set it up that way.

00:54:29.620 --> 00:54:45.980
<v Rodja>there's not some kind of weird issue. The main problem is that the NiceGUI architecture demands that the WebSocket connection comes back to the same server to find the ID. And if you have multiple

00:54:46.240 --> 00:54:52.320
<v Speaker 3>workers, then there's round robin from the Ubicorn to send it to some of the other workers. And maybe

00:54:52.420 --> 00:55:08.780
<v Rodja>the worker doesn't know about it. We recently introduced a feature, or maybe it's a year ago, already, that we support a storage space where you get access to via Redis.

00:55:09.170 --> 00:55:13.860
<v Rodja>So you can get the data stored from the user again or so.

00:55:14.090 --> 00:55:22.960
<v Rodja>Then you only need a proxy server which can have sticky sessions where you connect to the server and it routes you back to the right server instance.

00:55:23.580 --> 00:55:27.620
<v Speaker 3>And so you can really get a lot of instances running.

00:55:28.430 --> 00:55:31.720
<v Rodja>And we do this for the documentation page, which is crazy.

00:55:32.160 --> 00:55:36.540
<v Speaker 3>Also deployed around the world so that in Taiwan,

00:55:37.040 --> 00:55:39.460
<v Rodja>they are also having a nice snappy interface.

00:55:39.690 --> 00:55:46.820
<v Rodja>So we need to run like it's now 30 servers or so to have really at the edge all the documentation ready.

00:55:47.440 --> 00:55:47.720
<v Michael Kennedy>Wow.

00:55:48.200 --> 00:55:48.640
<v Michael Kennedy>That's amazing.

00:55:48.900 --> 00:55:49.480
<v Michael Kennedy>That's so cool.

00:55:52.600 --> 00:55:53.500
<v Michael Kennedy>So you mentioned Redis.

00:55:53.680 --> 00:55:58.520
<v Michael Kennedy>What about Valkey? Are you familiar with Valkey? I imagine you could probably just swap it off.

00:55:59.740 --> 00:56:17.500
<v Rodja>Yeah, it could work very similar, I guess. We have not tested it yet, to be true, but I think from the concept space, it's the same. You need to really store the data and get it back to get the synchronization right.

00:56:18.320 --> 00:56:23.140
<v Michael Kennedy>Yeah, I think Valkey is basically was forked from Redis.

00:56:23.380 --> 00:56:26.120
<v Michael Kennedy>So it probably-- it might be able to just work.

00:56:26.640 --> 00:56:26.920
<v Speaker 3>OK.

00:56:27.420 --> 00:56:27.680
<v Speaker 3>Yeah, yeah.

00:56:27.900 --> 00:56:28.600
<v Speaker 3>Could be that.

00:56:29.120 --> 00:56:34.840
<v Michael Kennedy>Yeah, because I think Redis changed their license in ways that some people were frustrated with or didn't work for them.

00:56:35.200 --> 00:56:39.320
<v Michael Kennedy>So a group said, OK, well, there was a really permissive license not too long ago.

00:56:39.600 --> 00:56:41.740
<v Rodja>We're going to make a version of that, basically.

00:56:42.440 --> 00:56:42.600
<v Rodja>Yeah.

00:56:43.420 --> 00:56:44.440
<v Michael Kennedy>So it could work out of the box.

00:56:45.440 --> 00:56:45.940
<v Rodja>We'll try.

00:56:46.560 --> 00:56:47.380
<v Rodja>I have not tried it.

00:56:48.460 --> 00:56:49.460
<v Michael Kennedy>Let's be sure.

00:56:49.520 --> 00:56:52.460
<v Michael Kennedy>OK, a couple other options here that I think are interesting.

00:56:53.280 --> 00:56:55.640
<v Michael Kennedy>I'm a big fan of Docker and Docker Compose.

00:56:55.880 --> 00:56:56.080
<v Rodja>Yep.

00:56:57.480 --> 00:57:02.260
<v Michael Kennedy>And you all provide a really interesting way to just run it in Docker.

00:57:02.460 --> 00:57:12.300
<v Michael Kennedy>So a lot of times I find, OK, I'm building-- I'm going to deploy an app, so I'm going to copy my code over and set up a-- maybe I'd set up UVicorn in that Docker image and then run it.

00:57:12.820 --> 00:57:23.080
<v Michael Kennedy>But because you already have that as a concept of it, you guys have a NiceGUI image, and you just map to the source and run it, which I think is actually really nice.

00:57:23.820 --> 00:57:23.900
<v Rodja>Yeah.

00:57:24.560 --> 00:57:27.540
<v Rodja>Yeah, it helps to make deployments a little bit easier.

00:57:28.880 --> 00:57:48.040
<v Rodja>And the NiceGUI image we deploy there has also some fancy features, like having a non-root environment where you can simply have your group ID and things you normally not want at the first start when you do it.

00:57:48.140 --> 00:57:50.640
<v Rodja>But when you are going into production, you really need that.

00:57:51.500 --> 00:57:53.820
<v Rodja>And it's all packaged away in the stocker container already.

00:57:53.960 --> 00:57:57.220
<v Rodja>So you can simply use that for running and deploying.

00:57:57.540 --> 00:57:57.840
<v Rodja>Yeah.

00:57:57.840 --> 00:57:58.060
<v Michael Kennedy>Yeah.

00:57:58.340 --> 00:57:58.480
<v Michael Kennedy>Yeah.

00:57:58.640 --> 00:57:58.920
<v Michael Kennedy>Very cool.

00:57:59.640 --> 00:58:00.160
<v Michael Kennedy>All right.

00:58:01.380 --> 00:58:03.300
<v Michael Kennedy>I do want to leave just at least a little bit of time

00:58:03.360 --> 00:58:05.100
<v Rodja>to talk about the 3.0 direction.

00:58:05.560 --> 00:58:08.560
<v Michael Kennedy>But there's one here that's just-- We got to talk about it.

00:58:09.140 --> 00:58:09.440
<v Michael Kennedy>It's native.

00:58:10.380 --> 00:58:10.740
<v Rodja>Yeah.

00:58:13.039 --> 00:58:14.040
<v Michael Kennedy>This is incredible.

00:58:14.300 --> 00:58:16.220
<v Michael Kennedy>This is the proton, right?

00:58:16.780 --> 00:58:17.500
<v Michael Kennedy>Yeah, exactly.

00:58:18.710 --> 00:58:19.660
<v Michael Kennedy>You guys tell me about this.

00:58:20.800 --> 00:58:21.100
<v Michael Kennedy>This is great.

00:58:26.679 --> 00:58:33.800
<v Falko>Yeah, when you run a UI run, when you call it UI run, you have a parameter native, and you will set it to true.

00:58:34.180 --> 00:58:40.900
<v Falko>And then there is no web browser opening, but a native window.

00:58:41.240 --> 00:58:46.540
<v Falko>And what used to be a website is now running inside this native window.

00:58:46.780 --> 00:58:52.300
<v Falko>And yeah, it's behaving like a native app, and you don't notice that it's actually a website running.

00:58:52.700 --> 00:58:57.100
<v Falko>Yeah, because it uses PyInstaller, or you can use PyInstaller to package it up.

00:58:57.760 --> 00:58:58.960
<v Speaker 3>Yeah, that's the next step, yeah, of course.

00:58:59.080 --> 00:59:04.680
<v Falko>You can take this app, or you can also use a regular app, which is not native, I guess.

00:59:04.900 --> 00:59:05.460
<v Falko>I'm not sure.

00:59:06.640 --> 00:59:11.880
<v Falko>But yeah, once you have a native app, you can package it, and then you can distribute it much easier.

00:59:12.140 --> 00:59:12.320
<v Michael Kennedy>Yeah.

00:59:14.260 --> 00:59:16.160
<v Michael Kennedy>Let me throw an idea out there for you.

00:59:20.220 --> 00:59:26.720
<v Michael Kennedy>With either pipX or uv, you can basically install something from PyPI, right?

00:59:28.520 --> 00:59:33.340
<v Michael Kennedy>In there, you can set a entry point, like my app or whatever.

00:59:33.660 --> 00:59:34.200
<v Michael Kennedy>Give it a good name.

00:59:35.020 --> 00:59:44.680
<v Michael Kennedy>And then so you could just say uvx space, like the name of your package, uvx space package, and it'll just run it.

00:59:45.600 --> 00:59:49.900
<v Michael Kennedy>And it'll download it and run it from the virtual environment like you need.

00:59:50.000 --> 00:59:59.420
<v Michael Kennedy>I think people could start shipping GUI apps that look like native windows just using uv and uvx.

01:00:00.320 --> 01:00:00.780
<v Rodja>Yeah.

01:00:02.420 --> 01:00:03.080
<v Michael Kennedy>Have you tried this?

01:00:03.460 --> 01:00:04.680
<v Falko>We haven't tried it.

01:00:05.400 --> 01:00:06.040
<v Falko>That's a good idea.

01:00:06.560 --> 01:00:09.520
<v Falko>We're just beginning to work with uv and uvx.

01:00:10.460 --> 01:00:12.500
<v Falko>But uvx is a really powerful tool.

01:00:13.080 --> 01:00:13.460
<v Falko>You're right.

01:00:15.400 --> 01:00:24.000
<v Michael Kennedy>Yeah, and if you just put an entry point or a script entry into the PyProject.toml, then that would do the launch.

01:00:24.140 --> 01:00:26.300
<v Michael Kennedy>And then if you run it as native, it would show up without a terminal.

01:00:27.000 --> 01:00:28.940
<v Falko>And you wouldn't even need to package it, right?

01:00:29.260 --> 01:00:29.660
<v Falko>Yes, exactly.

01:00:30.940 --> 01:00:32.580
<v Michael Kennedy>Yeah, you wouldn't have to package it at all,

01:00:32.600 --> 01:00:33.840
<v Rodja>and it would be cross-platform.

01:00:35.860 --> 01:00:37.340
<v Rodja>That's an intriguing idea.

01:00:37.560 --> 01:00:39.480
<v Rodja>Maybe someone has already done it.

01:00:40.000 --> 01:00:42.480
<v Rodja>So if so, please leave a comment there.

01:00:43.640 --> 01:00:44.480
<v Michael Kennedy>Indeed, indeed.

01:00:46.740 --> 01:00:49.320
<v Michael Kennedy>OK, let's talk about 3.0.

01:00:49.440 --> 01:01:00.220
<v Michael Kennedy>So if I go to the GitHub right now and I unzoom my window and go to releases, we're on 2.24.2.

01:01:00.220 --> 01:01:02.960
<v Michael Kennedy>But I know really soon you are going to be releasing 3.0.

01:01:02.960 --> 01:01:04.660
<v Michael Kennedy>You have plans for some really cool features.

01:01:05.560 --> 01:01:14.900
<v Michael Kennedy>And sort of the title of this podcast was like, let's celebrate both NiceGUI and then sort of a milestone of you guys are reaching that.

01:01:16.620 --> 01:01:19.400
<v Michael Kennedy>Most of the people will be listening in like four weeks.

01:01:19.540 --> 01:01:21.240
<v Michael Kennedy>So you got a little time before.

01:01:22.220 --> 01:01:24.760
<v Falko>But let's just talk about what's coming in 3.0.

01:01:25.080 --> 01:01:26.920
<v Falko>You can scroll a little bit down.

01:01:27.300 --> 01:01:28.760
<v Falko>There you'll find the release candidate.

01:01:31.100 --> 01:01:31.920
<v Falko>There we are.

01:01:32.340 --> 01:01:33.260
<v Falko>Yeah, there it is.

01:01:34.200 --> 01:01:36.340
<v Falko>Three weeks ago, we released release candidate one.

01:01:36.500 --> 01:01:39.440
<v Falko>That was before I went on vacation for two weeks.

01:01:40.420 --> 01:01:59.020
<v Falko>And yeah, we are in the last steps, maybe a few days ahead of releasing 3.0 and yeah, it, it, it started with, some housekeeping and, basically no big breaking changes.

01:01:59.460 --> 01:02:11.500
<v Falko>And we just wanted to update all dependencies like upgrading from, well, the most important thing was upgrading tailwind, which is on version four for a while now.

01:02:11.700 --> 01:02:14.560
<v Falko>And we've still been using a version three.

01:02:17.180 --> 01:02:24.040
<v Falko>But as it turns out, of course, there are some nasty changes that we have to account for.

01:02:24.480 --> 01:02:33.820
<v Falko>So our users don't have to, and that's why it takes quite a while to tackle all tiny difficulties.

01:02:34.560 --> 01:02:51.400
<v Falko>So that we are trying to release a major version around once a year to get all dependencies up to date and that people are not confused that on the tailwind documentation, there's a feature which NiceGUI doesn't have.

01:02:51.620 --> 01:02:53.380
<v Falko>And of course it depends on the version.

01:02:57.900 --> 01:03:07.740
<v Falko>But at that time, once in the year we are liberal, we are free to break some things, but we only want to do it once.

01:03:08.100 --> 01:03:09.740
<v Falko>So we have to be careful to do it right.

01:03:09.940 --> 01:03:13.180
<v Falko>And we can't change it a few weeks later again.

01:03:15.420 --> 01:03:21.320
<v Falko>And we want to have only breaking changes that are okay to migrate.

01:03:22.580 --> 01:03:29.780
<v Falko>We want to have a clear migration guide and no nasty things that you only find when you're reading all your code again.

01:03:30.610 --> 01:03:34.800
<v Falko>And with the changes in mind, that's why it can become a bit difficult.

01:03:36.820 --> 01:03:56.500
<v Rodja>The new release is really like the major version is really challenging, but also a good point where we can introduce very great and new features which help the code base and NiceGUI to evolve into the thing we envisioned there.

01:03:57.060 --> 01:04:10.640
<v Rodja>And one of the great things we did, there is we have this now a new root parameter where you can say UIRun, and then you pass one page like a function, simply a function there, and this will be the main page.

01:04:10.700 --> 01:04:13.880
<v Rodja>So it's much more single page application friendly.

01:04:14.020 --> 01:04:19.120
<v Rodja>You simply have one function and you pass it into the UIRun, and this is your page.

01:04:19.260 --> 01:04:29.160
<v Rodja>Yeah, and then inside you can use UIPage, subpages to create subpages, which are then single pages running and so it makes it much more easier.

01:04:29.440 --> 01:04:38.460
<v Rodja>You don't have these boilerplate annotations at UI page and then some URL parameters or so, but you can streamline that a little bit.

01:04:38.520 --> 01:04:41.940
<v Rodja>And things like that are really nice to have in a framework.

01:04:42.640 --> 01:04:43.800
<v Michael Kennedy>Yeah, that sounds really great.

01:04:44.560 --> 01:04:48.420
<v Michael Kennedy>Will it have full SPA support if somebody writes an app that way?

01:04:48.520 --> 01:04:52.760
<v Michael Kennedy>Could they right click and say install page or install this app?

01:04:52.980 --> 01:04:56.700
<v Michael Kennedy>it'll have like a, what is it, serviceworker.js and all that kind of business?

01:04:57.410 --> 01:04:59.520
<v Rodja>Yeah, you can basically do it.

01:05:00.340 --> 01:05:18.680
<v Rodja>We don't have a Python API for the service workers yet, but of course you can always, a NiceGUI, write your special JavaScript or HTML code and pass it along with your Python code, and then you can get the data there.

01:05:19.220 --> 01:05:25.780
<v Rodja>But most of the applications, when you write them with NiceGuy, they rely on the server connection.

01:05:26.290 --> 01:05:30.600
<v Rodja>So if you are offline, it doesn't make so much sense to use it.

01:05:31.460 --> 01:05:42.040
<v Rodja>But still, if you install something on your desktop and you connect to it back, then, of course, if you have an internet connection, you can load everything and be right back where you left.

01:05:42.940 --> 01:05:45.740
<v Michael Kennedy>Yeah, I think there's two parts to single-page applications.

01:05:47.100 --> 01:05:49.680
<v Michael Kennedy>More like PWAs, I guess, is the way I want to say it.

01:05:49.680 --> 01:05:50.280
<v Rodja>Yeah, exactly.

01:05:50.500 --> 01:05:58.040
<v Michael Kennedy>And that's-- I know one of the ideas is it can completely work offline, and it uses local DB.

01:05:58.580 --> 01:06:01.160
<v Michael Kennedy>And you could just-- it's just an app that runs locally.

01:06:01.260 --> 01:06:06.120
<v Michael Kennedy>But I think that's-- a lot of apps need the server to be doing anything interesting anyway.

01:06:07.280 --> 01:06:09.560
<v Michael Kennedy>You've got to have a very complicated app to do.

01:06:09.780 --> 01:06:12.140
<v Michael Kennedy>Like, if I was building Notion but 100% offline,

01:06:12.620 --> 01:06:14.300
<v Rodja>that's a really complicated app.

01:06:14.980 --> 01:06:19.700
<v Michael Kennedy>But I think it's also really nice to have an app model for the way you interact with it.

01:06:19.940 --> 01:06:21.800
<v Speaker 3>So the window-- you don't have all the Chrome around.

01:06:22.100 --> 01:06:24.400
<v Michael Kennedy>If you close your browser, you don't necessarily close that.

01:06:25.040 --> 01:06:27.360
<v Michael Kennedy>But also just the speed of loading,

01:06:27.680 --> 01:06:29.160
<v Speaker 3>you can cache a bunch of things potentially

01:06:30.140 --> 01:06:31.720
<v Michael Kennedy>and then sync them with the server.

01:06:32.000 --> 01:06:36.160
<v Michael Kennedy>I think there's still a lot of interesting benefits, even if it requires being connected to work.

01:06:36.440 --> 01:06:37.440
<v Rodja>Yeah, totally true.

01:06:38.680 --> 01:06:43.360
<v Michael Kennedy>OK, a couple of questions real quick, and then we're out of time.

01:06:44.220 --> 01:07:00.220
<v Michael Kennedy>First, Alan out there says, will 3.0 have LLM friendly docs in the sense that could I download something that I could put into my project and tell my agentic coding agent, anytime you need to know about it, this is the one.

01:07:00.520 --> 01:07:00.840
<v Michael Kennedy>Look here.

01:07:01.900 --> 01:07:07.500
<v Michael Kennedy>And then not have to have it always searching different parts of the web and so on.

01:07:12.120 --> 01:07:17.080
<v Falko>Rodja, remind me, we do have an endpoint for AIs already.

01:07:17.540 --> 01:07:18.240
<v Rodja>- Yeah, yeah.

01:07:19.500 --> 01:07:30.860
<v Falko>- We don't have the rendered documentation in a single page format, but we prepared for AIs already.

01:07:31.340 --> 01:07:38.940
<v Rodja>- When you look at the documentation implementation, it's simply Python code running through our PyDocs and getting all the strings out.

01:07:39.460 --> 01:07:47.940
<v Rodja>And the same mechanics is used to build a text version only, dump down version where you simply have a txt file.

01:07:48.260 --> 01:07:51.280
<v Rodja>And I think we provided it a year ago or so already.

01:07:53.760 --> 01:07:58.760
<v Rodja>And right now, the LLMs not know everything of NiceGUI, but a lot.

01:07:58.780 --> 01:08:04.380
<v Rodja>But if you put this URL in there to have a documentation lookup, it's much, much better.

01:08:05.060 --> 01:08:06.080
<v Michael Kennedy>OK, that's really awesome.

01:08:06.360 --> 01:08:07.900
<v Michael Kennedy>What about an MCP server?

01:08:09.400 --> 01:08:10.300
<v Michael Kennedy>Have you considered this?

01:08:10.320 --> 01:08:12.640
<v Michael Kennedy>I think it's probably not super different.

01:08:13.380 --> 01:08:15.540
<v Rodja>It could be a worthwhile addition.

01:08:15.920 --> 01:08:23.640
<v Rodja>We have not taken the time to do it, but of course contributions in that area would be really nice to make it even better.

01:08:24.020 --> 01:08:33.259
<v Rodja>I think there are also two ChatGPT endpoints which are primed to answer questions for that.

01:08:34.100 --> 01:08:34.259
<v Michael Kennedy>Okay.

01:08:35.900 --> 01:08:36.700
<v Michael Kennedy>What's the URL?

01:08:36.819 --> 01:08:38.700
<v Michael Kennedy>How do I find it so I can put it in the show notes?

01:08:40.900 --> 01:08:41.220
<v Michael Kennedy>Do you know?

01:08:41.390 --> 01:08:41.480
<v Michael Kennedy>No.

01:08:41.960 --> 01:08:42.100
<v Speaker 3>All right.

01:08:42.589 --> 01:08:43.160
<v Speaker 3>Give it to me later.

01:08:43.210 --> 01:08:43.880
<v Speaker 3>We'll put it in the show notes.

01:08:43.950 --> 01:08:44.640
<v Speaker 3>Yeah, give it to me later.

01:08:44.710 --> 01:08:45.180
<v Michael Kennedy>Give it to me later.

01:08:45.880 --> 01:08:58.880
<v Michael Kennedy>OK, and then another one is I have a friend who's building really interesting, full-fledged SaaS type of applications using NiceGUI.

01:08:58.950 --> 01:09:01.759
<v Michael Kennedy>And it looks so impressive what they're building.

01:09:01.920 --> 01:09:02.160
<v Michael Kennedy>It's great.

01:09:04.460 --> 01:09:08.540
<v Michael Kennedy>But what about authentication, multi-tenant?

01:09:08.700 --> 01:09:13.560
<v Michael Kennedy>So certain people can only see their data versus all the data.

01:09:14.760 --> 01:09:19.339
<v Michael Kennedy>What's the authentication and sort of multi-tenancy, I guess, sorry?

01:09:19.980 --> 01:09:20.040
<v Rodja>Yeah.

01:09:21.299 --> 01:09:26.880
<v Rodja>Yeah, basically, because we are running FastAPI, you can do anything what FastAPI can do with authentication.

01:09:27.580 --> 01:09:37.900
<v Rodja>And we also have quite a few examples on the web page where you can see, okay, how to do OAuth authentication with Google or Runtab authentications.

01:09:38.900 --> 01:10:11.680
<v Rodja>you could simply build a passphrase input and do a login because when you are looking at it it's simply a decision what to show the user and you have python at your hands so you can do decide whatever you want and you can load the right data from the from a database or use our local storage system where you can like ask okay for the user what are the configurations what should he is he allowed to see what other permissions, and you can store it there, and you can retrieve it from there.

01:10:11.820 --> 01:10:22.700
<v Rodja>And it's a cookie-signed process, which is a web cookie, which is pretty safe, and is right the way to do the authentication.

01:10:23.620 --> 01:10:25.180
<v Michael Kennedy>Yeah, okay, fantastic.

01:10:26.320 --> 01:10:32.880
<v Michael Kennedy>And a couple of people have asked, including SilverBlade says, Will it be possible to switch from Quasar to something else?

01:10:33.160 --> 01:10:39.480
<v Michael Kennedy>Or would it be possible to switch Tailwind for another utility-type framework like Bulma or something like that?

01:10:40.780 --> 01:10:41.760
<v Michael Kennedy>That's a good question.

01:10:44.120 --> 01:10:47.440
<v Falko>Right now-- well, starting with Tailwind.

01:10:47.860 --> 01:10:51.360
<v Falko>Tailwind is already a pretty thin layer on top.

01:10:51.720 --> 01:10:53.860
<v Falko>You can already disable Tailwind.

01:10:54.040 --> 01:10:55.980
<v Falko>Then NiceGUI runs without Tailwind support.

01:10:56.820 --> 01:11:01.980
<v Falko>And you can pretty easily add other frameworks like Bulma.

01:11:03.360 --> 01:11:07.340
<v Falko>I haven't tried it, but it looks like you just have to add a CSS file.

01:11:08.320 --> 01:11:09.940
<v Falko>You can simply add it to your--

01:11:09.940 --> 01:11:10.400
<v Michael Kennedy>Yeah, that's right.

01:11:10.440 --> 01:11:12.200
<v Michael Kennedy>You literally just include the CSS file.

01:11:12.340 --> 01:11:13.060
<v Michael Kennedy>There's no build steps.

01:11:13.200 --> 01:11:15.020
<v Michael Kennedy>And then you just use utility classes there.

01:11:15.080 --> 01:11:16.380
<v Michael Kennedy>So it's plausible.

01:11:16.880 --> 01:11:17.360
<v Falko>Exactly.

01:11:17.500 --> 01:11:23.520
<v Falko>And because NiceGUI is pretty agnostic when it comes to classes, you can simply add classes to your elements.

01:11:23.840 --> 01:11:28.100
<v Falko>and then they will use Bulma if you loaded Bulma.

01:11:29.380 --> 01:11:31.040
<v Falko>So that's pretty easy.

01:11:32.040 --> 01:11:38.000
<v Falko>We can think about official support that you can switch between frameworks.

01:11:39.660 --> 01:11:42.260
<v Falko>Yeah, that could be a feature request we could be thinking about.

01:11:43.460 --> 01:11:56.960
<v Falko>The more difficult thing is replacing Quasar Of course, the Python implementation of these elements is pretty tightly coupled to the framework.

01:11:58.900 --> 01:12:04.080
<v Falko>Equator button behaves a bit differently than maybe some other button.

01:12:05.520 --> 01:12:09.400
<v Falko>That's where we would probably have to implement new elements.

01:12:12.460 --> 01:12:16.580
<v Falko>Maybe with a different name or we have to use some global switch.

01:12:17.580 --> 01:12:33.080
<v Falko>It is not planned right now, but it's not completely off the table because sometimes we get asked if we could get a more modern feel for NiceGUI apps and Quasar is already a bit dated.

01:12:33.760 --> 01:12:37.220
<v Falko>The material design is not the very newest.

01:12:38.760 --> 01:12:39.680
<v Michael Kennedy>I do like it though.

01:12:40.120 --> 01:12:42.140
<v Michael Kennedy>It looks clean and friendly.

01:12:42.260 --> 01:12:45.780
<v Falko>Yeah, especially if you deviate a little bit from the standards.

01:12:46.180 --> 01:12:54.900
<v Falko>If you remove the shadow, make sharp edges or something, which is pretty easy and nice to do globally, you can say all my buttons should have these props.

01:12:56.360 --> 01:13:00.000
<v Falko>Then you can build pretty nice apps, I guess, even with Quasar.

01:13:02.960 --> 01:13:52.800
<v Falko>But last days I spent so much time with Quasar Tailwind and their CSS layers because Tailwind before introduced CSS layers, or they don't introduce it, but they are using them right now. Quasar does not. And Quasar does its own things to make some statements more important than others. And it makes it pretty difficult to integrate with other frameworks. And I started to think about maybe removing Quasar, some in MySky four or five. But we'll have Maybe Quasar comes out with a new version with a better CSS layering strategy and maybe a new look and feel or maybe a better theming support.

01:13:54.660 --> 01:13:55.240
<v Michael Kennedy>Then it's back.

01:13:56.040 --> 01:13:56.140
<v Falko>Yeah.

01:13:56.740 --> 01:13:59.580
<v Falko>But a few weeks ago,

01:13:59.740 --> 01:14:06.960
<v Rodja>we had a pull request merged in where you could add very simply other frameworks on top of you

01:14:07.480 --> 01:14:08.900
<v Speaker 3>to put them in

01:14:09.220 --> 01:14:13.040
<v Rodja>and replace either the Quasar part completely.

01:14:13.180 --> 01:14:20.340
<v Rodja>then you cannot write UI button, but you can do it with the underlying mechanics of NiceGUI nonetheless.

01:14:21.700 --> 01:14:24.160
<v Rodja>But yeah, or you could use it as an addition.

01:14:25.200 --> 01:14:25.560
<v Michael Kennedy>- Yeah.

01:14:25.560 --> 01:14:25.580
<v Michael Kennedy>Yeah.

01:14:25.970 --> 01:14:27.700
<v Michael Kennedy>Just to be clear, I'm not saying you should be doing this.

01:14:27.840 --> 01:14:29.140
<v Rodja>Like you all wanna stay focused,

01:14:29.280 --> 01:14:30.160
<v Michael Kennedy>but I do think it's interesting.

01:14:30.400 --> 01:14:32.160
<v Rodja>You know, these people are all like,

01:14:32.190 --> 01:14:33.860
<v Michael Kennedy>hey, we're using this other thing.

01:14:33.930 --> 01:14:34.840
<v Michael Kennedy>And could we-

01:14:34.840 --> 01:14:37.260
<v Rodja>- There's so many features you could do.

01:14:37.260 --> 01:14:40.360
<v Rodja>And we need to decide, okay, what is going on?

01:14:40.360 --> 01:14:46.860
<v Rodja>What do we like and what do we not like, but also what comes from the community as feedback and as a feature request.

01:14:46.880 --> 01:15:05.100
<v Rodja>We cannot implement everything, but we really like to have a very feature rich and environment which doesn't constrain you so much, which allows you to deviate from the norm, find different aspects and evolve from that.

01:15:05.860 --> 01:15:06.080
<v Falko>- Yeah.

01:15:06.080 --> 01:15:13.720
<v Falko>And our main guideline is, would it be nice If another framework would be nice to have in NiceGuide, then we should maybe do it.

01:15:13.900 --> 01:15:16.420
<v Michael Kennedy>And we are always open to alternatives.

01:15:16.940 --> 01:15:17.380
<v Michael Kennedy>OK.

01:15:17.600 --> 01:15:17.960
<v Michael Kennedy>Sounds great.

01:15:18.120 --> 01:15:18.280
<v Michael Kennedy>All right.

01:15:18.640 --> 01:15:21.480
<v Michael Kennedy>Well, we're pretty much over time, so that means out of time.

01:15:22.700 --> 01:15:31.500
<v Michael Kennedy>Let's round this out with a quick question as sort of leading into the final call to action for people who are interested in the project.

01:15:31.780 --> 01:15:37.200
<v Michael Kennedy>So first of all, 14,000 GitHub stars, 830 forks.

01:15:37.420 --> 01:15:38.620
<v Michael Kennedy>You all must be super proud of that.

01:15:39.420 --> 01:15:42.040
<v Michael Kennedy>The other one is, are you looking for contributors?

01:15:42.900 --> 01:15:44.140
<v Michael Kennedy>What can people help with?

01:15:45.040 --> 01:15:46.160
<v Michael Kennedy>That kind of thing, right?

01:15:48.360 --> 01:15:53.300
<v Falko>Yeah, we are definitely always happy about any new contributors.

01:15:54.460 --> 01:15:59.840
<v Falko>We are always encouraging new users, new members of the community.

01:16:00.500 --> 01:16:05.320
<v Falko>If they have an idea how to improve it, we encourage them to, hey, do you want to make a pull request?

01:16:05.540 --> 01:16:09.080
<v Falko>Yeah, maybe it's the first one ever, but it's a great experience.

01:16:09.350 --> 01:16:11.400
<v Falko>And then you are an official NiceGUI contributor.

01:16:12.440 --> 01:16:18.280
<v Michael Kennedy>What kind of contributions would you want-- what would be most helpful from the community for you all?

01:16:18.780 --> 01:16:20.400
<v Falko>Versus maybe it's in certain areas, you're like,

01:16:20.520 --> 01:16:21.140
<v Michael Kennedy>it's so complicated.

01:16:21.560 --> 01:16:22.440
<v Michael Kennedy>Let us handle this part.

01:16:22.840 --> 01:16:23.720
<v Michael Kennedy>It has to be this way.

01:16:24.100 --> 01:16:25.100
<v Falko>That's a good question.

01:16:25.760 --> 01:16:29.560
<v Falko>And we don't have a really easy answer about it.

01:16:30.460 --> 01:16:48.320
<v Falko>There are parts where we reach the edge of our knowledge, where if, especially if users are scrolling through the open issues or pull requests and see some topic where they are maybe very experienced.

01:16:48.820 --> 01:16:59.060
<v Falko>And there are, we are trying to be very transparent about unsolved bugs or feature requests and where we don't know how to do it.

01:16:59.840 --> 01:17:19.560
<v Falko>And yeah, maybe even an open, an issue where we are still missing reproduction, something that's weird, but we can't reproduce it. Any step forward to solving these issues is helpful. Yeah, especially in areas where

01:17:19.600 --> 01:17:34.800
<v Michael Kennedy>we are out of knowledge. Yeah. All right. Sounds great. All right. Well, I guess we're going to leave it there with that. So final call to action. People want to get started with a NiceGUI. What

01:17:34.940 --> 01:18:11.300
<v Rodja>NiceGUI or ub install a NiceGUI and then launch it up write some code in it and feel free to to give us some notes and things what you would like to see but also just experiment with it and maybe it doesn't click with everyone and that's fine and maybe there are people who really much more like another framework or even write html and simply fast api but for those who who don't want to leave the environment with which are where they are very familiar with, I think Nysga is really a good starting point.

01:18:12.120 --> 01:18:12.980
<v Michael Kennedy>- Yeah, awesome.

01:18:13.320 --> 01:18:14.040
<v Michael Kennedy>Well, thank you so much.

01:18:14.780 --> 01:18:16.860
<v Michael Kennedy>Congratulations on the great project.

01:18:17.100 --> 01:18:19.880
<v Michael Kennedy>I know tons of people are getting lots of value.

01:18:20.140 --> 01:18:22.200
<v Michael Kennedy>So thanks for being on the show.

01:18:22.420 --> 01:18:23.640
<v Michael Kennedy>Thanks for creating it and sharing it.

01:18:24.140 --> 01:18:24.900
<v Rodja>- Yeah, thanks for having us.

01:18:25.160 --> 01:18:25.260
<v Rodja>- Thanks for having us.

01:18:25.260 --> 01:18:25.760
<v Rodja>- Thanks for having us.

01:18:26.340 --> 01:18:27.020
<v Michael Kennedy>- Yeah, see y'all.

01:18:27.600 --> 01:18:27.880
<v Rodja>- Bye.

