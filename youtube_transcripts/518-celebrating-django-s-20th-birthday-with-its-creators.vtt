WEBVTT

00:00:01.500 --> 00:00:04.300
Hello, everyone. Welcome to Talk Python To Me.

00:00:04.400 --> 00:00:08.800
I'm so excited to be celebrating Django's 20th birthday.

00:00:09.160 --> 00:00:15.480
What a milestone. We have Will Vincent, we have Adrian, we have Theobald, we have Jeff, we have Simon.

00:00:16.960 --> 00:00:21.480
Many of the original people have the origin of Django here to talk about it.

00:00:21.600 --> 00:00:23.120
So welcome all of you.

00:00:25.240 --> 00:00:25.880
Thanks, Michael.

00:00:26.680 --> 00:00:34.160
Yeah, you bet. It's going to be a lot of fun to go back to some stories and maybe also see where things are going after 20 years.

00:00:34.380 --> 00:00:36.780
It's still going strong, to be sure.

00:00:36.980 --> 00:00:38.560
So what an accomplishment.

00:00:39.940 --> 00:00:45.580
Let's just start with a real quick, who am I, introduction from each of you.

00:00:45.760 --> 00:00:49.440
Just give us the elevator pitch on you and your Django life.

00:00:49.700 --> 00:00:52.400
And we'll go around the Brady Bunches in order, I suppose, here on the screen.

00:00:52.700 --> 00:00:54.520
So Will, welcome.

00:00:54.650 --> 00:00:56.260
Okay, so we'll go from least to most important.

00:00:57.760 --> 00:01:02.320
So I'm a developer advocate at JetBrains, some Django books, a podcast.

00:01:04.879 --> 00:01:05.560
I think that's enough.

00:01:05.600 --> 00:01:07.700
We have more important people to come.

00:01:11.120 --> 00:01:11.400
All right.

00:01:11.860 --> 00:01:12.460
Adrian, welcome.

00:01:12.740 --> 00:01:13.800
First time to have you on the show.

00:01:14.520 --> 00:01:15.080
Happy to have you here.

00:01:15.140 --> 00:01:15.260
Yeah.

00:01:15.680 --> 00:01:15.800
Hi.

00:01:16.600 --> 00:01:20.480
I'm Adrian, one of the creators of Django many years ago.

00:01:20.900 --> 00:01:21.620
Precisely 20.

00:01:23.119 --> 00:01:24.320
Long-time web developer.

00:01:24.720 --> 00:01:26.800
And yeah, that's basically it.

00:01:27.860 --> 00:01:28.120
Awesome.

00:01:28.620 --> 00:01:29.300
I'm Simon.

00:01:29.500 --> 00:01:31.480
I'm Adrian's intern, effectively.

00:01:32.560 --> 00:01:37.880
We built the first version of Django during my year-long paid internship at the Longest Journal World in Kansas.

00:01:38.640 --> 00:01:42.560
My university had a year in industry thing, which meant I could get a visa.

00:01:42.940 --> 00:01:46.440
We worked on what we called the CMS at the time.

00:01:46.600 --> 00:01:48.340
We didn't know that it was a web framework.

00:01:48.450 --> 00:01:50.580
We thought it was a tool for building local newspapers.

00:01:51.500 --> 00:01:52.000
Yeah.

00:01:52.400 --> 00:01:54.160
almost got named TPS, which would be amazing.

00:01:56.840 --> 00:01:57.900
Well, I'm on.

00:01:58.600 --> 00:01:59.080
Oh, go ahead.

00:01:59.320 --> 00:02:04.060
Sorry. Sorry. I was going to say, Simon, you're almost more well known for your AI stuff these days.

00:02:04.380 --> 00:02:08.619
You've been in the news so much.

00:02:08.619 --> 00:02:09.679
I see you everywhere now.

00:02:09.820 --> 00:02:12.240
It's like congratulations on like having to.

00:02:13.180 --> 00:02:20.100
Yeah. I mean, that was the trick there is I have a blog and not everyone else gave up on blogging, but I kept going.

00:02:20.580 --> 00:02:27.840
And so when AI started up, I was the only person blogging about AI, which turns out gets you invited to all of the weird Silicon Valley mansion parties and things.

00:02:28.410 --> 00:02:31.140
So, yeah, that's been an interesting little twist over the past couple of years.

00:02:31.820 --> 00:02:32.060
Yeah.

00:02:32.660 --> 00:02:34.140
Jeff Triplett, I'm so sorry to cut you off.

00:02:34.380 --> 00:02:34.760
Happy to have you.

00:02:34.790 --> 00:02:35.160
No, no, no.

00:02:35.250 --> 00:02:35.520
All good.

00:02:36.240 --> 00:02:37.220
I thought it was pretty free form.

00:02:37.830 --> 00:02:44.960
But I came to Lawrence, Kansas two years after these two had left, maybe three years after these two had left to work at the newspaper.

00:02:45.480 --> 00:02:46.240
I've stuck around.

00:02:46.400 --> 00:02:59.920
probably one of the few people left that stuck around that worked in the journal world, me and Frank Wiles, who's over here someplace. I'm on the Django Software Foundation board of directors. I've talked with DjangoCon US for, I think, 11 years now and do a newsletter with Will and a bunch of

00:03:00.020 --> 00:03:10.800
random Django projects. So that's me. Jeff, were you there for the whole of Media for Media, the commercial arm of the newspaper doing Django stuff? About three years of it. It just had moved

00:03:10.840 --> 00:03:20.040
across the street to the Little Red building. They called Little Red. Right. I think I moved, When I moved here, it was within a month or two of that starting in the building.

00:03:21.140 --> 00:03:25.600
Awesome. I'd love to hear little stories from that era of Django. I missed that bit entirely.

00:03:27.900 --> 00:03:40.420
And I'm last. I'm Thibault. I'm on the board with Jeff. I'm the president of the Django Software Foundation for 2025. I've been involved with Django for only 10 years.

00:03:42.380 --> 00:03:52.240
So much less than everyone else here. Yeah, outside that, I'm a dev. I'm on a core team for an open source project called Wagtail, which is a CMS as well built on Django.

00:03:54.260 --> 00:04:04.300
Yeah, welcome. And Wagtail is a really cool project. I think people who are looking to take the CMS idea and level it up even more.

00:04:04.850 --> 00:04:26.220
And you know, I've got a little bit of Wagtail related career history. Wagtail came out of a Torchbox for about six months to a year, quite early on, working on one of the first Django projects that Torchbox worked on. It was a carbon calculator that we were building. I had nothing to do with Wagtail at all. That was probably 10 years after I left Torchbox.

00:04:26.420 --> 00:04:28.240
But I know the Torchbox team really well.

00:04:29.580 --> 00:04:38.820
We should also, I mean, Jeff, amongst other things, you run Django packages.org right now. And I think Wagtail is number one or two with Django REST framework for most downloaded.

00:04:39.480 --> 00:04:40.100
It's something like that.

00:04:40.130 --> 00:04:40.980
It's one of the top three.

00:04:41.310 --> 00:04:42.500
I feel confident saying that.

00:04:45.100 --> 00:04:45.740
Maybe you don't.

00:04:45.790 --> 00:04:46.040
I do.

00:04:46.919 --> 00:04:48.600
Yeah, it's downloaded a lot.

00:04:48.630 --> 00:04:50.920
I don't know that it's top 25.

00:04:51.300 --> 00:04:51.780
Tebow would go.

00:04:52.000 --> 00:04:53.460
Well, we get a post, right?

00:04:54.650 --> 00:04:55.280
Okay, Tebow, go.

00:04:55.900 --> 00:04:57.700
I think it's in the top 100 for sure.

00:04:57.830 --> 00:05:00.880
So you're close amongst 20,000 or so plus.

00:05:01.980 --> 00:05:03.600
Wait, of Django ones?

00:05:04.180 --> 00:05:05.300
Yeah, of Django ones.

00:05:05.800 --> 00:05:06.480
What is that?

00:05:06.520 --> 00:05:08.020
There's like 4,000 now, Jeff?

00:05:08.480 --> 00:05:27.880
like that i think it's probably like 16 000 20 000 but i think we're tracking like okay four or five thousand it's what people uh i never wanted to add code that just pulled everything in just to have a lot of numbers so it's still like user user submitted and ran so but tiboh github stars

00:05:28.100 --> 00:05:31.740
that's the most important thing how many is it for wagtail it is the most important thing

00:05:33.660 --> 00:05:48.940
uh no it isn't but yeah i think we just like almost at 20 000. i'm pretty sure if you're on here listening to this show stars right now will be at 20 000 in like a week yeah it's really high in downloads as well but you know the django ecosystem is really big these days and cms only

00:05:49.060 --> 00:06:06.540
definitely in a smaller portion of it oh there you go yeah very very very popular that's amazing so let's start let's start at the beginning folks i have on the screen here a picture of of the University of Kansas, where I also have a connection to.

00:06:06.640 --> 00:06:11.140
I actually went here and got my undergraduate degree in math at this school.

00:06:11.220 --> 00:06:12.780
And I love my time in Lawrence.

00:06:12.900 --> 00:06:20.900
I think it's a lovely town, but it's also the home of Lawrence Journal World, right?

00:06:21.900 --> 00:06:24.160
Tell us who wants to start the story.

00:06:24.300 --> 00:06:26.560
Like what's the origin story here?

00:06:27.580 --> 00:06:29.440
- Probably makes sense for me to start it.

00:06:29.640 --> 00:06:30.480
- Yeah, I think so.

00:06:30.740 --> 00:06:31.040
Let's do it.

00:06:32.180 --> 00:06:39.200
Back in 2002/2003, early 2003, I joined that newspaper as a web developer.

00:06:40.870 --> 00:06:46.600
The guy who ran it was this guy called Rob Curley, who was seen as this big tech innovator in the news industry.

00:06:46.780 --> 00:06:58.200
He recruited me and put together a great team of awesome web developers, believe it or not, in this tiny little newspaper in the middle of Kansas.

00:06:59.300 --> 00:07:07.180
We were tasked with building interactive database-driven apps for the newspaper, which at that time was unheard of.

00:07:07.290 --> 00:07:11.060
Even these days, it's kind of weird for a newspaper to have developers on its staff.

00:07:13.500 --> 00:07:14.960
And at the time, I was using PHP.

00:07:16.000 --> 00:07:24.660
And, yeah, fast forward maybe a year into the job, we had an opening to hire another developer.

00:07:25.520 --> 00:07:27.700
And I posted a job entry on my blog.

00:07:28.880 --> 00:07:31.540
And Simon read it all the way in the UK.

00:07:32.820 --> 00:07:37.040
And we followed each other's blogs back when that was like the social media of the day.

00:07:37.340 --> 00:07:37.920
To be fair.

00:07:38.030 --> 00:07:40.160
Much more interesting than social media of today.

00:07:40.740 --> 00:07:45.100
At the time, I felt like there were about 100 people blogging about web development.

00:07:45.350 --> 00:07:46.160
And we were two of those.

00:07:46.400 --> 00:07:46.560
Yeah.

00:07:46.670 --> 00:07:48.520
And we all followed everyone.

00:07:49.420 --> 00:07:50.720
Did you guys have a blog role?

00:07:51.360 --> 00:07:52.380
Oh, yeah, absolutely.

00:07:52.780 --> 00:07:53.380
Blog role.

00:07:53.510 --> 00:07:53.640
Yeah.

00:07:53.960 --> 00:07:56.520
But I think we were both massive fans of Mark Pilgrim.

00:07:56.720 --> 00:08:00.600
Mark Pilgrim was the web development of Python blogger

00:08:00.600 --> 00:08:02.240
that we were paying attention to.

00:08:03.480 --> 00:08:04.760
Unfortunately, he's not around anyway.

00:08:04.980 --> 00:08:07.960
I mean, he's alive, but he stopped blogging many, many years ago.

00:08:08.900 --> 00:08:15.460
Yeah, he wrote an online book called Dive into Python, and we both read that and were like, oh, what's this Python thing?

00:08:16.559 --> 00:08:23.980
And thanks to the kindness or possibly ignorance of our boss, We just started using Python one day.

00:08:24.740 --> 00:08:26.660
We didn't really have to get much buy-in or anything.

00:08:28.280 --> 00:08:34.520
And we'd started making little bits and pieces in Python, never really with the intent of making a framework.

00:08:34.860 --> 00:08:42.659
But over time, we just, at some point, we just like decided, okay, we're switching to Python, no more PHP.

00:08:42.770 --> 00:08:44.280
We're just going to do everything in this new thing.

00:08:45.280 --> 00:08:49.619
And I remember the key thing for us is how do you deploy Python?

00:08:50.040 --> 00:08:52.240
Well, there was modpython, the Apache module.

00:08:52.660 --> 00:08:56.020
And we were just a little bit nervous about it because not many other people were using it.

00:08:56.050 --> 00:08:59.060
And so we're thinking, OK, well, we can try modpython, but what if it doesn't work?

00:08:59.210 --> 00:09:07.180
So OK, well, if we have an abstraction layer between our code and modpython, like a request and a response object, then if modpython doesn't work out, we can swap it out for something else.

00:09:07.320 --> 00:09:07.840
We didn't.

00:09:07.880 --> 00:09:08.820
Modpython worked great.

00:09:09.450 --> 00:09:16.680
But that abstraction layer, I think that was the origins of Django, was that tiny layer between our code and modpython, just in case.

00:09:17.040 --> 00:09:19.280
Classic thing you shouldn't do in programming, right?

00:09:19.560 --> 00:09:20.280
You're not going to need it.

00:09:20.300 --> 00:09:23.120
You don't need the abstraction layer, but we built one anyway.

00:09:23.899 --> 00:09:27.400
And fast forward 20 years, and maybe that was a good idea after all.

00:09:28.760 --> 00:09:29.900
Is ModPython still around?

00:09:30.400 --> 00:09:31.140
It's got to be, right?

00:09:31.980 --> 00:09:32.540
I don't know.

00:09:32.680 --> 00:09:35.760
I mean, ModWhiskey, it was replaced by ModWhiskey many years ago.

00:09:37.100 --> 00:09:38.420
But, yeah, I don't know, actually.

00:09:38.580 --> 00:09:41.240
I've not checked in on the ModPython project in a while.

00:09:44.040 --> 00:09:48.380
It's been last commit eight months ago to ModPython on GitHub.

00:09:48.940 --> 00:09:49.340
Yeah, yeah.

00:09:49.440 --> 00:09:50.780
That sounds alive.

00:09:51.240 --> 00:09:52.340
Yeah, yeah, it's definitely alive.

00:09:52.660 --> 00:09:55.340
And now we have WSGI and ASGI.

00:09:56.480 --> 00:09:58.560
That's sort of carrying on the same theme in a way.

00:09:59.080 --> 00:10:15.100
You know, WSGI kind of came out of the work we were doing in that we were working on Django, the general world, and there was a mailing list popped up, the Python Web SIG mailing list, to discuss how this stuff should work.

00:10:16.060 --> 00:10:20.260
And we were -- sorry about that.

00:10:20.850 --> 00:10:22.240
Yeah, this mailing list popped up.

00:10:22.990 --> 00:10:27.180
And we were very active on that initially, trying to pitch our request and response objects.

00:10:27.520 --> 00:10:31.240
We did not win with our response and request objects, and Whiskey came out of that instead.

00:10:31.390 --> 00:10:38.420
But yeah, that was definitely, Whiskey came out of that early era of what we were trying to achieve with the stuff we were doing.

00:10:40.560 --> 00:10:51.440
So we built up this series of libraries slash tools slash I guess it turned into a framework and we started thinking, oh, this is kind of interesting.

00:10:52.540 --> 00:11:13.860
Personally speaking for myself, I was like, oh, I'm probably not going to work you forever, but I would love to keep using this. So that's sort of started planting the seed about open sourcing it. But I think very few people today know that even 20 years ago, there was this meme that there are way too many Python web frameworks. So we went to PyCon US and it had to have been 2004.

00:11:15.660 --> 00:11:24.140
And there was a keynote where the speaker said she showed a slide that was like a tag cloud of all the Python web framework names.

00:11:24.690 --> 00:11:25.880
And there were like 50 of them.

00:11:27.640 --> 00:11:30.500
So Simon and I were sitting there like, oh, shoot.

00:11:30.720 --> 00:11:32.260
Like we may get another one.

00:11:32.360 --> 00:11:32.880
We're fools.

00:11:33.030 --> 00:11:33.740
We're so stupid.

00:11:34.000 --> 00:11:34.400
We're embarrassed.

00:11:35.500 --> 00:11:41.620
But I ended up doing a lightning talk at that Python and showed the, you know, what we had.

00:11:41.620 --> 00:11:43.220
It didn't have a name yet.

00:11:44.240 --> 00:11:47.860
And, you know, people came up to me afterward and said, oh, please open source.

00:11:48.340 --> 00:11:49.380
We're very interested in this.

00:11:49.400 --> 00:11:53.180
It looks very promising, open source, even though it's yet another Python web framework.

00:11:53.440 --> 00:12:00.000
So I guess extrapolating a lesson from that, it's never too late to make stuff.

00:12:00.380 --> 00:12:04.660
I think another fact there is that Ruby on Rails had come out maybe six months before that PyCon.

00:12:04.780 --> 00:12:09.800
Like Ruby on Rails was the absolute buzz of everything in the web development industry at the time.

00:12:10.320 --> 00:12:14.000
And there was like an open question, like what's Python's answer to Ruby on Rails?

00:12:14.320 --> 00:12:18.260
And so it's possible that the Django timing was really good on that front.

00:12:18.420 --> 00:12:22.120
I believe that Rails helped influence the newspaper to open source Django.

00:12:22.280 --> 00:12:23.840
Was that part of the conversation then?

00:12:24.780 --> 00:12:31.520
Well, I remember making a list of 10 to 20 reasons why we should open source it.

00:12:32.340 --> 00:12:36.300
And really thinking hard about it, probably lost some sleep about it.

00:12:36.600 --> 00:12:41.720
And we went into the meeting with Rob to make our pitch.

00:12:41.940 --> 00:12:46.320
and we only got to like five reasons and finally he was like, yeah, let's do it.

00:12:46.400 --> 00:12:46.740
Let's do it.

00:12:47.580 --> 00:12:47.660
Wow.

00:12:47.760 --> 00:12:51.160
So I mean, endless, infinite credit to him for being cool.

00:12:52.060 --> 00:13:06.020
And I mean, the company took advantage of open source a lot and I think the higher-ups knew it because it also owned a cable company that did a lot of stuff with Linux and all sorts of crazy cable company software that was open source.

00:13:06.760 --> 00:13:08.000
Which was Frank, right?

00:13:08.160 --> 00:13:10.160
That was Frank Wiles at the cable company

00:13:10.500 --> 00:13:11.660
driving all of that stuff.

00:13:13.940 --> 00:13:27.540
yeah you know i think it's worth pointing out as well one adrian you're making me nostalgic just to think about tag clouds okay they were such a thing back in the early 2000s such it's a usability

00:13:27.980 --> 00:13:34.420
nightmare i know any kind of data information out of that thing it really is but i think i use um

00:13:35.200 --> 00:13:42.060
oh my god delicious a lot and you'll get tag clouds out of it and all sorts of stuff But that's not why I'm bringing this up.

00:13:42.220 --> 00:13:49.720
More in that time frame, open sourcing something was not the clear choice it is today.

00:13:49.980 --> 00:13:52.620
At least it was really more of a push, I think.

00:13:54.200 --> 00:13:56.420
Legal liabilities, giving away our IP.

00:13:56.710 --> 00:13:57.620
Like it was a different time.

00:13:57.760 --> 00:13:59.940
There was open source, but not like today.

00:14:01.300 --> 00:14:07.720
Well, also the publisher of the newspaper at the time still used a mechanical typewriter to write up his things.

00:14:07.940 --> 00:14:09.140
He was legendary for it.

00:14:09.200 --> 00:14:31.380
but my understanding is that he got into it the argument that was convincing to the newspaper was we benefit from this community, we should give back to this community and that evidently was part of the pitch but yeah and then I mean it just took off right, I feel like that newspaper did very well from that one decision that they made back then

00:14:32.380 --> 00:14:56.980
yeah I mean here we are this many years later talking about it on a podcast right, like already a lot of people know about it and a lot of people all of you on the call but many many many others have contributed back to django to make so much better if that was just an internal cms that you guys left there how many external contributors would you have right not that many

00:14:58.920 --> 00:15:14.620
well one thing actually i'm curious while the two of you are here i heard a story that there were some efforts to monetize it that didn't pan out jeff maybe you were there for that is that is Were there some efforts to package it up and sell it to newspapers in some capacity as a premium product?

00:15:18.000 --> 00:15:18.520
I think.

00:15:18.690 --> 00:15:19.400
Am I making that up?

00:15:20.580 --> 00:15:21.800
That was after my time.

00:15:22.410 --> 00:15:22.600
I think.

00:15:23.050 --> 00:15:23.800
Are you talking about...

00:15:23.940 --> 00:15:24.920
Maybe Frank mentioned that.

00:15:24.960 --> 00:15:26.860
I thought there was something around...

00:15:26.960 --> 00:15:27.960
This was Ellington.

00:15:28.440 --> 00:15:29.040
I think we should...

00:15:29.040 --> 00:15:29.420
Oh, I guess, yeah.

00:15:29.720 --> 00:15:29.780
Sorry.

00:15:30.980 --> 00:15:33.140
This is kind of my era, I guess, then.

00:15:34.040 --> 00:15:36.339
I still feel like I'm new to Django because I felt like...

00:15:36.360 --> 00:15:41.500
I've been around for 18 years, but I saw these guys code so much, and then I came into that era.

00:15:41.720 --> 00:15:44.540
So to me, it felt like next-gen Star Trek versus the originals.

00:15:45.500 --> 00:15:54.760
And so, yeah, when I started, we had hundreds of newspapers were buying Ellington, which was basically like, what was it, the first or second Django app ever written?

00:15:55.360 --> 00:15:57.880
And they basically created a CMS to run your newspaper.

00:15:58.350 --> 00:16:03.040
And then they also had something called Marketplace, which was almost like an online Craigslist or business directory.

00:16:03.840 --> 00:16:09.600
And so I came in to kind of help manage some of the inventory and do a lot of data imports and stuff for newspapers.

00:16:09.880 --> 00:16:12.040
Like we had all of Massachusetts at one point.

00:16:13.140 --> 00:16:14.180
There was a lot of kind of that.

00:16:14.300 --> 00:16:15.780
They went that direction with it.

00:16:16.300 --> 00:16:19.040
And I left before that kind of had shuttered.

00:16:19.080 --> 00:16:22.160
And I think they sold it to a big company to buy it.

00:16:22.220 --> 00:16:24.200
And I think Ellington still runs to this day.

00:16:25.400 --> 00:16:29.940
At DjangoCon every two or three years, somebody will approach and say, we want to open source Ellington.

00:16:30.120 --> 00:16:30.760
Would you like that?

00:16:31.100 --> 00:16:32.100
Could we do this at DjangoCon?

00:16:32.240 --> 00:16:49.540
we always say, yeah, that would be really cool. And then six years has gone by and it happens every so often. I hope that code gets to see the light of day because it was hundreds of apps by the time we worked on it for hundreds of newspapers. I feel like that one, the product was

00:16:49.580 --> 00:17:11.020
fantastic and the market was great but it's a terrible market to be selling into. Like in the late 2000s, early 2010s, if you're selling to local newspapers which are blinking out of existence to the rate of knots. My hunch is that the marketplace challenges were down to that. It was selling into a shrinking industry, which is a difficult thing to do.

00:17:11.880 --> 00:17:28.260
Yeah, I think they were hitting a brick wall for sure. You mentioned Rails earlier and PHP, and two things come to mind. I have an embarrassing email I sent to Simon at one point because I followed your PHP blog and also Matt Croydon, who later became my boss at Media for Media, And I did not.

00:17:28.339 --> 00:17:29.340
I saw a couple of things.

00:17:29.540 --> 00:17:32.420
I think you were so into Django, you weren't really posting about Django.

00:17:32.820 --> 00:17:36.060
And so I think I emailed you once to say, have you seen this thing called Django?

00:17:36.440 --> 00:17:37.360
It looks pretty cool.

00:17:37.580 --> 00:17:39.440
Now that you're doing Python, I think you may like it.

00:17:40.020 --> 00:17:43.200
And so if you ever check your Gmail, it may be there.

00:17:43.380 --> 00:17:44.760
We don't have to do anything live on the air.

00:17:44.980 --> 00:17:46.460
But yeah, I did this day.

00:17:46.720 --> 00:17:49.100
I think, oh, man, that was kind of wild.

00:17:50.040 --> 00:17:55.260
What brought me to Django, though, was I did get the Rails book because they very quickly created a Ruby on Rails book.

00:17:55.380 --> 00:17:59.760
It was kind of the main way to learn how to use it because their website kind of sucked as far as documentation went.

00:18:00.240 --> 00:18:05.200
And as I was going through it, so much was boilerplate just to get anything running in Rails.

00:18:05.780 --> 00:18:14.000
And so the Django admin was just so beautifully designed and well done that to me it was just this win of like this looks better than anything I could do by hand.

00:18:14.460 --> 00:18:16.820
And it's largely stood the test of time for 20 years.

00:18:17.800 --> 00:18:22.420
I remember like Wilson Minor I had met a couple of times had done some of that work or most of that work.

00:18:22.880 --> 00:18:26.960
He did all of that design work and he designed the original Django website.

00:18:27.180 --> 00:18:38.200
And I think that's one of the main reasons that we got a lot of traction was because the design of the site and the documentation were so good, especially considering the context.

00:18:38.260 --> 00:18:48.780
I mean, back in those times, it was par for the course for an open source project to be completely unstyled, like a normal browser default H1.

00:18:49.400 --> 00:18:49.860
Craigslist.

00:18:49.940 --> 00:18:50.500
White background.

00:18:52.000 --> 00:18:53.960
Now, this design isn't the one that Wilson did.

00:18:54.510 --> 00:18:55.280
The one that's...

00:18:55.280 --> 00:18:57.440
Yeah, you'd have to archive.org to go back.

00:18:57.760 --> 00:19:00.080
But it was pretty timeless at the time, though.

00:19:00.080 --> 00:19:00.580
It was amazing.

00:19:01.050 --> 00:19:05.520
And I feel like the admin has evolved a lot, but it still has that sort of...

00:19:05.520 --> 00:19:08.840
It feels like the Wilson-minded design today, even 20 years later.

00:19:11.880 --> 00:19:12.860
Yeah, Wilson went...

00:19:13.260 --> 00:19:15.420
Wilson was there the same time I was at the Journal World.

00:19:15.470 --> 00:19:18.860
And he then went on to early Facebook, he was.

00:19:19.040 --> 00:19:20.360
He's bounced around Silicon Valley.

00:19:21.300 --> 00:19:23.240
Yeah, he designed Apple.com, I think, too.

00:19:23.720 --> 00:19:26.420
Back when he worked with me at every block for a few years.

00:19:27.180 --> 00:19:28.480
He's now working on Apple Music.

00:19:29.740 --> 00:19:30.840
I didn't know that. Excellent.

00:19:31.720 --> 00:19:36.040
As of last time I talked to him, which was recent ish.

00:19:37.540 --> 00:19:38.160
Yeah, that's quite neat.

00:19:41.640 --> 00:19:43.120
Trying to pull it up here in the Wayback Machine.

00:19:43.300 --> 00:19:43.600
We'll see.

00:19:44.960 --> 00:19:45.820
See what I can get.

00:19:45.880 --> 00:19:46.640
I think the other thing.

00:19:47.140 --> 00:19:48.460
How about this, guys? Is this the OG?

00:19:48.600 --> 00:19:48.980
There we go.

00:19:49.300 --> 00:19:55.120
Yep, yep. That's the one. That, to be fair, that looks good by today's standard.

00:19:55.640 --> 00:20:01.940
You know, I feel like I would not be at all upset to publish a website look like that in 2025.

00:20:03.940 --> 00:20:05.300
Yeah, that is pretty timeless. That's cool.

00:20:06.080 --> 00:20:07.940
Wait, I see the... Oh, go ahead, Simon.

00:20:08.520 --> 00:20:13.660
The other thing that's worth mentioning with Django, Django's documentation has always been fantastic.

00:20:14.540 --> 00:20:20.660
And I think that's basically because it was Jacob Kaplan Moss had a, he was a literature major.

00:20:21.180 --> 00:20:22.740
And you have Adrian, who's a journalism major.

00:20:22.740 --> 00:20:29.120
And it turns out if you put a journalist and somebody who put that talent on your documentation, you get really good documentation.

00:20:31.700 --> 00:20:37.840
That was a double-edged sword because it took a few years for any publisher to be interested in publishing a book about Django.

00:20:38.680 --> 00:20:42.360
Because the standard line was always, oh, the docs are good enough.

00:20:42.460 --> 00:20:47.980
everyone just there's no market for a book well but at the same time i wanted to ask i mean because

00:20:48.180 --> 00:20:59.960
there was the link there to the django book which i have the url now and jeff and i run it lists all the django books but i mean the two of you wrote that i thought that was a great book i think you

00:21:00.540 --> 00:21:07.320
it was in print right but it's mainly open source adrian yeah it was both it was free online and it was published by A Press.

00:21:07.740 --> 00:21:09.140
There were a couple editions, yeah.

00:21:11.760 --> 00:21:19.480
The interesting question for Paul Everett out there in the audience is, in the first years, did your team also have to admin the newspaper site?

00:21:19.500 --> 00:21:21.880
Like, did you DevOps before DevOps was a thing?

00:21:22.620 --> 00:21:23.460
Or how did you run it?

00:21:23.540 --> 00:21:25.300
The cloud stuff wasn't that big back then.

00:21:25.800 --> 00:21:27.200
No, we had our own physical servers.

00:21:28.060 --> 00:21:28.700
In the basement.

00:21:29.240 --> 00:21:29.820
In the basement.

00:21:30.540 --> 00:21:31.480
The team was in the basement.

00:21:31.480 --> 00:21:32.580
You could probably hear them.

00:21:32.660 --> 00:21:41.900
programmers and yeah there was a there was a room in the basement with with physical servers and oh i've forgotten their names now i think frank frank helped well they were named after characters

00:21:42.100 --> 00:21:49.680
and beatle songs one was mr mustard one was pam from polytheon pam yes um yep but yeah and and

00:21:50.000 --> 00:22:06.640
frank and nick from from sunflower cable helped us wire those up but yeah we it was it was a fit there was a there was a max there was an apple server in there as well that was the media server I think it was doing like imagery sizing. Yeah, it was like a 2U box or something. I forget. It

00:22:06.680 --> 00:22:09.200
was actually like a physical server that mounted. I'd never seen one before.

00:22:10.980 --> 00:22:17.680
XServe. It was an XServe. Yeah. Also, I remember that room had a wire that was the AP News wire.

00:22:18.340 --> 00:22:23.440
Like that I didn't realize there was a physical wire that the news came in on from the Associated

00:22:23.580 --> 00:22:27.500
Press. And that when you hear it came in over the wire, that was the wire? That was the wire.

00:22:27.780 --> 00:22:33.460
we have the actual wire in our basement yeah incredible well simon and i were lucky because

00:22:33.540 --> 00:22:57.800
we didn't really have any sys admin experience but there were some really experienced guys frank and nick who worked at the company and uh actually like did some uh like training with us i remember to go going into their dark room all the lights were like turned off you could only see like these unix shells i was like whoa i'm really learning the good stuff and this is the

00:22:57.880 --> 00:23:08.620
same frank this is frank wiles who he's been president of the django software foundation in the past and he's still very heavily involved with django to this day yeah all right let's talk about

00:23:08.840 --> 00:23:47.439
2008 a lot of stuff happened around 2008 that was the time frame a little bit before then django's open source but maybe you all have to tell me maybe a little bit inspired by ruby on rails like there's a lot of in ruby on rails a lot of convention over configuration a lot of magic and django used to have a little more implicit magic and there was the when django went to around when went to 1.0 there's the magic removal and it was the first django con all those things tell us about that whoever wants to take it i can talk to django con a little bit the very first

00:23:47.460 --> 00:24:24.240
DjangoCon. So I was working for GCAP Media, a radio station in London that was doing a big Django project and one of my co-workers there was this chap, Rob Lofthouse, who very foolishly stepped up and said, well okay, I mean everyone says there should be a conference and no one's arranging a conference. I'll arrange a conference, how hard can it be? The answer is everyone in the school understands it. Very, very, very hard and he managed to pull it off and the big thing there was Google offered to host it. So we got the venue and the catering and everything was in Google's campus in Mountain View. Was 2008, was that the year of the first DjangoCon? I think it was, right?

00:24:24.440 --> 00:24:29.400
I think it was. And yeah, we pulled together a conference.

00:24:31.680 --> 00:25:01.160
And the videos from that conference were all available on YouTube, actually. I rewatched one of the panels quite recently just out of interest. And it was really fascinating seeing There are people on those panels. Russell was on the database migrations panel. He was one of the people trying to solve database migrations back then. He's been an enormous fixture in the Python and Django community ever since. That was really fun. How many of us were there? Jeff, were you at

00:25:01.310 --> 00:25:18.600
the first Django conference? I was. I was barely working at the journal world like maybe six months or a year or something so yeah i just just kind of experienced it all as a nobody so it's great and i think my biggest contribution to that conference was

00:25:19.020 --> 00:25:45.740
so i was working on a migration system called demigrations and andrew godwin was working on i think he was calling it south back then um the like his migration and we had russell keith and i got i managed to i made the pitch for andrew who was just a student at university at the time to be flown to California to present at this conference. I think it may have been his first ever conference talk. And he has been to and spoken at every Django and Python conference since.

00:25:45.920 --> 00:25:51.300
So I like to think I helped just provide that little spark to get his speaking career started.

00:25:52.740 --> 00:25:56.960
But yeah, that was a very, very notable moment, that first DjangoCon.

00:25:58.140 --> 00:25:59.820
I had a mind-blowing moment there.

00:26:01.760 --> 00:26:06.380
A guy from, I think it was Japan, came up to me.

00:26:06.500 --> 00:26:12.660
He didn't speak a word of English, and he gave me his book that he had written about Django.

00:26:13.160 --> 00:26:13.640
Whoa.

00:26:14.080 --> 00:26:18.200
And he just bowed and went away.

00:26:18.440 --> 00:26:22.340
And I still think about that, and it still kind of brings a tear to me.

00:26:22.680 --> 00:26:23.320
It's like, what?

00:26:23.980 --> 00:26:29.940
It's mind-blowing that people all around the world that you've never met who speak languages you don't speak use your code.

00:26:31.580 --> 00:26:32.740
It's been 20 years.

00:26:32.750 --> 00:26:37.280
I still can't even 100% come to terms with it.

00:26:37.720 --> 00:26:38.620
It's really cool.

00:26:40.500 --> 00:26:41.980
See, I thought you were going to go a different direction.

00:26:42.420 --> 00:26:47.960
And you were going to say when Cal Henderson put that sign up of the unicorn, that was going to forever be the moment.

00:26:48.720 --> 00:26:50.620
I don't know if you want to expand on that.

00:26:50.620 --> 00:26:52.740
Well, that's the downside of that first DjangoCon.

00:26:53.200 --> 00:27:23.160
there was a q a with me and jacob and i think it was me i said are there any pony requests and that was intended to mean are there any future ideas sort of open suggestions and evidently that was the um the impetus for the idea of the django pony which i despise i think it's so dumb and i

00:27:23.180 --> 00:27:23.580
Oh, no.

00:27:23.880 --> 00:27:27.680
I know it's funny in a way, but it's also infuriating to me.

00:27:27.690 --> 00:27:30.020
I think it's so stupid and unprofessional.

00:27:30.230 --> 00:27:32.700
And the type of humor is just dumb.

00:27:33.580 --> 00:27:34.540
No wit at all.

00:27:34.720 --> 00:27:35.660
I'll stop my rant.

00:27:35.880 --> 00:27:36.580
That'll be on my own.

00:27:36.620 --> 00:27:40.460
Whenever I start my own podcast, I'm going to have the first episode on why the Django pony sucks.

00:27:41.240 --> 00:27:42.320
Wait, what should it be, though?

00:27:42.530 --> 00:27:43.440
What would you like it to be?

00:27:43.610 --> 00:27:44.280
Do you have thoughts?

00:27:45.700 --> 00:27:46.520
Nothing is needed.

00:27:49.480 --> 00:27:50.520
I think you underestimated.

00:27:51.200 --> 00:27:52.620
It should at least be playing a guitar.

00:27:53.400 --> 00:27:56.140
Yeah, I was going to say a guitar or a musical instrument or something.

00:27:56.710 --> 00:28:01.860
Yeah, people love the little stickers celebrating this or that event and occasion.

00:28:03.580 --> 00:28:04.620
Qualified people.

00:28:05.730 --> 00:28:08.080
Well, Thibaut, I have one of your stickers on my fridge.

00:28:09.320 --> 00:28:09.460
Yes.

00:28:10.360 --> 00:28:19.320
No, no, but yeah, that's one of the things I did for the 20th birthday is design a new pony to distribute to people around the world.

00:28:19.630 --> 00:28:21.620
You might have seen one at the Amsterdam event.

00:28:23.240 --> 00:28:26.480
A bag of the stickers was passed to me and I passed it along.

00:28:28.400 --> 00:28:29.060
To the trash can.

00:28:29.500 --> 00:28:29.980
No, just kidding.

00:28:30.920 --> 00:28:41.480
Another notable thing that happened in 2008, other than the housing crisis crash that wrecked a bunch of things, was the foundation, right?

00:28:42.600 --> 00:28:43.540
The Django Software Foundation.

00:28:45.900 --> 00:28:48.840
And I think more broadly, I think one of the things that makes...

00:28:48.840 --> 00:28:58.080
I talk to a lot of different people about different web frameworks And the thing that really makes Django stick and stand out, I think, is one, the admin thing.

00:28:58.220 --> 00:29:00.580
But the other is the community around Django.

00:29:00.980 --> 00:29:02.980
And we're talking about the Django conference, the foundation.

00:29:03.300 --> 00:29:06.080
It's just unlike other things.

00:29:07.140 --> 00:29:14.060
There's a whole community that you get into when you go into Django, not just some APIs you use.

00:29:14.060 --> 00:29:14.600
You know what I mean?

00:29:16.100 --> 00:29:20.100
So who wants to tell us about how the foundation got started?

00:29:25.320 --> 00:29:25.340
so

00:29:25.660 --> 00:30:02.760
i was there uh so the there was the question of who owns the code um it was i think technically owned by the lawrence journal world correct me if i'm wrong um and so that wasn't going to last forever so we needed to find for legal you know ownership reasons an entity to own it. We didn't want to go the route of Ruby on Rails. Copyright, David Hennemeyer Hanson. I think that's just really cringe. So it's good to have an organization as part of it. So yeah, we set up 501c3 if that's the right one that we use. I forget.

00:30:04.620 --> 00:30:11.340
And yeah, that's basically the origin story. From my perspective, I'm sure there's a lot more subtlety to it.

00:30:18.080 --> 00:30:18.220
Nice.

00:30:18.440 --> 00:30:19.500
Thibode, do you want to weigh in?

00:30:19.620 --> 00:30:20.540
You have-- Yeah, go ahead, Thibode.

00:30:20.580 --> 00:30:21.780
You're the president, and you have--

00:30:21.860 --> 00:30:22.320
Oh, gosh.

00:30:23.920 --> 00:30:26.200
I was only barely started at that time.

00:30:26.440 --> 00:30:29.660
So I definitely relate to the community around Django.

00:30:30.320 --> 00:30:33.000
You were all telling why you got involved and when and how.

00:30:33.110 --> 00:30:35.960
And for me, it was Whacktail as a day job.

00:30:36.480 --> 00:30:51.800
But then what got me to stick around actually Django girls and organizing some of those local workshops. And you know, having organizations like this, like alongside the Django projects, not even the main thing is definitely only possible because we've had such a like long running open source foundation.

00:30:53.020 --> 00:31:02.580
There's lots of aspects of the foundation we could discuss. But definitely, you know, that kind of longevity for community run open source is a is rare and to be cherished.

00:31:03.460 --> 00:31:17.320
yeah maybe you could tell us a little bit like what was it when it started and what is it now like how has it changed over the time over the over the years i'm going to put in a plug for

00:31:17.420 --> 00:31:37.280
the django fellows program i feel like the django fellows program has been an absolutely astonishingly effective part of the mission of the foundation for people who aren't familiar with that um The Django Software Foundation employs fellows who are paid contributors who work on the bits of open source maintenance that aren't necessarily so glamorous.

00:31:37.440 --> 00:31:43.940
They do bug issue. They do code review and security, handle security incidents and bug triage and all of these different things.

00:31:44.360 --> 00:31:49.100
And thanks to them, Django releases on a has a release schedule that operates like clockwork.

00:31:49.460 --> 00:31:52.780
Like Django, there's a new release that comes out when they said it was going to come out.

00:31:53.200 --> 00:31:56.180
Code gets reviewed. Bugs get triaged. It's a wonderful, wonderful thing.

00:31:56.640 --> 00:32:01.120
And it's unique because most open source projects that are run like that have a company behind them.

00:32:01.240 --> 00:32:04.860
You know, there are people who have a full time job and there's a company that's commercially supporting that.

00:32:05.180 --> 00:32:08.600
Django does not have a sort of commercial sponsor in that respect.

00:32:08.860 --> 00:32:16.240
It has this nonprofit that people fund and that employs these fellows and the fellows keep everything ticking long.

00:32:16.660 --> 00:32:24.960
I have I keep on saying to other open source projects, if you can figure out a pattern to use that's similar to the Django fellows, that's absolutely worth doing.

00:32:25.040 --> 00:33:10.480
The Python software foundation has a developer in residence program now, or several developers in residence, which were inspired by the Django Fellows program. I think it's been really influential. It's notable because there are very few major open source projects that don't have a company behind them. The other one that comes up a lot is Postgres. Postgres is very much a community funded, a community organized program. If you look at the way Postgres works, a lot of the key maintainers have their own consultancies. So they've got a good sort of way of financially sustaining the work they're doing i mean i think the django fellows program which was introduced um when was that that was at least 10 years ago the fellows program started i think it's been an enormous success yeah absolutely you know another thing that i think is really

00:33:10.700 --> 00:33:35.700
interesting um it's a little bit newer but is the django knots program right and django girls as well shout out to them you know so many people i've talked to like i got into python because i wanted to do django which for you all is probably a little bit mind-blowing as well like they didn't use django because they were python but the other way around the first time i met somebody said oh

00:33:35.780 --> 00:33:56.380
yeah i got into python because of django and i was absolutely bowled away i i always assumed you'd have to be a proficient python program before you could start picking up something like django it turns out it's the other way around people would would get in from because partly because the django documentation was so good. But so many people got their start in the Python community as web developers who dabbled with Django and then got into Python from there.

00:33:57.160 --> 00:34:01.020
Yeah. Kenneth, I love it in the audience. I learned Python through Django. Very cool.

00:34:01.260 --> 00:34:05.580
When I chaired DjangoCon US, I'd always ask the audience. For one, I was always a nervous speaker.

00:34:05.960 --> 00:34:41.359
So any time you ask the audience to do something, it takes my nerves away. But I'd always ask who learned Python by learning Django. And over half the room every year would always raise their hands up so it was a heck of a gateway to learn python um also uh we just hired our third fellow jacob walls last week who i think starts this next monday so jane goes up to three fellows now um and it's just been the load is just incredible so trying to keep up um i think our existing fellows have over a thousand tickets that they're trying to sort through and you know if people are watching and want to help fund uh contact tibo and i and we will uh definitely

00:34:41.379 --> 00:34:47.899
help you give money to the dsf to support more fellows yeah and it makes such a difference yeah

00:34:48.800 --> 00:34:53.340
we'll give you our annual reports which details everything the foundation does and more on the

00:34:53.340 --> 00:35:24.600
other side well i just want to make one point on that because i mean t-bone and jeff you know now but the finances for a long time like when i was treasurer in 2000 or 2020 for three years the total budget was under 200,000. And that was almost all fellows. So like the total budget for everything, including grants, legal stuff, hosting, I think now maybe it's 250, 300. But it's, you know, to your point, Simon, it's not funded by a corporation. It's, it's tiny.

00:35:26.760 --> 00:35:30.240
And people don't realize that aside from the fellows, everything else is volunteers, right?

00:35:30.480 --> 00:35:39.500
Even the conferences, it's not, you know, PyCon, US, EuroPython, have a lot of volunteers, but they also have paid employees like Django cons are all volunteers.

00:35:41.080 --> 00:36:00.640
Yeah, they're all volunteer based. The PSF runs a staff of about, I used to be on the PSF board, Simon's on the board. So he can speak to this. Last time I saw, they probably have about what, two million in salaries a year because of so many people. You've got like five or six developer in residence, at least probably what, like 12 to 13 people, maybe 14 people on staff. That's about

00:36:00.580 --> 00:36:16.920
Right. Yeah. It's interesting how much the PSF is an accounting organization, because it turns out accounting, especially if you're a nonprofit with like with a whole bunch of organizations who use the PSF as their fiscal sponsor to help them with their nonprofit accounting.

00:36:17.280 --> 00:36:29.800
There's a lot of there's a lot of accounting and logistical works that goes into an organization like the PSF and PyCon U.S. is run by the PSF as well, which is a 2500 person conference these days. That's that gets very complicated.

00:36:30.780 --> 00:36:59.780
Yeah, so the DSF runs on shoestring size budget compared to the PSF. But Jango is a pretty good amount of the community, though. So like, that's kind of one of the things we're doing is like by getting that third fellow. And part of it, too, is like, we've ran not to nerd out on expenses for a while, but the DSF for a long time has ran with over 200,000 in the bank. And to me, that's just not doing much with our money. So I know that we're all, you know, we're also doing investments and stuff as well. But like, I think getting that third fellow was something that was just long overdue for the number of people that we have.

00:37:00.100 --> 00:37:08.700
If one fellow goes on vacation for a while and leave, it's just too much for one person to keep the foundation, keep security releases, releases going.

00:37:09.340 --> 00:37:12.540
So it was kind of long overdue, but I'm happy we were able to pull it off this year.

00:37:13.320 --> 00:37:13.780
That's great.

00:37:14.280 --> 00:37:20.660
My favorite talk at JangoCon last year was Jacob Kaplan Moss gave a keynote about what the DSF would do with a million dollars.

00:37:21.020 --> 00:37:24.640
Like if the DSF could go up to a million dollars a year, what would they spend that money on?

00:37:24.820 --> 00:37:28.020
As also a pitch for why you should be sponsoring the DSF.

00:37:28.280 --> 00:37:33.880
I recommend people watch that if you want to get a feel for how that organization was shaped at least sort of 10 months ago.

00:37:34.820 --> 00:37:47.540
I think there's a huge impact that just having one or two people whose full-time job is to go into the corner, the dark corners of some open source project that's just not that interesting.

00:37:47.780 --> 00:37:48.940
Nobody really wants to go mess with.

00:37:49.680 --> 00:37:58.060
But just start hacking away on those and, you know, really putting the polish on stuff that is not as exciting as other pieces.

00:37:58.280 --> 00:38:05.540
And so there's not, you know, you said it's not that big relative to the PSF, but put the PSF aside.

00:38:05.920 --> 00:38:16.580
Any other open source Python project, it's a really huge pool that you're working with relative to how many other projects even have fellows.

00:38:19.080 --> 00:38:19.880
Not many, if any.

00:38:22.620 --> 00:38:24.140
Yeah, super, super cool.

00:38:24.620 --> 00:38:28.420
So let's talk about some of the more recent things.

00:38:28.720 --> 00:38:49.680
I know that, at least personally, when the Instagram keynote came out a couple years ago at PyCon, or maybe more than a couple, 2017, I think, but around that timeframe, just realizing how big some of the deployments of Django were, how much traffic people were serving through them.

00:38:51.800 --> 00:38:55.960
When it first came out, you probably didn't think on that scale.

00:38:56.940 --> 00:38:59.020
No, Instagram, Pinterest, NASA.

00:38:59.770 --> 00:39:03.200
Yeah, no, that was, the goal was to build newspaper websites, right?

00:39:03.210 --> 00:39:10.480
We wanted to be able to build, to, I loved, Django's original tagline was web development on journalism deadlines.

00:39:10.760 --> 00:39:13.260
That's always been my favorite description of the project.

00:39:15.060 --> 00:39:15.300
Nice.

00:39:17.900 --> 00:39:19.300
Who else wants to chime in on this idea?

00:39:19.430 --> 00:39:21.140
Like, this is, this is just, it blew my mind.

00:39:21.320 --> 00:39:21.820
I'm like, wow, that's a big deal.

00:39:21.820 --> 00:39:27.440
Oh, one thing I will say is Threads, Instagram's Twitter clone, came out what, last year or the year before?

00:39:27.680 --> 00:39:28.360
That's a Django app.

00:39:28.550 --> 00:39:29.540
I met one of the engineers.

00:39:30.140 --> 00:39:35.560
It's just a classic Django app that Facebook launched just a few years ago.

00:39:38.339 --> 00:39:40.400
I mean, I believe technically they have their own fork.

00:39:40.790 --> 00:39:44.840
So it's not, you know, they didn't just download Django 4.0, but-

00:39:44.840 --> 00:39:48.800
I feel like at that scale, if you haven't got your own fork, I'd be very surprised.

00:39:48.800 --> 00:39:50.460
But yeah.

00:39:50.830 --> 00:39:51.140
Yeah, for sure.

00:39:51.160 --> 00:40:43.960
runs on sender maybe who knows well I mean one of the working thing as far as sorry I think I'm a brief like 500 milliseconds behind all of you no no scale is also the number of projects out there I was been doing the counting lately to figure out our impacts and I think we're at around the 500,000 live Django sites and apps out there from the numbers I could find and also like specific types of outreach so like governments for example seeing how many you know like central governments of all the countries around the world basically use it and when i say use it it's not just like the one project like they have teams whose role is just to manage 10 20 50. i think right now brazil of all countries i don't have a connection there had like 84 sites i could detect in the central government using django like just imagine that

00:40:43.980 --> 00:40:45.220
at times all the countries.

00:40:46.960 --> 00:40:52.820
You know, one of the things that's always fun for me to do is to go to the GitHub repo, right?

00:40:52.960 --> 00:40:57.700
And we've got Django with 85,000 stars and 32,000 forks.

00:40:58.000 --> 00:40:58.920
That's a really interesting number.

00:40:59.200 --> 00:41:03.580
Way more forks to stars than an average project, by the way.

00:41:04.100 --> 00:41:15.140
But if you go down the side here, you can see they now track how many contributors and use by 1.997 million projects.

00:41:17.380 --> 00:41:18.080
That is a lot.

00:41:18.460 --> 00:41:22.820
Now, that's just on GitHub, right, that are public repositories that we can know about and stuff.

00:41:23.540 --> 00:41:27.980
And used by could be a student project, not a government entity.

00:41:28.540 --> 00:41:29.780
But still, that's pretty wild.

00:41:33.020 --> 00:41:33.540
Very impressive.

00:41:35.420 --> 00:41:38.400
Let's talk about some of the more recent transitions.

00:41:38.800 --> 00:41:44.180
I mean, I feel like the speed of major version releases is picking up.

00:41:44.660 --> 00:41:47.820
You know, we had the first three years, 2005 to 2008 for one.

00:41:48.360 --> 00:41:52.040
Then it was like one for a while, and then two, and then three, then four, then five.

00:41:52.940 --> 00:41:54.220
You guys are maybe working on six.

00:41:54.250 --> 00:41:54.620
I don't know.

00:41:55.720 --> 00:42:00.260
And also adopting some of the lot of changes coming in Python, right?

00:42:00.360 --> 00:42:02.620
Like async and await and that kind of stuff.

00:42:03.340 --> 00:42:04.160
How has that been?

00:42:08.160 --> 00:42:13.440
I'll get it started. In some ways, it's really tricky because people really love Django as it is.

00:42:14.140 --> 00:42:30.920
And from that standpoint, you have to make sure that such a big group of people agree on what exactly the future of Python means. So, you know, definitely mentioned Async/Await. It's one of the big ones. API, is it in Django Core? Is it not? Mobile web, how much we get involved with that.

00:42:31.480 --> 00:42:52.320
These days, it's like the HTMLX that people really want to see Django support well. And I guess also AI to some extent. I don't know if we want to get there. But I guess for us, I think it's also, if it's not in core, we definitely have so many packages out there that we just try and curate a bit more these days, make sure they work well together. So that also helps a lot.

00:42:53.220 --> 00:43:09.520
Yeah. I think the package curation is really important. I would actually like to see Python in the standard library smaller and then recommend more stuff to keep the flexibility open so they could move faster, focus more. So what I find tricky about this one, like Django, Django has

00:43:09.520 --> 00:43:32.520
a bit always been a batteries included framework. And that's because in 2004, 2005, PyPI and pip didn't really exist. So if you weren't batteries included, then people had to, it was very high friction for people to glue together the pieces that they needed. And of course, today, I feel like Python packaging is incredibly good shape, like you could ship a web framework today that was entirely dependent on other things.

00:43:32.880 --> 00:43:42.640
So then the value from the Django thing comes down more to everything being, that there's a Django promise that the stuff in Django core will continue to work.

00:43:42.960 --> 00:43:52.920
Like we're not going to, you're not going to have a situation where Python 3.15 comes out and Django templates stop working, but the ORM still works because everything is maintained in the one place by that single team.

00:43:53.340 --> 00:43:53.920
And I love that.

00:43:53.940 --> 00:43:59.020
I love that you just know that all of the pieces of Django are going to continue to work together.

00:43:59.360 --> 00:44:35.500
And the moment you add external packages, there's that little bit of risk. Like what if that external package that you're using becomes unmaintained in the future? So I'd quite like to see just a little bit more of a sort of adoption of crucial packages under the Django software foundation, but not as part of Django itself. I want separate packages that maintain that promise to be maintained because we have fellows, which means that we can actually do that kind of work. But it's also a very big to take on. It's an interesting pattern that I'd like to see explored a little bit more, I think.

00:44:37.480 --> 00:44:41.640
Yeah, it's easy to forget that pip and Solved wasn't always there. Sorry, Will, go ahead.

00:44:42.640 --> 00:45:11.280
I was just going to ask Adrian and Simon. I mean, even today, batteries included web frameworks are not that common. It's still the trend, more micro frameworks. I'm curious what your take is on that. I mean, like FastAPI, right? That's a lightweight framework. I'm always shocked there aren't more batteries included frameworks in Pika language. Maybe it's too difficult to do, but micro frameworks seem more common. There's only one batteries included option per programming

00:45:11.440 --> 00:45:38.980
language. I feel like the sales pitch, like you get to pick the best pieces for the components for your project, always sounds great. Obviously, you don't want one thing that dictates what you're going to use for all of the different things. You'd much rather pick and choose the things that are talk about much is the fact that now every single one of those selections is getting you further away from that sort of community standards. There's more risk of future maintenance problems.

00:45:39.280 --> 00:46:12.780
There's more work that you have to do to wire things together. But I feel like the biggest innovation in the open source world in the past 15 years has been packaging. Like every programming language has a PyPI style packaging solution of some sort. You've got cargo and you've got the Ruby gems and all of those kinds of things. And that pattern mostly works really, really well. But I do, I just, I just keep on coming back to that feeling that with Django, I know it's all going to work. And I know it's going to work far into the future. And that, that feels really valuable to me.

00:46:17.980 --> 00:46:18.380
Go ahead, Adrian.

00:46:18.540 --> 00:46:29.400
For my answer, I think I'd have to evaluate it on a case by case basis, but But the way I would evaluate it is to look at the origin of the project.

00:46:29.860 --> 00:46:32.240
Was it extracted from something from the real world?

00:46:32.260 --> 00:46:37.520
Or was it built either as an academic or for fun exercise?

00:46:37.820 --> 00:46:40.760
Or what was the reason for its existence?

00:46:41.720 --> 00:46:46.540
And generally, I trust stuff that was extracted from real production sites more.

00:46:47.020 --> 00:46:48.780
That's just my own preference.

00:46:49.980 --> 00:46:51.900
And it's also sort of to flip it around.

00:46:52.760 --> 00:46:56.920
I never really cared whether someone used Django or not.

00:46:56.940 --> 00:47:02.320
I would evaluate you on your product, not based on like the web framework you use.

00:47:02.320 --> 00:47:04.500
Who cares really what web framework you use?

00:47:05.200 --> 00:47:12.320
And I think that kind of ethos may be seeped into Django at some point unintentionally.

00:47:12.760 --> 00:47:19.960
I mean, I never intentionally sort of made that, had that philosophy communicated, but yeah.

00:47:21.120 --> 00:47:26.680
I always felt like one of the most interesting differences between Rails and Django is that Rails was extracted from Basecamp.

00:47:26.760 --> 00:47:28.680
They built Basecamp and they pulled the framework out of it.

00:47:28.960 --> 00:47:34.800
I feel like Django was kind of reverse extracted from Lawrence.com because we had Lawrence.com.

00:47:34.840 --> 00:47:35.840
It was PHP and MySQL.

00:47:36.060 --> 00:47:41.420
And the goal with Django was always to get it to a point where it was good enough that it could replace the PHP in Lawrence.com.

00:47:41.880 --> 00:47:47.420
So everything that we were building was always like, what would Lawrence.com need in this new thing for us to replace it?

00:47:47.520 --> 00:47:50.820
And the end result was a framework that you could build Lawrence.com in.

00:47:50.920 --> 00:47:52.960
Lawrence.com was the entertainment website for the newspaper.

00:47:53.600 --> 00:47:57.520
It's the best local entertainment website for any city that has ever existed.

00:47:58.300 --> 00:48:00.240
I will very confidently state that.

00:48:00.400 --> 00:48:06.840
I've never lived in a city with a website as good for figuring out what the things to do in a town are.

00:48:07.050 --> 00:48:15.020
And that was Adrian's biggest project, Lawrence Journal World, was always Lawrence.com and evolving Django up to the point where it could power that site.

00:48:16.460 --> 00:48:46.500
it's what got me here like i saw that site living 200 miles away and went to san francisco and kind of looked at y combinator and was like you know this is only 200 miles like they've got something good going here and that side especially um i think to a django's batteries um django i think 20 years ago django there's a lot of things that you had to do the django way and i think there's been so much concerted effort especially the first 12 to 14 years that so much is pluggable that like If you don't like the batteries, I don't know what you're missing.

00:48:46.900 --> 00:48:48.300
Django is still a really good core.

00:48:49.040 --> 00:48:50.440
Don't use the admin if you don't want it.

00:48:51.380 --> 00:49:04.000
I think most of the problems I see, the foundation and the community, I think there's a lot of lore that comes with Django, and it's lore of maybe it's harder to change certain things on the website than it really needs to be or is.

00:49:04.440 --> 00:49:23.040
I think this last year we've definitely pushed back on, if you do a search on the Django docs now and you look for REST, you wouldn't know that Django has the ability to do that into the docs. And so these were just technical challenges of like certain steering council members have written articles and stuff, blog posts saying like, you can do rest with Django.

00:49:23.460 --> 00:50:10.820
There's some good third party packages to do it. In the past, we've kind of been like apprehensive to want to recommend third party packages through docs. I think that's just one of those. It sounds weird when I say it out loud, at least it does to me. And I think once we have these discussions, then we start like realizing that, well, we have a website that everybody comes to. There's very specifically doc sections and there's blog, but there's no search that pulls stuff in together. And so the steering council and different members have been trying to make search work across everything. And then that way you can get hits from rest and you can get hits for third party packages that the steering council recommends just because they're good packages everybody should use. And so I think some of the lore and some of the, hey, these things have been done this certain way. It doesn't mean we want to keep doing them. It's just probably somebody had an afternoon or a night and they made search work a particular way.

00:50:11.170 --> 00:50:12.440
And that was really good for the docs.

00:50:13.260 --> 00:50:15.360
But like sometime look up REST and look up PHP.

00:50:15.580 --> 00:50:18.840
There's actually more hits for PHP on the Django website than there are REST.

00:50:19.240 --> 00:50:22.120
Unless you get into like stinks, you know, restructured text.

00:50:22.820 --> 00:50:35.960
But those are challenges that until we talk about and we realize, and I think like that's the advent of FastAPI kind of taking off, is I think like Django didn't have a great REST story by looking at the docs and looking at information.

00:50:36.680 --> 00:50:41.320
At PyCon US this year, I had dozens of people ask me, how do I use the Django ORM from FastAPI?

00:50:41.400 --> 00:50:42.620
And it's like, why?

00:50:42.820 --> 00:50:43.440
You don't have to.

00:50:43.600 --> 00:50:46.940
Like, Django is async enough that you don't need to do that.

00:50:47.080 --> 00:50:47.540
That's hard.

00:50:47.680 --> 00:50:48.800
And that kind of sucks to do.

00:50:48.940 --> 00:50:50.280
So, like, why?

00:50:51.220 --> 00:50:53.920
And those are things we're focusing and talking about internally, too.

00:50:55.120 --> 00:50:55.520
Yeah.

00:50:56.260 --> 00:51:04.680
You know, talking about search and search across different things, somewhat direct to you, Jeff, but all of you and maybe Simon as well.

00:51:04.840 --> 00:51:08.500
Like, what about just like chat.djangoeproject.com?

00:51:09.500 --> 00:51:15.920
And, you know, do some rag on it and let people have a conversation with Django.

00:51:16.260 --> 00:51:16.640
You know what?

00:51:16.860 --> 00:51:23.660
We don't even need it because Django is stable enough that every chatbot out there knows Django inside out already.

00:51:23.920 --> 00:51:24.440
It does, yeah.

00:51:24.760 --> 00:51:34.120
One of the great benefits of having great documentation and lots of examples for 20 years that is stable is, yeah, you can, GPT-5 will spit out a full Django project and get it all right.

00:51:36.780 --> 00:51:56.040
I completely disagree. I think we need a big sponsor who can come in, whether it's Anthropic or OpenAI or somebody else. We need a big sponsor, a title sponsor even, in fact, that can help give the money for this and donate the chat. Because even though you're right, that it is ingrained, you still have that delay because Django kicks out a new version or two a year.

00:51:56.680 --> 00:51:59.000
And so there's always that lag of nine months or a year.

00:51:59.360 --> 00:52:00.420
And so--

00:52:00.420 --> 00:52:04.560
- Or recommends the most popular version, not the latest version or something like that, right?

00:52:05.360 --> 00:52:06.000
- Exactly, yeah.

00:52:06.220 --> 00:52:10.580
Because I see a lot of demos where they're actually building Django apps using these tools.

00:52:10.740 --> 00:52:14.960
And so we're selling AI by virtue of Django and Django's docs being so good, so.

00:52:15.300 --> 00:52:21.260
- Or occasionally one of these things we'll say that Sound Slice has a feature that doesn't have, and then Adrian has to build the feature.

00:52:21.840 --> 00:52:22.320
- Oh, God.

00:52:23.300 --> 00:52:25.920
Oh, you guys, in the chat, it's coming on here.

00:52:26.060 --> 00:52:33.800
We have Frank Walsh saying, but our chatbot could have a cool personality and Kenneth loves to answer a random nay every once in a while or something.

00:52:35.300 --> 00:52:36.500
You know, pony style.

00:52:38.020 --> 00:52:40.600
Adrian, what is the story behind that?

00:52:41.200 --> 00:52:42.420
Oh, it has nothing to do with Django.

00:52:44.160 --> 00:52:55.160
Yeah, just the 30-second version is ChatGPT was telling people about my site, my company, SoundSlice, having a feature that doesn't actually exist.

00:52:55.860 --> 00:52:57.680
And it was happening like dozens of times per day.

00:52:59.240 --> 00:53:04.180
And so we had this inbound set of users who had a wrong expectation.

00:53:05.420 --> 00:53:21.400
So we ended up just writing the feature to appease the ChatGPT gods, which I think is the first time that, at least to my knowledge of, yeah, product decisions being influenced by misinformation from LLMs.

00:53:21.620 --> 00:53:25.960
- I just love that it's easier to just build the feature than to get the misinformation corrected.

00:53:27.060 --> 00:53:28.180
- You just gotta backfill it.

00:53:28.200 --> 00:53:29.120
You just gotta backfill it.

00:53:32.060 --> 00:53:32.480
Incredible.

00:53:33.700 --> 00:53:34.020
All right.

00:53:35.920 --> 00:53:36.460
That's crazy.

00:53:36.940 --> 00:53:39.960
Let's do two more quick topics, somewhat lightning round.

00:53:40.070 --> 00:53:44.480
We have about six minutes left for this show.

00:53:44.780 --> 00:53:56.420
So one, there's been, you guys mentioned it a couple of times and it's also just kind of going back and forth in the audience here, that the whole REST idea.

00:53:56.430 --> 00:54:00.200
So we've got Tom Christie doing amazing work with Django REST framework.

00:54:00.740 --> 00:54:12.040
And we've also, I think, people who do talk about FastAPI and how do I use the ORM with it, like we've got Django Ninja, which is really, really close to FastAPI and so on.

00:54:13.520 --> 00:54:17.580
That's one side, that's a really positive side of things with Django.

00:54:17.750 --> 00:54:33.120
And the other side I think is, I'm not a super fan of, but it's something a lot of people do is, well, can we just make the backend a dumb crud API thing and let me just write everything in JavaScript on the front end, which I'm not as much of a fan of.

00:54:33.240 --> 00:54:36.660
I think a lot of people choose that because they've been told that's how it's supposed to be.

00:54:36.670 --> 00:54:37.860
I don't think it needs to be that way.

00:54:39.479 --> 00:54:44.940
So what do you all feel about that and sort of how this has an impact for Django?

00:54:46.860 --> 00:54:53.320
Because if people just see the backend as an API that's just a dumb thing, And a lot of the value that Django brings, I think, starts to vanish.

00:54:54.700 --> 00:54:56.160
You've got things like HTMX, so on.

00:54:56.160 --> 00:54:57.380
So, yeah, what are your thoughts on all this?

00:54:57.800 --> 00:55:09.840
I think one of the hardest problems in computer science right now is talking a front-end team out of building everything as a pure JavaScript app, especially if that's developers who onboarded in web development over the past five to ten years.

00:55:11.560 --> 00:55:16.200
It's infuriating because my impression is that it just takes longer

00:55:16.240 --> 00:55:18.920
and you get more bugs and it's harder to build useful software.

00:55:19.300 --> 00:55:23.880
The one thing I will say is that HTMX has been a huge breath of fresh air on this front.

00:55:23.970 --> 00:55:28.280
Like HTMX gives you your single page applications.

00:55:28.780 --> 00:55:31.660
It's all like stuff that's rendered server side in templates.

00:55:31.850 --> 00:55:33.200
It fits really well with Django.

00:55:33.400 --> 00:55:36.480
There's a great Django extension for looking into HTMX.

00:55:36.730 --> 00:55:46.140
And I feel like that the pendulum is just sort of swinging slightly back away from the everything must be rendered in JavaScript thing, partly because of the work that the HTMX people have been doing.

00:55:46.300 --> 00:55:48.100
So that I felt pretty good about.

00:55:48.480 --> 00:55:57.180
I'm going to point to Adrian now because SoundSlice is a pure JavaScript frontend app, and it should be based on what it does, right?

00:55:58.180 --> 00:55:59.780
Yeah, it's interactive sheet music.

00:55:59.930 --> 00:56:06.840
So it's sheet music that's rendered entirely in your browser, responsive, blah, blah, blah, with an editor, a lot of crazy JavaScript.

00:56:07.500 --> 00:56:14.640
But yeah, I mean, this is a whole other podcast episode about the horribleness of modern web development.

00:56:15.420 --> 00:56:21.300
I feel very lucky that I came up 20 years ago before it got so insane.

00:56:23.339 --> 00:56:50.320
But yeah, I have sort of a related comment, which is I would like to see Django be a stronger advocate for the web in general because it doesn't matter if you're talking to developers or people using tech products, the expectation has been shifting away from the web to the phone for many, many reasons.

00:56:51.600 --> 00:56:53.240
And I don't like that.

00:56:53.540 --> 00:56:57.520
I'm pretty sure that most, if not all, of the people on this chat don't like that either.

00:56:57.800 --> 00:57:02.880
And I don't really see a lot of effort being pushed in that direction.

00:57:04.480 --> 00:57:08.940
So just to sprinkle in a little idea here.

00:57:09.080 --> 00:57:09.200
Yeah.

00:57:09.740 --> 00:57:19.140
I personally wish that progressive web apps were more front and center, giving you an option at least, like, okay, you have to be on the phone, but could we package it up a little more?

00:57:19.540 --> 00:57:21.440
- There's a really exciting development there,

00:57:21.440 --> 00:57:23.380
just that's finally beginning to be rolled out.

00:57:23.500 --> 00:57:36.460
There's this thing called view transitions in CSS, where you can have a little bit of CSS that says, and when the user goes from one page to another, keep the navigation bar in the same place and do like a quick blur effect for this piece here.

00:57:36.700 --> 00:57:40.620
It means that, and it's been supported in Chrome for a few years, it's finally rolling out to the browsers.

00:57:41.040 --> 00:57:45.520
It means you can build something that feels like a slick app with page transitions and so forth.

00:57:45.760 --> 00:57:46.240
But it's not.

00:57:46.380 --> 00:57:48.040
It's just boring old HTML and CSS.

00:57:48.520 --> 00:57:49.940
No JavaScript required at all.

00:57:50.320 --> 00:57:52.220
Gives you that experience much faster to load.

00:57:52.520 --> 00:57:55.820
And I have been itching to see this start showing up.

00:57:55.820 --> 00:58:01.780
And I think it's finally this year, I feel, is the year where the browser support is good enough that we can start really depending on this.

00:58:02.440 --> 00:58:09.140
And, yeah, because it gives you that app-like experience on a boring old website, which is, I feel like that's the thing that we all want.

00:58:10.500 --> 00:58:15.280
So part of Adrian's piece and sorry, Tebow, real quick.

00:58:15.770 --> 00:58:18.240
My second thing I have to pitch is because of what Adrian was saying.

00:58:18.770 --> 00:58:25.940
I think because systematically we, you know, we are really lucky to be around for 20 years because we've had nothing but volunteer leadership for 20 years.

00:58:26.700 --> 00:58:28.960
One thing we want to do is find an executive director,

00:58:29.290 --> 00:58:30.280
somebody that can run the foundation.

00:58:30.870 --> 00:58:33.000
The biggest reason goes back to Adrian's point.

00:58:33.240 --> 00:58:42.360
I think that we sometimes don't get a seat at the table when it comes to web standards, when it comes to these conversations, is because it's the cycling of Thibault being the president now.

00:58:42.360 --> 00:58:43.160
It was Frank before.

00:58:43.320 --> 00:58:44.440
It was Anna from Africa.

00:58:44.700 --> 00:58:47.340
We've had many really good presidents over the years.

00:58:47.940 --> 00:58:52.260
But it's really hard to work with foundations and nonprofits when you don't have a set person.

00:58:52.720 --> 00:58:55.180
Even our fellows seem to rotate every three to four years.

00:58:55.700 --> 00:58:59.240
And so that's part of like Django growing up, which is something I would love to see us do.

00:58:59.740 --> 00:59:02.520
And then Thibault, I love the fact that this started off in the middle of like the day.

00:59:02.740 --> 00:59:06.700
And now it is like perfectly cycled to like dark and barely able to see you.

00:59:06.760 --> 00:59:07.660
But go ahead.

00:59:08.960 --> 00:59:38.460
Yeah, I guess it was Chaim Kirby, the last president. To me, there's a developer experience and keeping devs happy. So when we say people go to React or whichever JS Heavy, it's also because they think they need to build whatever complexity that they are after, but also because they think it has good DX, I assume. So when we say the REST framework or the Django Ninja, to me, it's this as well, that we have to be aware of what's the evolving standards for what devs want to do with their web.

00:59:39.060 --> 00:59:48.100
And I guess how we can make Django meet that, whether it's better types, better CLI, better packaging, more Rust, maybe, whichever.

00:59:51.240 --> 00:59:56.520
Will, do you want to get a quick word in on this everything's a front-end thing now

00:59:56.800 --> 00:59:58.240
before we move on to the last bit?

00:59:59.260 --> 00:59:59.600
Oh, sure.

00:59:59.720 --> 01:00:12.700
I'm just going to say, and this probably goes back to Adrian and Simon, like all of them, It seems very wise to keep the front end light because there was certainly 10 years ago, a lot of pressure to integrate React or Vue or Angular or something.

01:00:12.860 --> 01:00:19.920
But the fact that it's remained just the Django templates means HTMX can rise and we can have more innovation.

01:00:20.540 --> 01:00:25.900
And just shout out, Carson Gross of HTMX is giving the keynote at DjangoCon US in three weeks.

01:00:26.840 --> 01:00:32.740
So even though he's not a Django developer, he's in fact more of a he's a professor who does Java and obviously JavaScript.

01:00:33.340 --> 01:00:39.400
it still slides into Django in a way that if Django had built out the front end story, we wouldn't be able to.

01:00:40.340 --> 01:00:41.800
I love how that also fits.

01:00:42.040 --> 01:00:51.080
DjangoCon has had a long tradition of having a keynote from somebody from outside the community, which started in 2008 with Cal Henderson at DjangoCon over in Mountain View.

01:00:52.220 --> 01:00:53.440
Was that the why I hate Django?

01:00:53.620 --> 01:00:57.100
Because there was that whole history of, I feel like there should be another one of those, you know?

01:00:57.560 --> 01:00:58.420
Absolutely, yeah.

01:00:59.280 --> 01:00:59.900
But that's great.

01:01:00.060 --> 01:01:02.360
That's a fantastic keynote for DjangoCon, I think.

01:01:03.620 --> 01:01:28.180
yeah and coming up in Chicago right pretty soon so if you are in or would like to be go check it out right that's part of that community thing I talked about and people like people not listening who are not watching I just you know listening not watching they don't realize that you you did this outside and uh there's a great comment from Kojo saying it's really cool that You're using in real life dark mode.

01:01:28.800 --> 01:01:29.100
That's great.

01:01:32.180 --> 01:01:32.400
All right.

01:01:32.700 --> 01:01:34.040
Let's close it out with this, everyone.

01:01:34.500 --> 01:01:35.380
We're pretty much out of time.

01:01:36.760 --> 01:01:37.360
20 years.

01:01:39.000 --> 01:01:40.220
Amazing, amazing stuff.

01:01:43.220 --> 01:01:46.260
We're celebrating Django having its birthday, right?

01:01:46.500 --> 01:01:49.320
But it's going to live on for a long time.

01:01:49.420 --> 01:01:50.680
There's a ton of code.

01:01:50.840 --> 01:01:53.320
There's a ton of things people are doing with Django.

01:01:55.320 --> 01:01:57.460
Even if you guys step away at some point, it's still going to be going.

01:01:57.900 --> 01:02:01.340
So give me your, you know, going around and starting with Will, I guess.

01:02:01.560 --> 01:02:05.320
Give me your forward-looking thoughts on Django over the next five, ten years.

01:02:08.720 --> 01:02:12.580
Well, I think it's integrating with AI, broadly defined, however that means.

01:02:13.040 --> 01:02:17.840
Because in a way related to Adrian's point, like the boring old web has never been more relevant.

01:02:18.140 --> 01:02:22.320
Even though we're focused on chatbots right now, you still need all the other things.

01:02:23.060 --> 01:02:24.520
And Django can integrate into that.

01:02:24.720 --> 01:02:31.880
And I think it's always kind of a marketing problem for Django because we don't have one person in charge or a company behind it.

01:02:32.020 --> 01:02:36.760
So telling the story of we've been here, there's still double digit PRs.

01:02:36.940 --> 01:02:38.580
It has a sink in many areas.

01:02:39.780 --> 01:02:45.520
And I worry that the next generation of web developers just skip it because they don't know what it already has.

01:02:45.880 --> 01:02:50.400
And they have this presumption that it's too hard to learn, which it's not.

01:02:51.660 --> 01:02:52.540
Yeah, absolutely.

01:02:55.780 --> 01:02:56.520
Is it me?

01:02:56.980 --> 01:02:57.600
It is you.

01:02:57.970 --> 01:03:00.100
I hear you're boring about the web.

01:03:00.280 --> 01:03:00.960
What's going on now?

01:03:01.350 --> 01:03:01.800
Tell us about it.

01:03:01.910 --> 01:03:03.140
What do you see for the future?

01:03:03.780 --> 01:03:04.340
For the future?

01:03:04.820 --> 01:03:14.420
Yeah, I'm actually, perhaps ironically, the worst person to ask because I have worked on the same app for almost 13 straight years full-time now.

01:03:16.580 --> 01:03:20.740
I use Django every day, and it does everything I need.

01:03:21.280 --> 01:03:24.440
So I'm very happy with the current state.

01:03:25.859 --> 01:03:45.900
And I think, like I said earlier, if it were up to me, the thing I would focus on is more philosophical or trying to promote the concept of the web versus non-web stuff.

01:03:46.780 --> 01:03:49.060
Because if the web goes away, Django goes away.

01:03:49.200 --> 01:03:51.120
I mean, it's in here.

01:03:51.160 --> 01:03:52.480
- A lot of beautiful things go away, yeah.

01:03:52.660 --> 01:03:53.880
- A lot of beautiful things go away.

01:03:54.980 --> 01:03:59.500
So I think that would be my hope for the next five years.

01:04:00.060 --> 01:04:06.440
- Yeah, I've done combat with the App Store review people, both Apple and Google, and it is not pretty.

01:04:06.600 --> 01:04:07.920
We do not want the web to go away.

01:04:08.800 --> 01:04:09.080
Theobald.

01:04:12.260 --> 01:04:15.400
- There's definitely AI in there and definitely the web.

01:04:15.640 --> 01:04:17.860
I really liked that you mentioned the view transitions.

01:04:18.680 --> 01:04:36.260
I think if web technologies get that much better in the next five years or so, we can match what's possible with a mobile dev, but not only match it, but in terms of accessibility and how many people you can reach with a web app, I would go far, far beyond.

01:04:36.720 --> 01:04:53.120
So I guess to me for that, the other side is having a foundation behind Django that's probably a bit more professional, that takes it a bit more seriously, that with people looking after the framework for millions of devs at this point.

01:04:54.060 --> 01:04:58.040
And that, as you said, the people in this room, we come and go, it's very natural.

01:04:58.420 --> 01:05:00.160
So just making sure that we have the pipelines.

01:05:00.940 --> 01:05:10.120
So hopefully, five, 10 more years, the jungle of space you mentioned earlier, that's the people who will be the presidents and people having this podcast maybe in 10 years' time.

01:05:11.680 --> 01:05:12.560
- Yeah, absolutely.

01:05:13.680 --> 01:05:13.800
Jeff.

01:05:15.880 --> 01:06:11.400
really curious to see what russ's impact is i think python is just getting so much faster so much better and i know there's some really smart people working on like WebAssembly and rust and i dream of a day when a django view can be the same thing in your browser as it is on the server and i think when we look at like talking to a query set your browser you know doing data exchange serialization json something i feel like in the next five years there's this there's this opportunity that whatever python is becoming whatever django is becoming that like you know we it's less about how are we going to use react and render which i hate react by the way you got to put that plug in but i'm just really curious to see like how these things can kind of mold together as you know developer experiences have gotten a lot better because of tooling and rust uh there's just this whole new world that i see as far as like these technologies that start to kind of you know marry the two together in a way that we just haven't been able to do for a while but we're starting to see glimpses of it.

01:06:13.299 --> 01:06:15.240
For sure. Simon, final word for...

01:06:15.880 --> 01:06:19.320
I'm going to double down a little bit on the WebAssembly stuff is so exciting.

01:06:19.490 --> 01:06:25.940
Like Pyodide, the thing that lets you run Python in your browser, is now at least 10 years old. It's very, very good.

01:06:26.420 --> 01:06:27.740
It's about a two megabyte download.

01:06:27.950 --> 01:06:30.340
A few years ago, I'd have said two megabyte downloads is too much.

01:06:30.430 --> 01:06:33.600
These days, two megabyte download for a web page is hardly anything at all.

01:06:34.320 --> 01:06:49.180
But I feel like the thing that I love most about Django these days is It is reliable. It's so dependable. Nobody ever picks Django for a project and regrets it. Because Django, it's mature, it's stable, it's well documented, it moves at a sensible place.

01:06:49.800 --> 01:07:35.980
Long may that continue. I love the idea that Django becomes -- and Django for many years has been a great default technology for you to use as a project. And if we double down on that, which I think is what we're doing already, that's fantastic for me. I love that idea that you can always pick Django, it will always do what you need it to do. There will never be any nasty surprises or regrets from working with that. And if we can tap into things like free-threaded Python is coming along now, which means maybe we don't have to rewrite everything as async things just to handle large concurrency. There's all of that kind of stuff, the WebAssembly stuff. It feels like the Python ecosystem is in a really good shape and Django sits very close to the center of that ecosystem. And I'm really excited about that. I love that we can continue to provide the best

01:07:36.260 --> 01:07:46.840
default option for building great things. Yeah, totally agree. All right, everyone, thank you so much for being here. Congratulations. Happy birthday, Django.

01:07:48.480 --> 01:07:51.280
Happy birthday, Django. Happy birthday, Django.

