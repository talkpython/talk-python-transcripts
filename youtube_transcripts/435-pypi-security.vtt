WEBVTT

00:00:00.000 --> 00:00:03.000
Hey Mike.


00:00:03.000 --> 00:00:04.000
Hey Michael.


00:00:04.000 --> 00:00:07.000
Welcome to Talk Python To Me, it's awesome to have you here.


00:00:07.000 --> 00:00:10.000
Thanks for having me, I'm really excited to be here.


00:00:10.000 --> 00:00:12.000
Yeah, I'm excited to have you.


00:00:12.000 --> 00:00:15.000
Always interesting to talk about security.


00:00:15.000 --> 00:00:18.000
I gotta tell you, talking about security just makes me nervous.


00:00:18.000 --> 00:00:21.000
Why is that?


00:00:21.000 --> 00:00:24.000
Well, two reasons.


00:00:24.000 --> 00:00:29.000
You know, I feel like when you talk about security, you're kind of sticking your head up


00:00:29.000 --> 00:00:31.000
and people are like, "Let me see if I can whack that."


00:00:31.000 --> 00:00:34.000
You know, not everybody, but a few people in the world, right?


00:00:34.000 --> 00:00:39.000
But it is the internet, so if you take a very, very small percentage and multiply it by billions,


00:00:39.000 --> 00:00:43.000
it becomes non-zero.


00:00:43.000 --> 00:00:51.000
And then, you know, it's just one of those things, it's like trying to prove the absence of something.


00:00:51.000 --> 00:00:56.000
It's very hard to prove that you're not missing stuff, some step.


00:00:56.000 --> 00:01:01.000
It's very hard to prove that you haven't-- that there's not a-- you know, you've got all the controls


00:01:01.000 --> 00:01:03.000
and there's not one control you forgot, right?


00:01:03.000 --> 00:01:07.000
In that regard, probably more so.


00:01:07.000 --> 00:01:09.000
It's pretty tricky.


00:01:09.000 --> 00:01:16.000
Yeah, I mean, the way I've often thought about security is it's a spectrum, right?


00:01:16.000 --> 00:01:19.000
I used this quote a million years ago, I don't know who said it first,


00:01:19.000 --> 00:01:26.000
but the most secure computer is powered off and buried in six feet of under concrete, right?


00:01:26.000 --> 00:01:28.000
But it's useless, right?


00:01:28.000 --> 00:01:31.000
It's very secure, but nothing in there is useful.


00:01:31.000 --> 00:01:38.000
So if we take that as like a crazy extreme of secure and say the most insecure computer is, you know,


00:01:38.000 --> 00:01:44.000
powered on, has zero password control, connected to the internet, and auto-publishing IP data,


00:01:44.000 --> 00:01:46.000
so that way anyone can come and do whatever they want.


00:01:46.000 --> 00:01:49.000
All right, so that's the other end of the spectrum.


00:01:49.000 --> 00:01:51.000
That's a really bad situation.


00:01:51.000 --> 00:01:58.000
There's a fine balance that every software application system company has to kind of navigate


00:01:58.000 --> 00:02:03.000
to figure out where along those two crazy extremes, where do they fall?


00:02:03.000 --> 00:02:08.000
And where are their kind of risk thresholds of tolerance are?


00:02:08.000 --> 00:02:11.000
Like, what would it cost me to add more security?


00:02:11.000 --> 00:02:17.000
Well, I could, you know, lock down all of my users and not allow them in unless they come to the front door


00:02:17.000 --> 00:02:20.000
and show a picture ID, right?


00:02:20.000 --> 00:02:24.000
Like, okay, if that's how we want to secure our building, that's one way to do it.


00:02:24.000 --> 00:02:29.000
But that'll slow down the ingress to our building.


00:02:29.000 --> 00:02:33.000
So we issue our employees badge cards, and we assume that they act in good faith


00:02:33.000 --> 00:02:36.000
and they don't kind of lose them and report if they lose them.


00:02:36.000 --> 00:02:37.000
Oh, great.


00:02:37.000 --> 00:02:44.000
So that's kind of a middle ground where you kind of delegate some of the security to the individuals


00:02:44.000 --> 00:02:49.000
and just kind of you have to figure out where your security is


00:02:49.000 --> 00:02:54.000
and what you're willing to do and sacrifice in order to get it.


00:02:54.000 --> 00:02:57.000
Yeah, I totally agree.


00:02:57.000 --> 00:02:58.000
Wild sidebar.


00:02:58.000 --> 00:03:02.000
I can't believe the internet in its early days was like you described,


00:03:02.000 --> 00:03:09.000
like no NAT firewalls that stop direct access, no passwords.


00:03:09.000 --> 00:03:15.000
We might want to know who you are just so we can assign the files more conveniently to you, you know?


00:03:15.000 --> 00:03:18.000
Yeah, I mean, I hearken back to like the bulletin board days


00:03:18.000 --> 00:03:23.000
where you would dial up into somebody's random computer and you would do stuff in there.


00:03:23.000 --> 00:03:26.000
And I hosted a BBS and I interacted with others.


00:03:26.000 --> 00:03:30.000
And it was like, we were all generally operating in good faith


00:03:30.000 --> 00:03:33.000
because we wanted to kind of play together.


00:03:33.000 --> 00:03:38.000
And not until much later did bad actors saying,


00:03:38.000 --> 00:03:44.000
you know what, I see how I could take advantage of this in a way that suits me and not you.


00:03:44.000 --> 00:03:49.000
To which we started to say, all right, well, then how do we control for these things?


00:03:49.000 --> 00:03:56.000
Today, that conversation comes into modern systems development of secure by design, right?


00:03:56.000 --> 00:03:59.000
Or a lot of folks will say shift left, right?


00:03:59.000 --> 00:04:04.000
Take security into account much earlier into the life cycle as opposed to,


00:04:04.000 --> 00:04:07.000
oh, we have to tack this on at the end.


00:04:07.000 --> 00:04:14.000
So I think, you know, the evolution of the Internet was necessary for us to get to here.


00:04:14.000 --> 00:04:22.000
But as we're seeing newer protocols develop, those are taking this more secure by design approach.


00:04:22.000 --> 00:04:25.000
Yeah, and in depth with layers.


00:04:25.000 --> 00:04:27.000
Were you a trade wars fan?


00:04:27.000 --> 00:04:33.000
Oh, man, that's a name I have not heard in a very long time.


00:04:33.000 --> 00:04:34.000
That was a good one though.


00:04:34.000 --> 00:04:35.000
Yeah.


00:04:35.000 --> 00:04:41.000
I was very much a news and mail kind of relay kind of kid.


00:04:41.000 --> 00:04:43.000
Just wanted to see what was going on.


00:04:43.000 --> 00:04:52.000
Got very much involved in like understanding how the pretty good privacy would allow you to sign your messages.


00:04:52.000 --> 00:04:55.000
So that way other folks could believe that those were you.


00:04:55.000 --> 00:04:56.000
Right.


00:04:56.000 --> 00:04:58.000
And kind of like a test to truth.


00:04:58.000 --> 00:05:03.000
And that kind of fell apart because, again, these are all imperfect systems.


00:05:03.000 --> 00:05:09.000
They were, but it was such a world full of possibilities back in those days.


00:05:09.000 --> 00:05:16.000
I remember even just sending a mail and getting it back through that whole systems of relays was mind boggling.


00:05:16.000 --> 00:05:17.000
Yeah.


00:05:17.000 --> 00:05:23.000
I mean, for me, I was at the time I was living on top of a mountain in, you know, in the middle of Israel.


00:05:23.000 --> 00:05:34.000
And having that ability to connect with other people who there's no way I was ever going to see this variety of people back then.


00:05:34.000 --> 00:05:36.000
Like, oh, this opened the world.


00:05:36.000 --> 00:05:37.000
Right.


00:05:37.000 --> 00:05:38.000
Yeah.


00:05:38.000 --> 00:05:43.000
And that kind of fueled my desire to like, okay, what else can I do with these computers, with these systems?


00:05:43.000 --> 00:05:45.000
And, oh, wait, there's this internet thing.


00:05:45.000 --> 00:05:46.000
All right.


00:05:46.000 --> 00:05:51.000
Well, my mom's going to be ticked off because I'm tying up the phone line for hours.


00:05:51.000 --> 00:05:54.000
And it's like, all right, well, let's just have some fun.


00:05:54.000 --> 00:05:57.000
Yeah, that's when call waiting was the nemesis.


00:05:57.000 --> 00:06:16.000
So I bring I kind of focus on that a little bit because while we're going to talk about things that are not necessarily positive or people trying to do negative things to something that we all love and has been a very positive thing for the Python ecosystem.


00:06:16.000 --> 00:06:25.000
I do want to point out mostly technology is doing really awesome things for people like opening these doors and educating and connecting.


00:06:25.000 --> 00:06:30.000
It's just some of the bad people, they like to connect in bad ways.


00:06:30.000 --> 00:06:36.000
So before we get too far down that, let's just have you give people a quick introduction about yourself so they all know you.


00:06:36.000 --> 00:06:37.000
Hey, everyone.


00:06:37.000 --> 00:06:39.000
I'm Mike Fiedler.


00:06:39.000 --> 00:06:41.000
I'm in New York City.


00:06:41.000 --> 00:06:46.000
That's where I've been living for the last 15 years, I think.


00:06:46.000 --> 00:06:55.000
And I've been working in software development systems engineering for over 30 years across a couple continents, a variety of different companies.


00:06:55.000 --> 00:07:05.000
And for the past two years, I think, or three, I've been an active contributor to PyPI.org.


00:07:05.000 --> 00:07:12.000
Prior to that, I was contributing to a lot of Ruby projects, the Chef ecosystem.


00:07:12.000 --> 00:07:18.000
And I've worked at a variety of different companies, both startups and enterprises.


00:07:18.000 --> 00:07:24.000
You may have heard of some like Datadog, Orbi Parker, MongoDB, Capital One.


00:07:24.000 --> 00:07:30.000
Just kind of like working through different scenarios and learning different industries along the way.


00:07:30.000 --> 00:07:38.000
For the past year, I've been, well, since January, I've been focusing pretty much purely on PyPI.org.


00:07:38.000 --> 00:07:39.000
Yeah.


00:07:39.000 --> 00:07:41.000
And you work for the PSF?


00:07:41.000 --> 00:07:46.000
As of August, I was hired to come on full time.


00:07:46.000 --> 00:07:56.000
We thank you to our grants from Amazon Web Services, AWS, and some other folks that are chipping in to fund this PyPI safety and security role.


00:07:56.000 --> 00:08:06.000
But the PSF got some funding and I am the first full time engineer to focus on PyPI.org as a full time.


00:08:06.000 --> 00:08:13.000
In the past, you've spoken to some other folks who were contracted out to build out different aspects or features.


00:08:13.000 --> 00:08:16.000
But now I'm a full time maintainer.


00:08:16.000 --> 00:08:19.000
Yeah, that's really cool.


00:08:19.000 --> 00:08:26.000
The developer in residence at Lukaschlinga is playing, working in that role now.


00:08:26.000 --> 00:08:30.000
I feel like that was the first one of these types of roles, but now there's a couple, right?


00:08:30.000 --> 00:08:31.000
Yeah.


00:08:31.000 --> 00:08:37.000
I mean, the PSF is a non-profit organization, very small staff.


00:08:37.000 --> 00:08:40.000
I think we number a total of 12.


00:08:40.000 --> 00:08:45.000
And of those 12, I think only about five of us are engineers.


00:08:45.000 --> 00:08:48.000
And everything else is volunteer based.


00:08:48.000 --> 00:09:03.000
And so the first developer in residence program, which is Lukasch, has been successful enough that we got another organization and grants to fund the security developer in residence, which Seth Larson is doing.


00:09:03.000 --> 00:09:09.000
And he's kind of focusing on the wider Python ecosystem as a whole.


00:09:09.000 --> 00:09:16.000
Because my role is very much more narrowly focused on PyPI.org and the ecosystem surrounding that.


00:09:16.000 --> 00:09:27.000
So that way, we can focus on specific targets around security for the packaging world as opposed to the Python core.


00:09:27.000 --> 00:09:29.000
Right. Okay.


00:09:29.000 --> 00:09:40.000
Well, I do believe if you talk to people about why they like Python and especially why they stick with Python, the language is good.


00:09:40.000 --> 00:09:41.000
You can do cool stuff with it.


00:09:41.000 --> 00:09:45.000
But it's pip install, say your name.


00:09:45.000 --> 00:09:55.000
Say the name of your useful library that just brings so much and makes it so sticky and useful and productive.


00:09:55.000 --> 00:10:01.000
And so making sure that we have trust and pip install is really important.


00:10:01.000 --> 00:10:16.000
Yeah, I think like last year, I think Dustin Ingram came on and talked about some of the stats that he had pulled together that speak about how much PyPI.org is used.


00:10:16.000 --> 00:10:23.000
And that doesn't even count for the countless folk out there who are mirroring PyPI packages.


00:10:23.000 --> 00:10:29.000
So that way they can have a local cache, deal with corporate firewalls or whatever need.


00:10:29.000 --> 00:10:31.000
But it's true.


00:10:31.000 --> 00:10:36.000
Like there is the very popular request library or the Django project.


00:10:36.000 --> 00:10:41.000
Pip install Django and you have all the things that you need to start a Django project.


00:10:41.000 --> 00:10:59.000
And the speed at which the folks who are kind of working on the tooling like pip or some of the other alternatives out there to enable users to get those packages is such a wonderful tool in anyone's toolbox.


00:10:59.000 --> 00:11:09.000
But then very often folks forget that there is an entire kind of package universe behind what they just did as a consumer.


00:11:09.000 --> 00:11:13.000
So pip install Django is, yeah, I got this thing and installed it.


00:11:13.000 --> 00:11:14.000
Where did it install it from?


00:11:14.000 --> 00:11:16.000
How did it get there?


00:11:16.000 --> 00:11:17.000
Who put it up there?


00:11:17.000 --> 00:11:18.000
Why is it there?


00:11:18.000 --> 00:11:24.000
All of those questions most people go their entire career with not even having to worry about or think about.


00:11:24.000 --> 00:11:26.000
They're just like on the consumer side.


00:11:26.000 --> 00:11:36.000
But then on the producer side or the package maintainer or project maintainer, there's a whole other slew of things that one has to worry about.


00:11:36.000 --> 00:11:41.000
Yeah, there's some stuff we'll talk about in there, which will be really fun.


00:11:41.000 --> 00:11:49.000
I think also there's the third level of just the people who run PyPI and the infrastructure and the stats behind it.


00:11:49.000 --> 00:12:00.000
I mean, maybe give us a quick, I kind of started us off down this path, maybe give us a quick statement for those who don't necessarily know what PyPI is.


00:12:00.000 --> 00:12:06.000
But I think more interestingly, maybe try to give us some of the stats about the scale of things behind the --


00:12:06.000 --> 00:12:07.000
Sure.


00:12:07.000 --> 00:12:10.000
I mean, I haven't computed the runtime stats in a little bit.


00:12:10.000 --> 00:12:15.000
But pypi.org stands for the Python Package Index.


00:12:15.000 --> 00:12:22.000
And it's distinct from other things that have pypy in their name, which is a different runtime.


00:12:22.000 --> 00:12:36.000
But pypi.org is a package index, very much kind of a grocery or a store where you would pick up ingredients for the thing that you want to bake.


00:12:36.000 --> 00:12:38.000
If you want to make a cake, you need your ingredients.


00:12:38.000 --> 00:12:40.000
What kind of flour are you going to use?


00:12:40.000 --> 00:12:41.000
What kind of sugar?


00:12:41.000 --> 00:12:43.000
Sure, there's different kinds of flour and sugar.


00:12:43.000 --> 00:12:44.000
Which one do you want?


00:12:44.000 --> 00:12:45.000
How do you know?


00:12:45.000 --> 00:12:47.000
You go and find one.


00:12:47.000 --> 00:13:00.000
And where the package index helps is we store and kind of publish all the different kinds of flour and sugar that you might want that other people have spent time developing.


00:13:00.000 --> 00:13:05.000
That doesn't mean that there's only one type of flour, right?


00:13:05.000 --> 00:13:07.000
But there's a variety.


00:13:07.000 --> 00:13:12.000
And we just make it easy for people to publish their projects.


00:13:12.000 --> 00:13:18.000
And as you highlighted, there's over 480,000 projects live on PyPI right now.


00:13:18.000 --> 00:13:25.000
And over 4.8 or almost 4.9 million releases.


00:13:25.000 --> 00:13:28.000
And a release is not a one-to-one to a project.


00:13:28.000 --> 00:13:30.000
A project may have many releases.


00:13:30.000 --> 00:13:38.000
So, for instance, if there's the requests library and they publish a new version, that comes as a release.


00:13:38.000 --> 00:13:40.000
And then beyond that, we have files.


00:13:40.000 --> 00:13:44.000
And files map to releases as you could have a source distribution.


00:13:44.000 --> 00:13:49.000
So, there's literally the source code of a given release.


00:13:49.000 --> 00:13:54.000
Or you could have compiled wheels for different platforms.


00:13:54.000 --> 00:13:57.000
So, there's a lot more files than there are releases.


00:13:57.000 --> 00:14:00.000
And there's a lot more releases than there are projects.


00:14:00.000 --> 00:14:01.000
Yeah.


00:14:01.000 --> 00:14:05.000
And then on the last stat that we show on the front page is the users.


00:14:05.000 --> 00:14:11.000
We do have over 740,000 users on PyPI.org.


00:14:11.000 --> 00:14:13.000
That doesn't mean that these are active users.


00:14:13.000 --> 00:14:17.000
But they have at some point signed up for an account on PyPI.org.


00:14:17.000 --> 00:14:18.000
Mm-hmm.


00:14:18.000 --> 00:14:20.000
That's a huge number.


00:14:20.000 --> 00:14:23.000
And these are not people who might pip install a thing.


00:14:23.000 --> 00:14:30.000
These are people who, for some reason or other, are interested in potentially creating content for others to use.


00:14:30.000 --> 00:14:32.000
Exactly.


00:14:32.000 --> 00:14:37.000
Today, the only way you can publish a project on PyPI is by having a user.


00:14:37.000 --> 00:14:40.000
Or, you know, it starts with a user.


00:14:40.000 --> 00:14:41.000
There's other ways to publish.


00:14:41.000 --> 00:14:44.000
But you have to have a user to kind of start the process.


00:14:44.000 --> 00:14:56.000
And a lot of folks have started to kind of get the idea that if this project needs long-term maintainership, right, it's not just me, right?


00:14:56.000 --> 00:15:00.000
Maybe I should ask somebody else to help co-maintain this.


00:15:00.000 --> 00:15:06.000
So it's also not a one-to-one mapping of users to projects or releases or something like that.


00:15:06.000 --> 00:15:08.000
Yeah, for sure.


00:15:08.000 --> 00:15:16.000
And some of the changes coming, I think, allow for almost like a GitHub organization within PyPI, right?


00:15:16.000 --> 00:15:22.000
Rather than, well, we're going to create an account, and that one account is for all of AWS, for example.


00:15:22.000 --> 00:15:23.000
Right.


00:15:23.000 --> 00:15:25.000
Which is not really the right granularity, probably.


00:15:25.000 --> 00:15:28.000
It definitely isn't, but it historically has been, right?


00:15:28.000 --> 00:15:31.000
Like that is just a feature we had never built.


00:15:31.000 --> 00:15:33.000
It was never a focus.


00:15:33.000 --> 00:15:42.000
But over the past year or so, I think we got funded to build out some of the organizations aspect.


00:15:42.000 --> 00:15:46.000
We have launched the community organizations.


00:15:46.000 --> 00:15:55.000
So that way, if you're running an open-source project or an ecosystem there, you can sign up today and get an organization name.


00:15:55.000 --> 00:16:00.000
We are still working through a long backlog of organizations in order to approve them.


00:16:00.000 --> 00:16:04.000
It still requires an admin to do so.


00:16:04.000 --> 00:16:18.000
But we are still working through some of the complexities around corporate organizations when it comes to just as a nonprofit, how can we kind of figure out how to support corporations properly.


00:16:18.000 --> 00:16:19.000
Yeah.


00:16:19.000 --> 00:16:32.000
I've always thought that that was something of an opportunity to work with corporations more closely on PyPI and indirectly through the PSF, right?


00:16:32.000 --> 00:16:40.000
I mean, your role exists because of these grants, because connections with certain high profile and high consumers of Python tech companies, right?


00:16:40.000 --> 00:16:42.000
Like AWS and others.


00:16:42.000 --> 00:16:52.000
But there's tons of companies that have things that support their product and at least their developers work with.


00:16:52.000 --> 00:16:58.000
And having a way to make them feel more at home on PyPI, I think, is a good idea.


00:16:58.000 --> 00:17:10.000
Yeah. I mean, beyond what lots of organizations may do is have some of their in-house engineers contribute to PyPI.org, to the warehouse code base.


00:17:10.000 --> 00:17:13.000
It's open source. Everything you're looking at is open source.


00:17:13.000 --> 00:17:15.000
That's where I started.


00:17:15.000 --> 00:17:22.000
And that's the easiest way of like, "Oh, you want this thing? Open an issue, talk about it with us.


00:17:22.000 --> 00:17:27.000
If you want to go ahead and put some effort behind it, we'll welcome that too."


00:17:27.000 --> 00:17:42.000
But there is a wiki page out there of like packaging fundable improvement projects of like, "All right, if you're considering throwing some money at the problem, here are some things we've thought about and would love your assistance with."


00:17:42.000 --> 00:17:51.000
And then beyond that, there's other ways of just like straight up funding a role that can focus on a particular thing.


00:17:51.000 --> 00:17:53.000
Yeah. Excellent.


00:17:53.000 --> 00:17:57.000
All right. Let's talk about supply chain issues.


00:17:57.000 --> 00:18:18.000
We were talking before we went live here that probably the biggest side of security, or the biggest, at least from my perspective, what seems like a very huge opportunity for people to do bad things is to just upload malware basically of different ways, right?


00:18:18.000 --> 00:18:25.000
Sure, you could talk about hacking PyPI org itself or other stuff, but I think that that's probably quite well covered.


00:18:25.000 --> 00:18:33.000
It's more about, "Can I trick somebody into various ways of installing something that they didn't?"


00:18:33.000 --> 00:18:38.000
And that generally falls under the supply chain security side of things.


00:18:38.000 --> 00:18:51.000
So I wanted to just point out three examples that just show this is a industry-wide problem, not necessarily a PyPI problem, but there is a PyPI manifestation of it, right?


00:18:51.000 --> 00:18:52.000
I mean, yeah.


00:18:52.000 --> 00:19:17.000
And just to kind of lay the groundwork for folks who aren't familiar with supply chain attacks, the notion is that instead of an attacker trying to get onto your computer, they're going to go after something that they have a high probability of knowing is going to be on your computer for the SolarWinds as kind of an administrative action.


00:19:17.000 --> 00:19:22.000
Well, many SolarWinds were installed on servers and computers.


00:19:22.000 --> 00:19:26.000
So that's part of the supply chain.


00:19:26.000 --> 00:19:28.000
I'm not going directly after you.


00:19:28.000 --> 00:19:31.000
I'm going after something you consume, right?


00:19:31.000 --> 00:19:32.000
Right.


00:19:32.000 --> 00:19:35.000
And it can be very meta, right?


00:19:35.000 --> 00:19:41.000
So one of the examples that I would say that that falls under is this thing called Xcode Ghost.


00:19:41.000 --> 00:19:59.000
I believe this was primarily a Chinese problem, basically because in China there were a lot of app store developers who either weren't registered as Apple developers or for whatever reason didn't go, maybe it was just a latency thing, didn't go through the app store to get their Xcode or go through the developer portal.


00:19:59.000 --> 00:20:01.000
They just found a local mirror.


00:20:01.000 --> 00:20:03.000
And what are those local mirrors?


00:20:03.000 --> 00:20:05.000
What could go wrong?


00:20:05.000 --> 00:20:09.000
I'll just get it from this IP address instead of apple.com.


00:20:09.000 --> 00:20:10.000
Right.


00:20:10.000 --> 00:20:15.000
So what it did was it was a backdoored version of Xcode.


00:20:15.000 --> 00:20:20.000
So they weren't attacking even the things that people were using.


00:20:20.000 --> 00:20:23.000
They said, let's take over the developers tool chain.


00:20:23.000 --> 00:20:27.000
So whatever they happen to be building, we don't know what that is, but we'll install a virus into their app.


00:20:27.000 --> 00:20:29.000
That app will go in the app store.


00:20:29.000 --> 00:20:31.000
Then whoever installs that app will have it.


00:20:31.000 --> 00:20:34.000
These things get very indirect.


00:20:34.000 --> 00:20:42.000
I mean, this is kind of the challenge is like nobody until somebody surfaced this as an attack, right?


00:20:42.000 --> 00:20:44.000
Nobody thought this was a problem, right?


00:20:44.000 --> 00:20:52.000
And this is kind of earlier to your comment of like, how do you disprove the existence of a problem?


00:20:52.000 --> 00:21:01.000
And a lot of it is just like, all right, we got to think about every aspect that goes into producing a given piece of software.


00:21:01.000 --> 00:21:07.000
But like the strongest answer here is don't download random stuff from people on the Internet, right?


00:21:07.000 --> 00:21:08.000
Like you don't.


00:21:08.000 --> 00:21:13.000
I'm sure that this one in particular had a good reason for having a local mirror.


00:21:13.000 --> 00:21:18.000
But if you're going to local mirror it, then who is the local mirror and what is there?


00:21:18.000 --> 00:21:19.000
What are they doing?


00:21:19.000 --> 00:21:20.000
Right.


00:21:20.000 --> 00:21:26.000
What kind of attestation or assurances do you have that they haven't modified anything in the process?


00:21:26.000 --> 00:21:27.000
Yeah.


00:21:27.000 --> 00:21:34.000
It's very tricky because I might absolutely trust some company out there that's building a very popular.


00:21:34.000 --> 00:21:36.000
They have 10 million downloads like that.


00:21:36.000 --> 00:21:37.000
Surely that's fine.


00:21:37.000 --> 00:21:46.000
But one of their developers or one of their consultants to one of their developers may have, you know, misappropriately gotten their tools.


00:21:46.000 --> 00:21:51.000
And it's very hard from the outside to even know that that could be a problem.


00:21:51.000 --> 00:21:53.000
So these things are tricky.


00:21:53.000 --> 00:22:05.000
Yeah. I mean, the good news is that there's a large volume of security companies out there who, you know, make their bread and butter by scanning and looking for patterns that looks sneaky, tricky.


00:22:05.000 --> 00:22:09.000
And they spend a lot of investigative time digging into these.


00:22:09.000 --> 00:22:15.000
We get lots of reports from that from those types of folk of like, here, this is a new package.


00:22:15.000 --> 00:22:18.000
It looks fishy and here's why.


00:22:18.000 --> 00:22:21.000
And then we take action on those.


00:22:21.000 --> 00:22:23.000
Yeah, I hear you.


00:22:23.000 --> 00:22:27.000
Typo squatting was a big issue for a while.


00:22:27.000 --> 00:22:30.000
That's a form of supply chain attack.


00:22:30.000 --> 00:22:42.000
Like here, this Xcode ghost is we're going to get people to use a fake Xcode or a broken bad Xcode that they think is fine.


00:22:42.000 --> 00:22:52.000
Instead of trying to say take over Django, the package and do some militia to it, try to take over Django or whatever.


00:22:52.000 --> 00:22:57.000
Some common misspelling of that and upload that package.


00:22:57.000 --> 00:22:59.000
And you could even embed Django.


00:22:59.000 --> 00:23:00.000
Right.


00:23:00.000 --> 00:23:02.000
So it still functions.


00:23:02.000 --> 00:23:05.000
I don't remember it being spelled this way, but it's working.


00:23:05.000 --> 00:23:06.000
So it's got to be fine.


00:23:06.000 --> 00:23:12.000
Yeah, I think there's these, you know, typo squatting is very much a prevalent problem.


00:23:12.000 --> 00:23:13.000
Right.


00:23:13.000 --> 00:23:17.000
Because like I can't prevent you from making a typo.


00:23:17.000 --> 00:23:18.000
Right.


00:23:18.000 --> 00:23:19.000
Like I literally can't.


00:23:19.000 --> 00:23:21.000
If you type in Django, that's it.


00:23:21.000 --> 00:23:22.000
Game over.


00:23:22.000 --> 00:23:23.000
Right.


00:23:23.000 --> 00:23:28.000
What I can do is look or receive reports that Django exists.


00:23:28.000 --> 00:23:29.000
It looks malware.


00:23:29.000 --> 00:23:30.000
And let's just take that down.


00:23:30.000 --> 00:23:31.000
Let's not do that.


00:23:31.000 --> 00:23:32.000
Right.


00:23:32.000 --> 00:23:33.000
Yeah.


00:23:33.000 --> 00:23:37.000
So there's other sides we can do when it comes to typo.


00:23:37.000 --> 00:23:47.000
You talked about typo scouting and I was reminded of an article I remember reading around DNS record bit flipping.


00:23:47.000 --> 00:23:58.000
Where, you know, some computers, some browsers would not properly process a given bit in a memory register for a DNS record.


00:23:58.000 --> 00:24:07.000
So this author figured out what those bit flips would be for popular DNS names, registered those DNS names and started just harvesting traffic.


00:24:07.000 --> 00:24:10.000
And said, you know what, this is not anything you can do.


00:24:10.000 --> 00:24:12.000
This is just how browsers and memory work.


00:24:12.000 --> 00:24:15.000
And that was, I don't know, about six, seven years ago.


00:24:15.000 --> 00:24:16.000
And I believe it's been fixed since.


00:24:16.000 --> 00:24:21.000
But it was like, yeah, there's sometimes there's just not anything that you did wrong.


00:24:21.000 --> 00:24:28.000
It's the ecosystem you're in is doing things in a way that you don't expect.


00:24:28.000 --> 00:24:42.000
For something as nefarious as like DNS bit flipping, like this is where like having outbound firewalls can help a whole lot to say, don't allow traffic that I didn't initiate in some manner.


00:24:42.000 --> 00:24:48.000
And if I did, have I initiated the traffic to this address before?


00:24:48.000 --> 00:24:53.000
Do you remember zone alarm from the early 2000s?


00:24:53.000 --> 00:24:54.000
Yes.


00:24:54.000 --> 00:25:04.000
So this is before this is this harkens back to a slightly less naive version of I can't believe there was no passwords on the accounts just on the open Internet.


00:25:04.000 --> 00:25:09.000
But Windows 95, 98, there were no firewalls.


00:25:09.000 --> 00:25:22.000
And I was at a company that was based inside of a university where we all got Ethernet and every computer that plugged in got its own IP address and all sorts of crazy stuff.


00:25:22.000 --> 00:25:24.000
But there were no firewalls.


00:25:24.000 --> 00:25:30.000
And I remember when that thing came out, I thought, you know what, maybe I'm just gonna go around put this on all the dev machines.


00:25:30.000 --> 00:25:38.000
Like it's kind of insane that we have this incredibly insecure software just on the open Internet.


00:25:38.000 --> 00:25:44.000
And so I did and all the when I started, it used to say, do you want to let such and such thing act as a server?


00:25:44.000 --> 00:25:48.000
Do you want to let IIS or, you know, NGINX or this type of thing?


00:25:48.000 --> 00:25:50.000
Sure, that can be a server.


00:25:50.000 --> 00:25:54.000
Then the next pop up was, do you want to let notepad.exe be a server?


00:25:54.000 --> 00:25:58.000
I'm like, huh, that's not probably what it should be doing.


00:25:58.000 --> 00:25:59.000
Yeah, that doesn't sound right.


00:25:59.000 --> 00:26:01.000
That doesn't sound right.


00:26:01.000 --> 00:26:02.000
I said no.


00:26:02.000 --> 00:26:08.000
And then the next one and the next one, the whole companies and notepad.exe were being servers.


00:26:08.000 --> 00:26:10.000
And I'm like, this can't be good.


00:26:10.000 --> 00:26:12.000
And it turned out that something had infected it.


00:26:12.000 --> 00:26:16.000
And until I put on one of those outbound firewalls, how do you know?


00:26:16.000 --> 00:26:17.000
Right.


00:26:17.000 --> 00:26:18.000
No one knew.


00:26:18.000 --> 00:26:19.000
There was no indication.


00:26:19.000 --> 00:26:20.000
We had, you know, super fast Internet.


00:26:20.000 --> 00:26:22.000
It wasn't like it was dragging it down.


00:26:22.000 --> 00:26:24.000
I don't even remember what it was doing, but it was bad.


00:26:24.000 --> 00:26:34.000
Yeah, I mean, the number one thing that I think we can learn from all of those things is that awareness is the biggest part of security.


00:26:34.000 --> 00:26:41.000
Because if folks aren't aware that downloading something from the Internet could be a danger, then they're just going to download it and run it.


00:26:41.000 --> 00:26:51.000
If somebody who had a previously version of, you know, software working on their machine suddenly pop up and say, this has been modified.


00:26:51.000 --> 00:26:53.000
Are you sure you want to open it?


00:26:53.000 --> 00:26:56.000
So many of us just click OK without reading the dialogue.


00:26:56.000 --> 00:26:59.000
It's like, well, wait, think about that for just a second.


00:26:59.000 --> 00:27:07.000
Because you are the biggest kind of enabler and disabler of security, the human behind the keyboard.


00:27:07.000 --> 00:27:12.000
Because you probably have some administrative rights on your computer that allows you to do some stuff.


00:27:12.000 --> 00:27:26.000
And in the example with Notepad EXE, I think today if we were to try to do that on some popular developer environment like VS Code, VS Code does act as a server in a lot of cases.


00:27:26.000 --> 00:27:31.000
So it's like, I don't know, should this work as an inbound server or not?


00:27:31.000 --> 00:27:35.000
Maybe this is just part of the local language server that I need for autocomplete.


00:27:35.000 --> 00:27:36.000
Yeah.


00:27:36.000 --> 00:27:38.000
Or maybe it's not.


00:27:38.000 --> 00:27:41.000
Yeah, it's getting more subtle every day.


00:27:41.000 --> 00:27:43.000
Yes, it is absolutely getting more subtle.


00:27:43.000 --> 00:27:48.000
Even Zoom had like a local loopback web server thing, I think, for a while.


00:27:48.000 --> 00:27:55.000
So before we move off of this typo squatting part of the conversation, out in the audience we have a pretty decent question here.


00:27:55.000 --> 00:28:02.000
What's the possibility of something like a verified badge for popular packages?


00:28:02.000 --> 00:28:05.000
I mean, if Twitter can charge $8 a month-- no, I'm just kidding.


00:28:05.000 --> 00:28:07.000
[LAUGHTER]


00:28:07.000 --> 00:28:10.000
I don't think they're called Twitter anymore.


00:28:10.000 --> 00:28:13.000
The artist formerly known as Twitter.


00:28:13.000 --> 00:28:15.000
Yeah.


00:28:15.000 --> 00:28:19.000
The challenge there is what does verified mean?


00:28:19.000 --> 00:28:25.000
And this is something that we kind of introduced some features later on that we'll talk about.


00:28:25.000 --> 00:28:29.000
But this notion of verified is like, well, verified by whom?


00:28:29.000 --> 00:28:31.000
Where does the level of trust?


00:28:31.000 --> 00:28:45.000
Because if a supply chain attack happens for Django, so if you were to search Django here in PyPI.org and we get Django, all right, we've got Django, the second line, Django 4.2.5.


00:28:45.000 --> 00:28:48.000
And if we were to enter there, how do we know?


00:28:48.000 --> 00:28:50.000
This is a thing, right?


00:28:50.000 --> 00:29:00.000
So I could add a badge here, but that doesn't give me any confidence that any of the Django folk, which are great people, that one of them didn't get compromised and suddenly a new version was pushed.


00:29:00.000 --> 00:29:05.000
So verified, I guess, it's what does that mean to whom and why?


00:29:05.000 --> 00:29:10.000
Because the last thing I want to do is tell people, give them a false sense of security.


00:29:10.000 --> 00:29:11.000
Yeah.


00:29:11.000 --> 00:29:14.000
When, honestly, you're downloading software from the internet.


00:29:14.000 --> 00:29:32.000
If you don't have a process to vet what it is you're doing is doing the thing, then you should probably look at that aspect of a, we vetted this version of Django, we got these hashes, we got these releases, we pin this dependency, we're happy with this.


00:29:32.000 --> 00:29:36.000
And then when you upgrade, you kind of do a similar evaluation.


00:29:36.000 --> 00:29:37.000
Yeah.


00:29:37.000 --> 00:29:45.000
There's a bunch of projects out there like PyUp and Safety and others that will publish and scan for advisories.


00:29:45.000 --> 00:29:54.000
There's also the PyPA advisory database for packages that we know have some problems with them.


00:29:54.000 --> 00:30:01.000
So that way, you can use other tools to audit what you have installed to see if you have something smelly.


00:30:01.000 --> 00:30:18.000
But we are thinking about what it would look like to add this release and these files of a given project have been published under stringent, more secure methods.


00:30:18.000 --> 00:30:40.000
Yeah, I certainly see that a verified wouldn't prove that the Django devs hadn't, you know, somebody could have taken over their computer and swapped out like twine or poetry or whatever they're using to upload the package and do exactly what they did with Xcode Ghost, basically.


00:30:40.000 --> 00:30:41.000
Right.


00:30:41.000 --> 00:30:43.000
Something equivalent to that.


00:30:44.000 --> 00:30:51.000
So the last part we want to do is like we don't want to give people a false sense of security and say, well, PyPI told me this was okay.


00:30:51.000 --> 00:30:56.000
And then they find out it wasn't because then that looks really bad for us.


00:30:56.000 --> 00:31:09.000
But on the flip side, we are looking at how do we provide mechanisms and measures to publishers to reduce the potential for the situations that you described to happen.


00:31:09.000 --> 00:31:14.000
All right, let me throw some ideas out to you.


00:31:14.000 --> 00:31:15.000
And tell me what I think.


00:31:15.000 --> 00:31:31.000
So as I think about this, especially when the very first news a couple years ago, I can't remember exactly the time frame, but not very long ago, the first malicious PyPI package, you know, npm had been getting whacked on for a while because JavaScript, YOLO.


00:31:31.000 --> 00:31:37.000
But, you know, when it came to PyPI, I was like, okay, this seems to be a little more serious, a little more pervasive.


00:31:37.000 --> 00:31:44.000
Right. And they were often typo squatting type of issues.


00:31:44.000 --> 00:31:49.000
Or people would introduce some package and say, here's a cool thing.


00:31:49.000 --> 00:31:52.000
You should check it out. And it's really a virus or one of those types of things.


00:31:52.000 --> 00:32:13.000
So one of my thoughts, one of the metrics I would have liked or maybe in the future will like to apply to my local Python environment is don't let me install packages that are too new or don't let me install packages that have too few downloads.


00:32:13.000 --> 00:32:15.000
And give me a mechanism to say that.


00:32:15.000 --> 00:32:21.000
Like, I don't want to ever say pip install something and that something has not existed on PyPI for less than a week.


00:32:21.000 --> 00:32:28.000
I don't ever want to be able to say pip install something and that thing has less than a thousand or ten thousand whatever downloads.


00:32:28.000 --> 00:32:32.000
Unless, and they could say, nope, you can't install that. It breaks your rules.


00:32:32.000 --> 00:32:34.000
You could say, okay, no, I actually uploaded this.


00:32:34.000 --> 00:32:40.000
I really need to, you know, you could do like a pip install force, --force or some kind of override.


00:32:40.000 --> 00:32:45.000
But by default, if I could just say, you know, it has to have at least 5,000 downloads, or I just don't want it.


00:32:45.000 --> 00:32:53.000
I feel like at that point somebody would have discovered, oh, you know what is actually using 100% CPU usage and crypto mining or whatever it happens to be doing.


00:32:53.000 --> 00:32:57.000
Like, I don't want to be the first guinea pig in the world to discover this.


00:32:57.000 --> 00:32:59.000
What do you think about this idea?


00:32:59.000 --> 00:33:03.000
So the download count one is always an interesting one, right?


00:33:03.000 --> 00:33:04.000
It's a topic that comes up a lot.


00:33:04.000 --> 00:33:13.000
And like I can tell you personally from experience that writing a little loop to increase download counts is super easy.


00:33:13.000 --> 00:33:14.000
Right.


00:33:14.000 --> 00:33:15.000
Interesting.


00:33:15.000 --> 00:33:16.000
Okay.


00:33:16.000 --> 00:33:18.000
Like write a wild true pip install something.


00:33:18.000 --> 00:33:19.000
Sure, sure, sure, sure.


00:33:19.000 --> 00:33:21.000
Like you'll drive up download counts.


00:33:21.000 --> 00:33:23.000
It will be meaningless in the grand scheme of things.


00:33:23.000 --> 00:33:28.000
So you could say, well, maybe make it like it's got to have, you know, 1,000 distinct IP addresses.


00:33:28.000 --> 00:33:30.000
But then, you know, if you own a botnet, then you're good to go.


00:33:30.000 --> 00:33:31.000
Yeah.


00:33:31.000 --> 00:33:32.000
Right.


00:33:32.000 --> 00:33:38.000
So this becomes like the cat and mouse game of like, all right, well, what is something that is good?


00:33:38.000 --> 00:33:48.000
Today we have a mechanism where we don't advertise new packages that have been there for, I think, under a week to any kind of crawlers.


00:33:48.000 --> 00:33:50.000
So any search engine crawlers.


00:33:50.000 --> 00:34:01.000
So if you were going to like Google for Python Django, and it was a brand new package, you wouldn't find it via Google because we wouldn't advertise that for indexing yet.


00:34:01.000 --> 00:34:02.000
Right.


00:34:02.000 --> 00:34:04.000
But after a week, like we do.


00:34:04.000 --> 00:34:13.000
So that's one method that we have for preventing some of these like newer packages from getting widespread visibility.


00:34:13.000 --> 00:34:16.000
Because, you know, everything is a web page.


00:34:16.000 --> 00:34:18.000
They are all subject to search engine optimization.


00:34:18.000 --> 00:34:24.000
Somebody could craft their readme to, you know, be the best hit on Google.


00:34:24.000 --> 00:34:26.000
And therefore, they'll show up first.


00:34:26.000 --> 00:34:29.000
And with all this crazy AI stuff, it's only getting easier.


00:34:29.000 --> 00:34:35.000
Hey, chat, GPT, I would like to create a page that is like the Django PyPI page.


00:34:35.000 --> 00:34:37.000
I want it to rank highly for this.


00:34:37.000 --> 00:34:38.000
Yeah.


00:34:38.000 --> 00:34:39.000
Yeah.


00:34:39.000 --> 00:34:40.000
Okay.


00:34:40.000 --> 00:34:41.000
Don't give anybody any new ideas.


00:34:41.000 --> 00:34:42.000
All right.


00:34:42.000 --> 00:34:44.000
We're going to delete this section.


00:34:44.000 --> 00:34:48.000
No, but it's a legitimate question.


00:34:48.000 --> 00:35:17.000
And something that we are talking about internally of like how do we put packages that are brand new either from some heuristic of a brand new user or a brand new version or differs enough from the previous versions and kind of put those in kind of a holding or a timeout zone to let our security research partners who are really excellent at like just listening to the package feeds and going after and just running all their analysis on them.


00:35:17.000 --> 00:35:19.000
To give them first crack.


00:35:19.000 --> 00:35:20.000
Right.


00:35:20.000 --> 00:35:34.000
If they see, okay, out of these hundred thousand packages that were published in the last 24 hours, you know, 1% need to be addressed or reviewed by a human, they can raise those red flags.


00:35:34.000 --> 00:35:47.000
And then we can kind of apply the administrative action that is necessary in order to keep the users from getting too much of the bad stuff on their computers.


00:35:47.000 --> 00:35:50.000
Yeah.


00:35:50.000 --> 00:36:04.000
What about, I don't know, what about some kind of whitelist or, you know, a check back to like sneak or one of these other companies that you kind of referenced there just a moment ago?


00:36:04.000 --> 00:36:05.000
Yeah.


00:36:05.000 --> 00:36:08.000
I mean, so having like published allow lists, right?


00:36:08.000 --> 00:36:20.000
These are very prevalent in large corporations that have very strong security policies and they have teams of folks that will maintain internal mirrors of a package index.


00:36:20.000 --> 00:36:24.000
So they will disallow any pip install of anything.


00:36:24.000 --> 00:36:25.000
Right.


00:36:25.000 --> 00:36:27.000
Unless you're using their package index.


00:36:27.000 --> 00:36:41.000
And I think that is another tool in the security toolbox to have people who are that like security focused to say, we will only allow in the things that we have already tested to be true.


00:36:41.000 --> 00:36:43.000
We vetted them.


00:36:43.000 --> 00:36:47.000
And those kind of match our heuristics.


00:36:47.000 --> 00:36:56.000
If you scroll down a little bit on the Django page, almost every sidebar to every one of these has these statistics.


00:36:56.000 --> 00:37:01.000
This particular one shows GitHub statistics because this package has a GitHub URL.


00:37:01.000 --> 00:37:06.000
But there's also libraries.io, which is not affiliated with PyPI.org.


00:37:06.000 --> 00:37:09.000
They're just a really great service.


00:37:09.000 --> 00:37:24.000
And you can search for packages of any shape, kind of any ecosystem, but they have a really good kind of ranking system that, again, if it works for you, the crux of it, don't install garbage off the Internet.


00:37:24.000 --> 00:37:25.000
Right.


00:37:25.000 --> 00:37:26.000
Check out what you're doing.


00:37:26.000 --> 00:37:31.000
But by using something like libraries, which I don't know why that didn't load.


00:37:31.000 --> 00:37:34.000
Probably was just getting a virus.


00:37:34.000 --> 00:37:35.000
I probably misspelled it.


00:37:35.000 --> 00:37:36.000
Oh, yeah.


00:37:36.000 --> 00:37:37.000
Just kidding.


00:37:37.000 --> 00:37:39.000
Yeah.


00:37:39.000 --> 00:37:52.000
But they offer a nice set of stats around a given package so you can try and be a little bit more informed on your own.


00:37:52.000 --> 00:38:04.000
The challenge there remains that nothing is going to tell you on libraries.io or PyPI if somebody has uploaded malicious software and this is a bad one.


00:38:04.000 --> 00:38:07.000
The best we can do is once we know about it, we handle it.


00:38:07.000 --> 00:38:09.000
Yeah.


00:38:09.000 --> 00:38:15.000
I feel like PyPI has been pretty on top of it.


00:38:15.000 --> 00:38:17.000
I mean, we try.


00:38:17.000 --> 00:38:31.000
I published a blog earlier today where I pulled together a lot of analytics and stats from our inbound malware reporters, and it's looking pretty good.


00:38:31.000 --> 00:38:38.000
We handle over 80% of inbound reports in under 60 minutes.


00:38:38.000 --> 00:38:52.000
And I go into the article about the whys and wherefores, the timeliness matters, and the response time, because the longer something is out there, the worse it can contagion to other folks.


00:38:52.000 --> 00:38:57.000
So we try and do as quick as possible, often under five to ten minutes.


00:38:57.000 --> 00:39:03.000
But we also have to do some investigation and confirm that the report is accurate.


00:39:03.000 --> 00:39:05.000
We don't want false positives.


00:39:05.000 --> 00:39:11.000
Most of our researchers don't give us false positives, so shout out to all those folk.


00:39:11.000 --> 00:39:18.000
But it's hard and time consuming.


00:39:18.000 --> 00:39:38.000
I remember one of the more recent IPI supply chain issues where somebody uploaded something bad was attributed to all these different ATP and hacking groups have cutesy names like the SolarWinds was by something bear.


00:39:38.000 --> 00:39:39.000
Hold on.


00:39:39.000 --> 00:39:40.000
Which bear?


00:39:40.000 --> 00:39:41.000
Cozy Bear.


00:39:41.000 --> 00:39:47.000
That's what kind of bear it was, which is really Russia state actor hacking.


00:39:47.000 --> 00:39:50.000
And one of the IPI ones was North Korea.


00:39:50.000 --> 00:39:58.000
And I think they were doing crypto mining on computers, which seems like a real big waste of I have access to the server in a bank.


00:39:58.000 --> 00:40:01.000
But anyway, it works for them.


00:40:01.000 --> 00:40:03.000
It works for them.


00:40:03.000 --> 00:40:18.000
But the reason I bring this up is you all have a serious challenge in that if you're up against state actors from a security perspective, that's not just script kiddies or some weird automation.


00:40:18.000 --> 00:40:22.000
You guys got to be on top of your game, right?


00:40:22.000 --> 00:40:23.000
Yeah.


00:40:23.000 --> 00:40:42.000
I mean, this is, again, where I think relying on our ecosystem of security partners is so important because they will corroborate intelligence that they've garnered from other ecosystems that are beyond IPI and be able to identify these kinds of actors.


00:40:42.000 --> 00:40:46.000
Me, I see kind of just a slice of what the universe has.


00:40:46.000 --> 00:40:54.000
They're going to see a different slice, but broader in spectrum and not necessarily as focused on one particular ecosystem.


00:40:54.000 --> 00:41:01.000
So working together, we can kind of do the best that we can for all the users out there.


00:41:01.000 --> 00:41:03.000
Excellent.


00:41:03.000 --> 00:41:24.000
So we talked about typosquatting, which is serious but also kind of the silliest, kind of not that big of a deal because recommendations could be like actually use a requirements management system rather than just every time you create a new environment, just type pip install x, y, and z.


00:41:24.000 --> 00:41:33.000
The chances you might fat finger that versus pip install dash r, requirements.txt, or something with poetry or whatever, right?


00:41:33.000 --> 00:41:39.000
So that helps a lot, although it's not perfect.


00:41:39.000 --> 00:41:47.000
The other one is more the Xcode Go style, like what if somebody were to take over one of the other systems?


00:41:47.000 --> 00:41:55.000
And you all had over here, you have a new two factor requirement for pipe.


00:41:55.000 --> 00:41:57.000
Yeah, you want to talk about that?


00:41:57.000 --> 00:42:17.000
Yeah, absolutely. This also was covered on an earlier podcast of Talk Python where I think in 2022, we had announced that we were starting to ratchet down the amount of potential.


00:42:17.000 --> 00:42:18.000
I think you got the wrong link there.


00:42:18.000 --> 00:42:20.000
I do have the wrong link.


00:42:20.000 --> 00:42:22.000
It's 377.


00:42:22.000 --> 00:42:23.000
It's Dustin.


00:42:23.000 --> 00:42:24.000
Yeah.


00:42:24.000 --> 00:42:25.000
Dustin Ingram.


00:42:25.000 --> 00:42:27.000
I pulled it up. I put the other one twice.


00:42:27.000 --> 00:42:37.000
So, you know, the 2FA story is largely, again, we talked about there's about 740,000 users, right?


00:42:37.000 --> 00:42:40.000
These are the publishers of packages, right?


00:42:40.000 --> 00:42:44.000
So if in our use case, we talked about Django devs, right?


00:42:44.000 --> 00:42:46.000
And I'm sorry to pick on Django.


00:42:46.000 --> 00:42:48.000
They're just the one that's up there.


00:42:48.000 --> 00:42:58.000
But if one of the Django devs was using a classic problem, which is an email expiry or a domain expiry attack.


00:42:58.000 --> 00:43:05.000
So let's say I'm a Django admin maintainer and I use MikeDemand.com as my email address, right?


00:43:05.000 --> 00:43:08.000
Because we don't want to use Gmail.


00:43:08.000 --> 00:43:12.000
We don't want to use the .me or Outlook.


00:43:12.000 --> 00:43:14.000
I'm a good citizen of the internet.


00:43:14.000 --> 00:43:16.000
So I got my own domain.


00:43:16.000 --> 00:43:18.000
I'm just having a paying attention, right?


00:43:18.000 --> 00:43:20.000
I'm paying attention this year.


00:43:20.000 --> 00:43:23.000
Right. And then let's say I let it expire.


00:43:23.000 --> 00:43:25.000
Whoops. You know, like that happens.


00:43:25.000 --> 00:43:27.000
People forget to pay their bills, right?


00:43:27.000 --> 00:43:29.000
Or your credit card gets stolen and canceled.


00:43:29.000 --> 00:43:31.000
You forget to renew it there.


00:43:31.000 --> 00:43:33.000
And then the other thing goes to spam.


00:43:33.000 --> 00:43:36.000
It could actually be super easy that that happens.


00:43:36.000 --> 00:43:38.000
And it happens all the time, right?


00:43:38.000 --> 00:43:44.000
Like there are numerous domains that I've registered over the year that I was like, yeah, I don't need that anymore.


00:43:44.000 --> 00:43:49.000
Hopefully I have never used anything from that domain to sign up for anything securely.


00:43:49.000 --> 00:43:51.000
So, you know, that's there.


00:43:51.000 --> 00:44:00.000
But then someone else can come along and register MikeDemand.com, set up an email server, request a password reset, get that email.


00:44:00.000 --> 00:44:04.000
And now they can do anything I could have done before.


00:44:04.000 --> 00:44:10.000
With 2FA, that entire set of problems goes away.


00:44:10.000 --> 00:44:12.000
And we're not even talking about like phishing.


00:44:12.000 --> 00:44:26.000
If somebody phishes my password or if they use the same -- if I made the mistake and used the same password on two websites and one website stored it in securely and they popped that in a breach and, you know, now they have my username and password.


00:44:26.000 --> 00:44:28.000
2FA just solves --


00:44:28.000 --> 00:44:30.000
Do you discourage that using the same username and password?


00:44:30.000 --> 00:44:31.000
I absolutely --


00:44:31.000 --> 00:44:34.000
I find it very inconvenient to have a separate password.


00:44:34.000 --> 00:44:35.000
I just use the letter A.


00:44:35.000 --> 00:44:36.000
Yeah.


00:44:36.000 --> 00:44:39.000
Well, that's a choice, right?


00:44:39.000 --> 00:44:41.000
It's a bad choice.


00:44:41.000 --> 00:44:51.000
No, like the amount of tooling out there today, both free and paid for password management is just so pervasive.


00:44:51.000 --> 00:44:54.000
It's almost like irresponsible to not use one.


00:44:54.000 --> 00:44:55.000
I agree.


00:44:55.000 --> 00:44:56.000
I 100% agree.


00:44:56.000 --> 00:44:57.000
Yeah.


00:44:57.000 --> 00:44:59.000
I use one password, I think.


00:44:59.000 --> 00:45:01.000
I don't know if it will tell me how many I have in here.


00:45:01.000 --> 00:45:13.000
But I think it's coming up on like 1,500 -- not quite, just under 1,000 different distinct passwords and accounts.


00:45:13.000 --> 00:45:16.000
But, you know, a lot of people don't want to pay for it.


00:45:16.000 --> 00:45:17.000
Bitwarden.


00:45:17.000 --> 00:45:18.000
Bitwarden is fantastic.


00:45:18.000 --> 00:45:19.000
It's open source.


00:45:19.000 --> 00:45:20.000
I don't know if you got a recommendation.


00:45:20.000 --> 00:45:22.000
But you're right, it's irresponsible.


00:45:22.000 --> 00:45:23.000
I mean, I'm a one password fan, right?


00:45:23.000 --> 00:45:24.000
Yeah.


00:45:24.000 --> 00:45:25.000
It's just a great tool.


00:45:26.000 --> 00:45:29.000
I used it back when it was like a single thing.


00:45:29.000 --> 00:45:33.000
And, you know, I used it as an organization account, right?


00:45:33.000 --> 00:45:39.000
Like I was an admin for our org and managing that lifecycle was pretty sweet.


00:45:39.000 --> 00:45:41.000
And then it's like, okay, we have this as an organization.


00:45:41.000 --> 00:45:43.000
We have over 400 employees.


00:45:43.000 --> 00:45:45.000
Why doesn't everyone have this right now?


00:45:45.000 --> 00:45:48.000
So, you know, it became a good rollout.


00:45:48.000 --> 00:45:58.000
But having a second factor, a 2FA or a multi-factor MFA, I think is this notion of something you have versus something you know.


00:45:58.000 --> 00:46:07.000
So let's say that even by using a password manager, you don't know that password anymore, right?


00:46:07.000 --> 00:46:08.000
Like you don't remember it.


00:46:08.000 --> 00:46:09.000
But let's say you do, right?


00:46:09.000 --> 00:46:13.000
Like let's say somebody gets your entire vault of passwords, right?


00:46:13.000 --> 00:46:29.000
They still don't have this second factor, which is often a time-based one-time password or a web authentication device, which could be a hardware device or a browser fingerprint.


00:46:29.000 --> 00:46:31.000
Like they don't have that, right?


00:46:31.000 --> 00:46:40.000
So it's a defense in depth kind of problem that is solving where it's like you need to have two things, right?


00:46:40.000 --> 00:46:42.000
In order to get through this door.


00:46:42.000 --> 00:46:46.000
And if you only have one, that's not good enough.


00:46:46.000 --> 00:47:13.000
And using that capability and having that ability on PyPI user management has enabled us to roll out a higher grade of security for the packages and maintainers of those packages by attesting that, well, we know that this maintainer or this publisher of this package has already secured themselves.


00:47:13.000 --> 00:47:16.000
So against these kinds of attacks.


00:47:16.000 --> 00:47:18.000
Yeah.


00:47:18.000 --> 00:47:20.000
I can just hear the voices.


00:47:20.000 --> 00:47:23.000
In fact, they don't come through an audio form.


00:47:23.000 --> 00:47:24.000
They come in email.


00:47:24.000 --> 00:47:29.000
Like, you know, on that last episode, sometimes they come through on the artist formerly known as Twitter.


00:47:29.000 --> 00:47:31.000
Sometimes they come through an email.


00:47:31.000 --> 00:47:35.000
But like, you know, Michael, you said that two-factor will help.


00:47:35.000 --> 00:47:38.000
You realize you don't seem to realize.


00:47:38.000 --> 00:47:39.000
I'm saying I realize.


00:47:39.000 --> 00:47:40.000
So I don't get this email.


00:47:40.000 --> 00:47:41.000
Please don't email me.


00:47:41.000 --> 00:47:44.000
That this doesn't stop phishing.


00:47:44.000 --> 00:47:45.000
Like, people could still phish you.


00:47:45.000 --> 00:47:46.000
You could go in.


00:47:46.000 --> 00:47:47.000
They could ask for your username and password.


00:47:47.000 --> 00:47:50.000
Then they'll ask for your time-based authentication.


00:47:50.000 --> 00:47:51.000
And then they're in.


00:47:51.000 --> 00:47:53.000
Yes, that's true.


00:47:53.000 --> 00:47:55.000
But it stops some things.


00:47:55.000 --> 00:48:06.000
And stopping some things rather than going, well, it's not good enough, so I'll do nothing, is certainly not a responsible way to go, I think.


00:48:06.000 --> 00:48:12.000
I mean, it's kind of like making the argument that if nothing is perfect, don't do anything at all.


00:48:12.000 --> 00:48:13.000
Yes, exactly.


00:48:13.000 --> 00:48:14.000
Right.


00:48:14.000 --> 00:48:16.000
And it's like, that's a fallacy, right?


00:48:16.000 --> 00:48:19.000
Like, if you're going to die, don't get out of bed, right?


00:48:19.000 --> 00:48:20.000
Like, no.


00:48:20.000 --> 00:48:23.000
Like, we get out of bed, we go to work, we do our things, right?


00:48:23.000 --> 00:48:27.000
We ultimately, as sad as it is, right, we have an end date.


00:48:27.000 --> 00:48:29.000
We hopefully don't know what that is.


00:48:29.000 --> 00:48:32.000
But like, do the best you can while you can, right?


00:48:32.000 --> 00:48:38.000
Like, that's where I come to from, like, this is the best we know, right?


00:48:38.000 --> 00:48:42.000
Will there be something new and exciting tomorrow that is even better?


00:48:42.000 --> 00:48:43.000
Maybe.


00:48:43.000 --> 00:48:48.000
But until then, let's do the thing that we know to be the best that we can do right now.


00:48:48.000 --> 00:48:49.000
Right.


00:48:49.000 --> 00:48:50.000
Maybe PASKYs will be awesome.


00:48:50.000 --> 00:48:52.000
I don't know about that.


00:48:52.000 --> 00:48:59.000
But, for example, you know, from a phishing perspective, things like 1Password and Bitwarden have plugins for your browsers,


00:48:59.000 --> 00:49:03.000
and they will suggest to autofill on the right domains.


00:49:03.000 --> 00:49:13.000
But if you're on pypi.io instead of ipi.org or, you know, whatever, right, if they're on some kind of phishing domain,


00:49:13.000 --> 00:49:16.000
they will not suggest autofill.


00:49:16.000 --> 00:49:21.000
And if you find yourself going to your password manager and going, "God, why does this not work?


00:49:21.000 --> 00:49:23.000
Let me just copy this over."


00:49:23.000 --> 00:49:24.000
Stop.


00:49:24.000 --> 00:49:33.000
Figure out why it's not working really, really, really well before you somehow subvert this broken extension that won't autofill, right?


00:49:33.000 --> 00:49:41.000
So there are ways to limit phishing through these mechanisms, even if they're not perfect.


00:49:41.000 --> 00:49:42.000
Exactly.


00:49:42.000 --> 00:49:46.000
I think, like, I said this before, but, like, I'll reiterate it.


00:49:46.000 --> 00:49:50.000
You, the human, are the best defender, right?


00:49:50.000 --> 00:49:53.000
Like, use your logic, use your sense.


00:49:53.000 --> 00:49:57.000
Like, don't just click at things mindlessly, right?


00:49:57.000 --> 00:49:58.000
Take a moment.


00:49:58.000 --> 00:49:59.000
Take a look.


00:49:59.000 --> 00:50:03.000
See, that error message, that looks weird, right?


00:50:03.000 --> 00:50:04.000
Why does that look weird?


00:50:04.000 --> 00:50:06.000
The domain I'm on looks a little odd.


00:50:06.000 --> 00:50:10.000
The little browser lock symbol isn't locked.


00:50:10.000 --> 00:50:11.000
Why is that?


00:50:11.000 --> 00:50:13.000
Take a moment.


00:50:13.000 --> 00:50:14.000
Yeah.


00:50:14.000 --> 00:50:16.000
Notepad.exe wants to act as a server.


00:50:16.000 --> 00:50:17.000
Yes, I want to load it.


00:50:17.000 --> 00:50:18.000
Come on, just let it.


00:50:18.000 --> 00:50:21.000
I got to -- yeah.


00:50:21.000 --> 00:50:29.000
The reason -- I think the news around the 2FA for PyPI.org is not that it exists, but that it's required now.


00:50:29.000 --> 00:50:32.000
I think that's what's different since I spoke with Dustin.


00:50:32.000 --> 00:50:41.000
Yeah, so we've been on a path, and as you've got this blog post open, we've been on a path of, like, starting with the carrot, right?


00:50:41.000 --> 00:50:54.000
We want to, like, provide as many people in the packaging ecosystem all the incentive, all the time, all the kind of expectation that they could have in order to set this up voluntarily, right?


00:50:54.000 --> 00:51:05.000
Like, there was even, you know, a wonderful giveaway of hardware security keys that, like, Google sponsored, which is excellent.


00:51:05.000 --> 00:51:07.000
That doesn't mean you need a physical security key.


00:51:07.000 --> 00:51:08.000
You can use them.


00:51:08.000 --> 00:51:12.000
You can use software security keys, Google Authenticator, or any other tool.


00:51:12.000 --> 00:51:14.000
Duo Labs has a nice one.


00:51:14.000 --> 00:51:23.000
But, like, anything in order to kind of move the bar on this 2FA engagement.


00:51:23.000 --> 00:51:30.000
And we've seen some decent adoption, and it's like, okay, well, now let's set a timeline, right?


00:51:30.000 --> 00:51:35.000
And this post by Donald kind of starts the clock on that.


00:51:35.000 --> 00:51:44.000
And we are basically drawing a line in the sand that's saying at the end of 2023, if you want to publish a new package, like, that's it.


00:51:44.000 --> 00:51:47.000
You need to have 2FA.


00:51:47.000 --> 00:51:55.000
We've started on that process by requiring 2FA for new users, right?


00:51:55.000 --> 00:51:59.000
So if you registered today, you need to set up 2FA.


00:51:59.000 --> 00:52:09.000
Like, if you've been around for a while and you don't have it yet, we'll still allow you to upload, but we'll send you a notice that's saying here's what's going to happen at the end of this year.


00:52:09.000 --> 00:52:27.000
And we've slowly been kind of ratcheting down the areas at which 2FA is not required with the intent on basically January -- December 31st, January 1st, 2024, enabling the requirement on all accounts.


00:52:27.000 --> 00:52:38.000
So that way we can kind of walk away from the problem of, well, I guess one of the Django maintainers got phished, and that's why we had a big issue in the ecosystem.


00:52:38.000 --> 00:52:41.000
Like, I don't want that to be the problem.


00:52:41.000 --> 00:52:46.000
And again, apologies to Django. Y'all are awesome.


00:52:46.000 --> 00:52:49.000
It's because they're so popular and loved that you pick on them, I can tell.


00:52:49.000 --> 00:52:51.000
Yes, yes.


00:52:51.000 --> 00:53:01.000
Yeah, I mean, again, this doesn't completely solve all phishing attempts, but it certainly is another layer of defense.


00:53:01.000 --> 00:53:04.000
So I think it's certainly worth doing.


00:53:04.000 --> 00:53:17.000
Now, there was a bit of a pushback. I think somebody even rage quit their package temporarily and then said, "Oh, no, I want it back," on PyPI when this came out, as if it was a big deal.


00:53:17.000 --> 00:53:23.000
And this blog post was from May. The deadline is end of 2023.


00:53:23.000 --> 00:53:28.000
In between those two times, GitHub just comes out and goes, "Everyone gets 2FA right now. I don't care."


00:53:28.000 --> 00:53:42.000
And it's such a broader, more impactful thing in terms of the, you know, many people use Python who are not creating packages, but almost everyone who uses Python is also in some way using GitHub.


00:53:42.000 --> 00:53:49.000
And so it just touches so much more of the ecosystem. And people are like, "Oh, okay. I don't know why there was so much blowback in one and not the other."


00:53:49.000 --> 00:54:02.000
I mean, it's an odd thing, right? Because on the one hand, right, PyPI or the index itself, right, has been around for about 20 years, right?


00:54:02.000 --> 00:54:19.000
This is a long-lived concept in the Python ecosystem of having a place where people can publish software freely, you know, no charge, and others can install that software.


00:54:19.000 --> 00:54:24.000
This requirement is a shift, right?


00:54:24.000 --> 00:54:25.000
Yeah.


00:54:25.000 --> 00:54:32.000
And a lot of folks are like, "Well, what else is going to happen?" It's like, "Well, probably nothing." Right?


00:54:32.000 --> 00:54:40.000
I don't see us talking about other requirements or enforcements unless they're necessary. Right?


00:54:40.000 --> 00:54:58.000
Like, again, I can't predict the future. And if somebody says that like passkeys are the best way and TOTP is broken and proves it, and the industry-wide decides, "Oh, wow, this is not a good idea. Let's do this other thing," then maybe we'll do that.


00:54:58.000 --> 00:55:03.000
But until then, like, this is the best we've got.


00:55:03.000 --> 00:55:13.000
The requirement for 2FA is even on the OWASP top 10 list of why you should be doing this.


00:55:13.000 --> 00:55:21.000
And it's like, this is what governments use, companies use, and auditors use to say, "We are adhering to the best practices."


00:55:21.000 --> 00:55:31.000
Because if you had a security vulnerability reported to your company because you weren't using 2FA, auditors will say, "Well, why not?" It's in the top 10 list.


00:55:31.000 --> 00:55:35.000
Right. It's like the SQL injection of yesteryear.


00:55:35.000 --> 00:55:47.000
Yeah. Just do this. Right? Just solve this class of problem. You will have other problems. We all have problems. But solve the ones that we know are relatively easy to solve.


00:55:47.000 --> 00:55:50.000
Yeah, absolutely. Good advice.


00:55:50.000 --> 00:56:03.000
I feel like when the two-factor software problem, people are like, "That's not good enough. These YubiKeys and stuff are too tricky." We're just going to go back to SMS.


00:56:03.000 --> 00:56:11.000
I cannot believe that my bank will let me use 2FA. They forced me to use SMS.


00:56:11.000 --> 00:56:13.000
They also have password...


00:56:13.000 --> 00:56:14.000
You'll want to check out for different banks.


00:56:14.000 --> 00:56:25.000
Dude. Well, it's like one of the top four banks in the US. It's nuts. They also have limits on the length, not lower bounds, upper bounds on the length of the password.


00:56:25.000 --> 00:56:41.000
I understand why. Upper bounds, I understand why. But it usually boils down to database design and the cost of doing a database migration.


00:56:41.000 --> 00:56:44.000
I hear you. I think it's like 12 or something. It's very short.


00:56:44.000 --> 00:56:46.000
That's short. That's way too short.


00:56:46.000 --> 00:56:51.000
But here's the thing. It doesn't matter if you have one letter or 100 letters. The hash is still the same length.


00:56:51.000 --> 00:56:53.000
Depending on how you're hashing it.


00:56:53.000 --> 00:57:04.000
Yeah. But they may well not be stored. If they're not stored in the hash, it makes me extra nervous. Anyway, onward. I'm glad they got the SMS 2FA backing it up.


00:57:04.000 --> 00:57:18.000
Yeah. Another thing that I do want to plug on the security spectrum and to address the question around verifiable releases is something that we launched earlier this year, which is called Trusted Publishers.


00:57:18.000 --> 00:57:19.000
That's right.


00:57:19.000 --> 00:57:28.000
Right. And that's alluded to or linked to in the... There we go. On our docs.pypi.org of what it is.


00:57:28.000 --> 00:57:30.000
Links in the show notes. People can check it out.


00:57:30.000 --> 00:57:43.000
Yeah. Where we leverage an open standard called OpenID Connect. And today we only implement this with one publishing tool called GitHub Actions.


00:57:43.000 --> 00:57:52.000
Where the service GitHub Actions is now delegated to be a trusted publisher for your project.


00:57:52.000 --> 00:58:02.000
When you set this up, you have to opt into this completely. We didn't do this for you. But you can now opt in to say GitHub Actions is allowed to publish my project.


00:58:02.000 --> 00:58:07.000
And then you can say, you know what? None of my humans are allowed to publish the project.


00:58:07.000 --> 00:58:18.000
The computer that is getting a short-lived token for like five minutes or ten minutes, whatever it is, is allowed to publish this package and no one else is.


00:58:18.000 --> 00:58:30.000
And that's how we can start to build the levels of attestation and kind of the software supply chain security to say, I know where the source code is.


00:58:30.000 --> 00:58:41.000
I know the source code that built it. I know the builder who built it. I know the builder who published it. And no one else tampered with it in the interim.


00:58:41.000 --> 00:58:53.000
We're not there to like prove that nobody else tampered, but we are there to say I can now delegate authority to GitHub, GitHub Actions to perform this release for me.


00:58:53.000 --> 00:59:01.000
As opposed to me creating a token in PyPI and giving that token to GitHub Actions. That's how we did it before.


00:59:01.000 --> 00:59:07.000
Right. A long-lived permanent token that you put in plain text somewhere, right?


00:59:07.000 --> 00:59:08.000
Right.


00:59:08.000 --> 00:59:09.000
What could go wrong?


00:59:09.000 --> 00:59:16.000
I mean, usually like an environment variable or a secrets in GitHub Actions, they have pretty good ways of securing data.


00:59:16.000 --> 00:59:18.000
But again, it's long-lived.


00:59:18.000 --> 00:59:24.000
So if anything ever happened over there, if anybody dumped a debug log that they shouldn't have, that token could be there.


00:59:24.000 --> 00:59:40.000
So by using a trusted publisher flow, you can now have your GitHub Actions deployed directly to pypi.org once the artifact is complete and not have to do that token management.


00:59:40.000 --> 00:59:42.000
Yeah, that's great.


00:59:42.000 --> 00:59:45.000
So we're getting short on time, Mike.


00:59:45.000 --> 00:59:54.000
What else do you want people to know about what you all in particular are doing at PyPI and some of the initiatives and maybe how they can help?


00:59:54.000 --> 01:00:02.000
Yeah. So the top of mind for me right now is the malware reporting project that we're engaged in.


01:00:02.000 --> 01:00:16.000
And that's kind of linked to at the very bottom of my blog from today, the Inbound Malware Reporting blog, where we are looking to establish what a kind of machine readable protocol would be to interact with security researchers.


01:00:16.000 --> 01:00:19.000
A few of them have chimed in already on what they think of.


01:00:19.000 --> 01:00:24.000
And we're just kind of building the conversation around what it would look like to report.


01:00:24.000 --> 01:00:25.000
How do you like to report?


01:00:25.000 --> 01:00:41.000
And then we'll proceed with whatever guidance we get there and kind of build out the payloads and stuff like that all the way at the bottom, very bottom.


01:00:41.000 --> 01:00:45.000
All the way at the bottom. There we go.


01:00:45.000 --> 01:01:00.000
And once we have this format in place, we're going to be building out the infrastructure and ecosystem in order to submit those payloads and then figure out how to kind of put packages in timeout while these payloads are being investigated.


01:01:00.000 --> 01:01:08.000
So that way we can continue to provide a secure ecosystem for all users of PyPI.org.


01:01:08.000 --> 01:01:10.000
I think that's great.


01:01:10.000 --> 01:01:22.000
Certainly, these companies that are checking out and just monitoring the flow of packages and scanning them, that's a huge service.


01:01:22.000 --> 01:01:29.000
Is there, there probably is, never will be, like a bug bounty equivalent?


01:01:29.000 --> 01:01:31.000
Is there? I mean, never say never, but...


01:01:31.000 --> 01:01:32.000
Never say never.


01:01:32.000 --> 01:01:52.000
I think from that perspective, it becomes a bit of a challenge because then you could start funneling money through a bug bounty program because we are offering an ability for people to create packages and then saying we're giving you a monetary incentive to report them to us.


01:01:52.000 --> 01:01:56.000
So it's like, well, now we've given you a pipeline for money.


01:01:56.000 --> 01:02:02.000
There's a whole shadow industry of like, you first create it, then you get it popular, then you report it.


01:02:02.000 --> 01:02:04.000
Yeah, yeah, yeah. No, I hear you.


01:02:04.000 --> 01:02:08.000
But, you know, no idea is too farfetched.


01:02:08.000 --> 01:02:12.000
We like talking about ideas and figuring out what makes sense.


01:02:12.000 --> 01:02:17.000
And kind of, again, with a lot of security work is like, okay, well, how can this go wrong?


01:02:17.000 --> 01:02:19.000
How can this fail?


01:02:19.000 --> 01:02:21.000
How can it be gamed?


01:02:21.000 --> 01:02:22.000
Yeah.


01:02:22.000 --> 01:02:23.000
Yeah.


01:02:23.000 --> 01:02:24.000
Absolutely.


01:02:24.000 --> 01:02:34.000
Well, I, for one, feel better that you're putting all your time and energy into focusing on these problems and seeing how we can make PyPI better for everyone.


01:02:34.000 --> 01:02:35.000
Almost everyone.


01:02:35.000 --> 01:02:37.000
Not for everyone.


01:02:37.000 --> 01:02:39.000
For 99.9% of us.


01:02:39.000 --> 01:02:40.000
For most people.


01:02:40.000 --> 01:02:43.000
Just wanting to use it in a solid way to build Python software.


01:02:43.000 --> 01:02:44.000
Right.


01:02:44.000 --> 01:02:45.000
Yeah.


01:02:45.000 --> 01:02:48.000
I mean, that's kind of why I was drawn to it, right?


01:02:48.000 --> 01:02:50.000
Like, to contributing to it.


01:02:50.000 --> 01:03:02.000
It is such a foundational piece of modern day infrastructure that it's important that it be safe, secure, convenient, useful to anybody who wants to use it.


01:03:02.000 --> 01:03:11.000
Because Python itself is such a ubiquitous language across the planet and beyond that, you know, we want to make it the right thing.


01:03:11.000 --> 01:03:12.000
Yeah.


01:03:12.000 --> 01:03:14.000
Surprisingly, every time you say that statement, it's more true.


01:03:14.000 --> 01:03:21.000
Like, that graph continues to go up in surprising ways.


01:03:21.000 --> 01:03:22.000
All right.


01:03:22.000 --> 01:03:25.000
Before we get out of here, I'll ask you one of the final questions.


01:03:25.000 --> 01:03:31.000
Notable PyPI package, not malware-ridden, but a good, useful one.


01:03:31.000 --> 01:03:32.000
What do you recommend?


01:03:32.000 --> 01:03:34.000
Anything you come across that's awesome lately?


01:03:34.000 --> 01:03:35.000
Yeah.


01:03:35.000 --> 01:03:37.000
So, I'm a huge fan of pytest.


01:03:37.000 --> 01:03:40.000
And I know that, you know, you're big pals with Brian Okken.


01:03:40.000 --> 01:03:41.000
Hey, Brian.


01:03:41.000 --> 01:03:43.000
Who talks a lot about testing.


01:03:43.000 --> 01:03:48.000
And pytest plugins are a wonderful extension to pytest.


01:03:48.000 --> 01:03:49.000
Yes.


01:03:49.000 --> 01:03:52.000
And there's so many of them out there.


01:03:52.000 --> 01:03:56.000
And there's even, like, an awesome pytest aggregator of these.


01:03:56.000 --> 01:04:01.000
And I think I have one on here, which is called pytest Socket.


01:04:01.000 --> 01:04:02.000
Nice.


01:04:02.000 --> 01:04:06.000
Which I, you know, I maintain till today.


01:04:06.000 --> 01:04:10.000
But the one that I want to point out is one that I recently learned about,


01:04:10.000 --> 01:04:12.000
which is called ICDiff.


01:04:12.000 --> 01:04:15.000
I, the letter C, diff.


01:04:15.000 --> 01:04:17.000
I don't even know if it's on this.


01:04:17.000 --> 01:04:19.000
Probably not, right?


01:04:19.000 --> 01:04:21.000
Ah, I gotcha.


01:04:21.000 --> 01:04:23.000
Yeah.


01:04:23.000 --> 01:04:24.000
There it is.


01:04:24.000 --> 01:04:26.000
So, that's not the pytest package.


01:04:26.000 --> 01:04:31.000
But there's an extension, pytest ICDiff.


01:04:31.000 --> 01:04:32.000
We'll get there.


01:04:32.000 --> 01:04:33.000
There we go.


01:04:33.000 --> 01:04:35.000
So, this uses that other one.


01:04:35.000 --> 01:04:40.000
But the notion here is a lot of times you get big pytest output if you're


01:04:40.000 --> 01:04:44.000
comparing, you know, dictionaries, lists, or stuff that has lots of data.


01:04:44.000 --> 01:04:49.000
Sometimes detecting the difference is very hard in the terminal.


01:04:49.000 --> 01:04:54.000
And the pytest ICDiff extension will help highlight a lot of these with


01:04:54.000 --> 01:04:59.000
colors, with spacing, which makes finding the problem much easier.


01:04:59.000 --> 01:05:00.000
Yeah.


01:05:00.000 --> 01:05:01.000
That seems super helpful.


01:05:01.000 --> 01:05:04.000
Right there in the -- it does a partial character by character.


01:05:04.000 --> 01:05:07.000
A partial character by character diff and line by line diff with different


01:05:07.000 --> 01:05:08.000
colors.


01:05:08.000 --> 01:05:09.000
Yeah.


01:05:09.000 --> 01:05:10.000
And here's what we expected.


01:05:10.000 --> 01:05:11.000
Here's what you got.


01:05:11.000 --> 01:05:12.000
Yep.


01:05:12.000 --> 01:05:13.000
Yeah.


01:05:13.000 --> 01:05:18.000
Also, I'm learning that there's even more madness to the pretty print.


01:05:18.000 --> 01:05:21.000
So, it could say from pprint import pprint.


01:05:21.000 --> 01:05:26.000
But there's also apparently a pprintpp with ppi.


01:05:26.000 --> 01:05:27.000
Okay.


01:05:27.000 --> 01:05:28.000
Yeah.


01:05:28.000 --> 01:05:29.000
I don't know.


01:05:29.000 --> 01:05:30.000
There's more things to explore.


01:05:30.000 --> 01:05:33.000
It's always -- it's going to be in one of those 400,000 packages on PyPI.


01:05:33.000 --> 01:05:34.000
It's got to be there.


01:05:34.000 --> 01:05:35.000
It's got to be there.


01:05:35.000 --> 01:05:37.000
And it might be a little different.


01:05:37.000 --> 01:05:42.000
It might be, you know, just enough different to meet this use case that is,


01:05:42.000 --> 01:05:43.000
you know, perfect.


01:05:43.000 --> 01:05:44.000
Yeah.


01:05:44.000 --> 01:05:45.000
Yeah.


01:05:45.000 --> 01:05:46.000
Yeah.


01:05:46.000 --> 01:05:47.000
This is pprint++.


01:05:47.000 --> 01:05:48.000
That's what the pp is like.


01:05:48.000 --> 01:05:49.000
Cpp.


01:05:49.000 --> 01:05:50.000
Okay.


01:05:50.000 --> 01:05:51.000
Got it.


01:05:51.000 --> 01:05:52.000
Notepad++.exe.


01:05:52.000 --> 01:05:54.000
It wants to act as a server.


01:05:54.000 --> 01:05:55.000
All right.


01:05:55.000 --> 01:05:56.000
Let's leave it at that.


01:05:56.000 --> 01:05:57.000
I guess final thing.


01:05:57.000 --> 01:05:59.000
People are excited to hear about this.


01:05:59.000 --> 01:06:00.000
They want to get engaged.


01:06:00.000 --> 01:06:02.000
You know, they have ideas.


01:06:02.000 --> 01:06:03.000
They want to reach out to you.


01:06:03.000 --> 01:06:05.000
What do you say?


01:06:05.000 --> 01:06:11.000
Open an issue for us on, you know, the warehouse repository, if it's relevant


01:06:11.000 --> 01:06:13.000
to the warehouse code base.


01:06:13.000 --> 01:06:17.000
If you need to reach me directly, I'm on GitHub as Mike the man.


01:06:17.000 --> 01:06:22.000
I'm on Mastodon as Mike the man at hackyderm.io.


01:06:22.000 --> 01:06:28.000
Or if all of that fails, go ahead and email me at mike@python.org.


01:06:28.000 --> 01:06:29.000
Awesome.


01:06:29.000 --> 01:06:30.000
Thank you so much.


01:06:30.000 --> 01:06:33.000
Thanks for being on the show and giving us a status report here.


01:06:33.000 --> 01:06:34.000
Absolutely.


01:06:34.000 --> 01:06:35.000
Thanks for having me, Michael.


01:06:35.000 --> 01:06:36.000
Yep.


01:06:36.000 --> 01:06:36.000
See you later.


01:06:36.000 --> 01:06:46.000
[BLANK_AUDIO]

