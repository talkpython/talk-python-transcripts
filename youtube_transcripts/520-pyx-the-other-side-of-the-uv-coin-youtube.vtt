WEBVTT

00:00:01.399 --> 00:00:05.040
Charlie, welcome back to Talk 530. It's awesome to have you here.

00:00:05.819 --> 00:00:09.800
Yeah, I'm glad to be back. It's always a pleasure.

00:00:10.340 --> 00:00:21.380
Yes, it is. I want to say, ty, thank you for you to come back. How about that? Last time you were here, we talked about ty with you and Carl Meyer, right? Yes, yes, yes, yes, yes. And we're hard at

00:00:21.520 --> 00:00:33.360
work. I mean, I get asked basically every day, but we're hard at work working towards the beta release, which will be soon. We have a date for it internally, but we tend to have a policy of not

00:00:34.060 --> 00:00:50.580
sharing deadlines externally. You know what? Let us all take AI, that is Apple intelligence, as a deep lesson in corporate history for not getting out over the skis and not releasing.

00:00:51.100 --> 00:00:53.000
I mean, they were running like suites of ads

00:00:54.079 --> 00:00:56.400
about all the features for Apple intelligence

00:00:56.750 --> 00:00:58.160
before even the features existed.

00:00:58.210 --> 00:01:00.480
And then they had to cancel them, which is a little hard.

00:01:00.840 --> 00:01:02.540
Yeah, I mean-- I'm here for you.

00:01:02.560 --> 00:01:03.100
I'm here with it.

00:01:03.400 --> 00:01:07.660
Yeah, I think for us, it's like we put enough pressure on ourselves to get it out.

00:01:07.900 --> 00:01:11.000
So we don't need the external pressure to get it out.

00:01:11.140 --> 00:01:12.340
But yeah, we do have a deadline set.

00:01:12.480 --> 00:01:13.380
We're working hard towards it.

00:01:14.280 --> 00:01:16.240
A lot of this stuff does happen in GitHub.

00:01:17.220 --> 00:01:20.500
So there's ability to peek over the fence and see what's happening at least, right?

00:01:20.800 --> 00:01:24.720
Yes, yes. If you closely watch our GitHub, nothing is like ever a surprise.

00:01:26.060 --> 00:01:28.980
Except for that it is a surprise. Like Redknot kind of snuck in there.

00:01:29.780 --> 00:01:33.860
That's true. Yeah, that is true. That was the original name for ty. Yeah.

00:01:34.280 --> 00:01:34.700
Yeah, exactly.

00:01:34.760 --> 00:01:36.760
Up until the day that we did your podcast.

00:01:38.560 --> 00:01:38.840
Yes.

00:01:38.940 --> 00:01:42.460
I think that was literally the day that we changed the name for Redknot to ty.

00:01:42.620 --> 00:01:45.040
Yeah, I was scrambling like, oh, I got to change my notes.

00:01:45.100 --> 00:01:47.060
It's like this morning it's renamed.

00:01:47.630 --> 00:01:47.740
Okay.

00:01:48.160 --> 00:01:51.220
I had to change the title in like the YouTube stream and all that.

00:01:51.280 --> 00:01:51.660
That's right.

00:01:52.360 --> 00:01:59.100
Well, it ended up being a good forcing function for us because we were basically like, okay, we have to choose a public name by the time we do the Talk Python show.

00:02:00.820 --> 00:02:01.240
I love it.

00:02:01.700 --> 00:02:03.420
Because we don't want to go on and use the code name.

00:02:04.520 --> 00:02:04.880
Exactly.

00:02:05.000 --> 00:02:06.960
It's just too hard to find and replace an audio.

00:02:07.860 --> 00:02:08.000
Okay.

00:02:08.229 --> 00:02:10.080
Well, that was really cool.

00:02:10.979 --> 00:02:15.780
I think maybe give us the elevator pitch on Charlie Marsh and astrologers.

00:02:15.780 --> 00:02:16.100
Who are you?

00:02:16.100 --> 00:02:20.820
I know most people know you from various ways, but at the same time, there's plenty of listeners

00:02:20.850 --> 00:02:21.220
who don't.

00:02:21.560 --> 00:02:22.180
Yeah, totally.

00:02:22.460 --> 00:02:23.500
So my name's Charlie.

00:02:24.220 --> 00:02:26.020
I'm the founder and CEO of Astral.

00:02:26.820 --> 00:02:30.240
We build what we call high-performance Python tooling.

00:02:30.760 --> 00:02:32.980
So we built a couple of different tools.

00:02:33.240 --> 00:02:36.000
You might be familiar with some or all or none of them.

00:02:36.380 --> 00:02:37.780
The first tool we built was called Ruff.

00:02:37.980 --> 00:02:42.860
It's a Python linter code formatter, and it does a lot of code transformation.

00:02:43.130 --> 00:02:45.180
So it tries to find issues and fix them for you.

00:02:46.540 --> 00:02:49.640
Then we built uv, which is our Python package manager.

00:02:50.340 --> 00:02:53.540
Also manages your Python tool chain, everything like that.

00:02:53.660 --> 00:02:58.860
It's kind of meant to be you install it, and it hopefully takes care of all your packaging and running Python problems.

00:03:01.060 --> 00:03:06.840
We're also building a tool called ty, which Michael just mentioned, which is our type checker and language server.

00:03:06.980 --> 00:03:32.620
kind of like an alternative to like mypy, pyright, also pylance. So you can use it to check your Python types, all that kind of stuff. I've been working on this stuff for about two and a half, three years. So we try to build Python tooling that hopefully solves a lot of the user experience problems I think that people have when they get started with Python, but also tries to scale to very, very large projects.

00:03:34.459 --> 00:03:35.840
Yeah, it's really interesting.

00:03:35.930 --> 00:03:43.560
I don't know if people necessarily believed that we had a Python tooling problem.

00:03:43.960 --> 00:03:47.160
I know they thought we had a packaging problem

00:03:47.930 --> 00:03:51.380
in the sense that, you know,

00:03:51.620 --> 00:03:54.840
why does Conda and Anaconda exist at all?

00:03:54.980 --> 00:04:00.380
It's because there were platforms where you basically could not or it was very, very difficult to install.

00:04:01.040 --> 00:04:09.880
a thing, right? Like, oh, do you not have the Fortran compiler? Oh, you do have the Fortran compiler, but it's the new one, not the old. It's like, are you serious? This is the thing I need?

00:04:10.200 --> 00:04:27.420
But, you know, sometimes there's just weird edge cases. So I know people knew they had that, but I don't know they necessarily felt they had a performance problem until they saw rough and uv and they're like, oh, oh, okay. Okay. That's different. Yeah. What's the reaction been?

00:04:29.160 --> 00:04:36.000
Well, I was a little bit wondering about that question too when I started working on Ruff.

00:04:36.100 --> 00:04:44.900
Because when I started working on Ruff, I felt like there was a little bit of a performance problem because I had tried to work on some large projects and they'd struggled a little bit.

00:04:46.540 --> 00:06:02.060
And when I released Ruff, I kind of wanted to see, well, if things are way faster, would people really care? And so I think it's turned out that if I'd asked people at the time if they cared a lot about a faster linter i think a lot of people would have uh probably discouraged me from investing a lot of time into that never gonna go in there this will never amount to nothing yeah yeah yeah it's a little yeah but uh but since then like you know that's one of the reasons that i started working on this stuff full-time is because the interest was just like the adoption was just so fast and i think a lot of it is like with performance you kind of don't realize that things can be really different until you've experienced it like uh you know like with uv now, you can install things much, much faster. And it's kind of like if you go back to a different tool, it can be a little bit jarring to be like, oh, wow, like that's really different. So, you know, it turns out that people actually really, you know, if you can give them a tool that you hope is, you know, one of the things that we look to do a lot was like, we want this to be kind of as close to a drop in replacement as we can, but also solve some more problems and so it was like we give you a tool that we think is kind of a drop and replacement but it's also way faster the value proposition was really strong and people were like well why

00:06:02.240 --> 00:06:30.100
wouldn't i use this yeah absolutely i you know i've started adding rough commands to just places that they wouldn't normally exist you know like right for normal for normal um linting type of operations Like in all of my editors that I work with, like the save or format document is just run ruff on that.

00:06:30.340 --> 00:06:31.240
Yeah, yeah, yeah, yeah.

00:06:31.740 --> 00:06:41.520
I have a permanent rules file for when I'm doing agentic coding that says anything that you touch, run ruff format and rough check --fix on it.

00:06:41.560 --> 00:06:41.700
Right.

00:06:42.570 --> 00:06:43.080
Yeah, me too.

00:06:43.410 --> 00:06:48.140
And it's like, yeah, that was like one of the cool things for me was like it can really change how you use the tool.

00:06:48.240 --> 00:07:03.460
like you can run it on a keystroke whereas before it was like some expensive heavy step that you know had to paralyze across all your like maybe made your machine take off a little bit and like uh you know could only run in ci stuff like that so um right yeah that's been a big part of what

00:07:03.460 --> 00:07:13.019
we want to try and do yeah instead of being something you've got to choose i'm going to take a moment and do this it's just so fast that it can just happen automatically on like file save

00:07:13.460 --> 00:07:15.140
or on commit or whatever aim.

00:07:15.980 --> 00:07:25.740
Yeah, and I think that we've learned over time is that the stuff that we're working on it's not just about performance. I think performance is a great...

00:07:27.260 --> 00:07:44.500
Anything we build, we want it to be extremely fast and ideally a lot faster than anything else out there, but we're also trying to solve other problems and I think uv is a good example of that where, yes, performance is a big part of it, But I think we also have a lot of users where like the performance doesn't really matter.

00:07:45.040 --> 00:07:51.720
And what they actually care about is the overall experience that we're trying to deliver, which is like you install the thing.

00:07:52.340 --> 00:07:53.400
It installs Python for you.

00:07:54.400 --> 00:07:56.900
It manages the virtual environment abstraction for you.

00:07:56.900 --> 00:07:58.120
It does all these things for you.

00:07:58.140 --> 00:08:02.360
And you don't really have to like think and worry about like trying to make a bunch of problems go away.

00:08:02.820 --> 00:08:03.200
Sure.

00:08:03.420 --> 00:08:04.760
And I think you've done that super well.

00:08:04.780 --> 00:08:10.860
I remember when we first talked about uv three episodes ago, maybe.

00:08:11.540 --> 00:08:39.879
before you had come up with the uv lock concept right in the right and it was it was the uv pip cli yeah yeah exactly there was a lot of pushback from people like why why are you not just doing uv install package there's like this uv pip install package and you know you and i at the time spoke about how you wanted to save space like room in the namespace for future work

00:08:40.700 --> 00:08:42.300
I think that came out well, don't you?

00:08:43.539 --> 00:08:44.840
I'm really happy with how it played out.

00:08:44.950 --> 00:08:53.220
There was a period of time where I almost folded because when we came out and it was uv pip install, everyone was like, can we please not write the pip?

00:08:53.360 --> 00:08:54.420
Can you just make it uv install?

00:08:54.650 --> 00:08:59.580
And yeah, the whole thing for us was like, we were saying, well, yeah, but we want uv install.

00:08:59.950 --> 00:09:05.680
I ended up being, we used the name uv sync, but we were like, we want a very different CLI, like a totally different experience.

00:09:07.100 --> 00:09:08.720
And so that's why we're doing that.

00:09:08.780 --> 00:09:15.860
And at the time when we launched with just the uv pip stuff, I mean, that actually grew quite a lot even before we launched the uv sink like that.

00:09:16.220 --> 00:09:19.280
And it's still like a fully supported like first class thing in the in uv.

00:09:20.840 --> 00:09:30.920
But when we came out with that, yeah, there was a period of time where I was like, hey, maybe we should consider like getting rid of this because people keep complaining about it.

00:09:31.880 --> 00:09:33.660
But we because we do listen.

00:09:33.860 --> 00:09:36.660
We listen when people have feedback.

00:09:36.840 --> 00:09:37.620
We listen when people.

00:09:38.040 --> 00:09:38.400
Yeah, of course.

00:09:38.600 --> 00:10:10.460
know have criticism and oh sorry baby crying and uh the but we stuck to it and i think i think ultimately that was the right decision because um yeah it just meant that we i think things became clearer too once we launched like that other set of apis like uv sync uv run uv lock because then there was like some contrast and it is still a lot to explain but we're trying to do a hard thing of both supporting all these existing workflows, this huge existing ecosystem, and innovate on top of it.

00:10:11.959 --> 00:10:17.480
So yeah, we kind of try to support those two worlds. And I think we made good decisions there,

00:10:17.600 --> 00:10:37.020
but yeah, I'm glad we stuck to it. Yeah. Yeah. Very good. To me, I was kind of like, I don't get the drama because I don't type any of that stuff anyway. I have aliases that are way shorter that used to do stuff with pip.

00:10:37.370 --> 00:10:40.580
So I edited my RC file and I put a uv space in front of the commands.

00:10:40.630 --> 00:10:42.520
I'm like, okay, well, that transformation's done.

00:10:42.570 --> 00:10:43.020
We're good to go.

00:10:44.580 --> 00:10:45.180
That was the goal.

00:10:45.410 --> 00:10:46.060
That was the goal.

00:10:46.620 --> 00:10:46.740
Yeah.

00:10:47.360 --> 00:10:48.920
Yeah, so for me, I actually feel like

00:10:48.930 --> 00:10:50.720
I kept it pretty straightforward.

00:10:51.100 --> 00:10:51.920
But yeah, there was...

00:10:52.300 --> 00:11:05.780
But once you came out with the sync concept, the uv tool, maybe riff a little bit on uv tool before we get into pyx and stuff too much because I think that's actually a bit of a hidden gem.

00:11:05.840 --> 00:11:07.540
And I'll say why, but I want you to riff on it first.

00:11:07.640 --> 00:11:13.140
Tell people about the tool and the script running sort of aspect that maybe is less well-known.

00:11:14.020 --> 00:11:14.400
Yeah, sure.

00:11:14.640 --> 00:11:21.940
So like uv tool is this, you know, we think of a tool as like an executable application that you can install.

00:11:22.500 --> 00:11:28.020
So like often, right, when you're using Python, you're like working on a project and you install a bunch of libraries that you need to import.

00:11:29.300 --> 00:11:34.700
But, you know, there's also a very different way installing and using Python packages, which is a lot of packages are just executables.

00:11:35.340 --> 00:11:46.420
So when youinstall ruff as a Python package, it's actually really just a binary that you unpack and run.

00:11:46.940 --> 00:11:55.780
And so when you run uvtoolinstall ruff, we just basically install that executable and make it available on your path.

00:11:56.800 --> 00:12:02.460
So the nice thing about uv tool is like, there are lots of applications and tools that you can install.

00:12:04.339 --> 00:12:07.580
Like just, you just run like uv tool install or whatever.

00:12:07.700 --> 00:12:12.160
And then like black or rough or my pie or whatever gets added to your path and you can use it.

00:12:13.379 --> 00:12:15.900
And we also have this alias UVX.

00:12:16.540 --> 00:12:20.100
So you can do like UVX rough check.

00:12:20.420 --> 00:12:25.380
That's actually like typically what I use, which is an alias for like install this tool and run it.

00:12:25.780 --> 00:12:32.940
So if you just run like UVX rough check, it will install and run ruff, or if it's already installed, obviously just execute it.

00:12:33.290 --> 00:12:43.560
So like for me, when I'm just like trying to execute random Python tools, a lot of the time, I'm just going through uv and it abstracts away this idea of like, have I installed the thing?

00:12:43.630 --> 00:12:44.660
What version did I install?

00:12:44.900 --> 00:12:45.520
Like, where is it?

00:12:45.550 --> 00:12:45.940
All of that.

00:12:47.940 --> 00:12:48.980
- Yeah, it's super nice.

00:12:49.220 --> 00:12:56.180
And the hidden gem part of it, I think, as you talked about an executable, Certainly with Rust, that is 100% true.

00:12:57.020 --> 00:13:21.260
I think something that's really interesting is if there's an entry point in the package, or I think it's a scripts declaration in the pyproject.toml, which says, this command maps to this function, which might take command line arguments or something, and you uvtool install that package, those become just machine-wide commands that you just have.

00:13:22.280 --> 00:13:37.020
And so the reason I think that's so powerful is we've traditionally had a really hard time shipping just machine-wide installed tooling for Python people or anything as long as they're willing to run the command to install it.

00:13:37.040 --> 00:13:38.980
Because that used to be, well, okay, here's what you're going to do.

00:13:39.400 --> 00:13:40.000
Just follow me now.

00:13:40.000 --> 00:13:43.560
What you're going to do is you're going to create a virtual environment, but then you're going to put part of it in the path.

00:13:44.160 --> 00:13:45.720
And then you're going to activate it.

00:13:45.720 --> 00:13:47.660
Then you're going to pip install that thing.

00:13:48.120 --> 00:13:50.900
And then once you go in there, you're going to run this command long as it's active,

00:13:51.150 --> 00:13:52.560
because you don't want to mess up the system Python.

00:13:52.790 --> 00:13:52.980
No, no.

00:13:53.450 --> 00:13:55.400
And it was just like, whoa, all right, well, let's not do that.

00:13:55.600 --> 00:13:55.980
That's a hassle.

00:13:56.190 --> 00:14:08.740
But now if you can just uv tool install, you name it, and it works, well, then all of a sudden, that's a real viable way to ship tooling globally to anyone, even if they don't know anything about Python.

00:14:09.459 --> 00:14:09.740
Yes.

00:14:10.080 --> 00:14:10.160
Yeah.

00:14:10.600 --> 00:14:13.400
And we actually see that with a lot of companies that we talk to.

00:14:13.600 --> 00:14:18.240
it's like uv becomes the easiest way for them to actually distribute and run small tools.

00:14:19.879 --> 00:14:26.560
And it's cool because like a lot of things in uv, a lot of this is basically enabled by standards.

00:14:26.940 --> 00:14:33.900
And it's like us kind of like just trying to make things that are enabled by standards like a little bit more accessible or easy to use.

00:14:35.280 --> 00:14:39.120
That idea of defining scripts in your PyProject Toml is just like a standardized concept.

00:14:39.540 --> 00:14:40.280
And it's just us.

00:14:40.740 --> 00:16:07.979
we install the thing and we kind of create those little entry points, which are basically Python scripts that run the function. Similarly, like a lot of people, I mean, me included, like the, these like standalone Python scripts, I don't know if you use those at all, where you have the metadata in the header. So you can have a single file script that says like, I depend on these things. And if you uv run that script, we'll install the packages into like this isolated environment and run the script in that environment. And that too is like, that's not even something that we invented that's like a standard that that was put forward um uh i think it's PEP 723 and uh again it's kind of like take those standards and those like good ideas and just try to find ways to make them like ergonomic and accessible to people so i don't know it's something i reflected on a lot which is like you know i don't think those aren't even necessarily great examples of this but like it's not actually clear to me that we could really build uv like a few years ago because so much stuff got you know got standardized like yeah things that people things that most users probably don't really think much about like build back ends and like build isolation and there's just a lot of things that were basically came up organically in packaging and then got standardized and now they're standardized we could actually build a tool that like does all the stuff and it's not just it's not like pip is the only tool that can be an installer like anyone could build an installer because so much of this has been standardized

00:16:08.800 --> 00:16:43.720
yeah no very neat yeah franklin out the audience says uv tool install plus a bruise all equals heaven yes indeed oh nice definitely good stuff all right so i think people got a sense for uv i do want to actually let's talk about one one thing um yeah i was just talking to some folks this morning and they're like hey uv python upgrade awesome new feature oh yeah and i said i have no idea what you're talking about. They said, it's a new feature of uv. I'm like, okay, after this media, I'm going to go check it out. But then I didn't. So you have to tell me about

00:16:43.800 --> 00:16:54.200
it. This is brand new, brand new stuff. Oh, I mean, it kind of does what it sounds like, which is it lets you upgrade by. Okay. It sounds really straightforward, but here's the thing.

00:16:54.760 --> 00:17:19.260
I have, if I go look, if I go run uv tool list, I've got, I don't know, more than a page worth of things. And some of them are super minor, but I've got things like just path, which is a cool thing that shows you stuff that you put in your path that might still be lingering in your path settings, however they come about in the environment, but those folders don't exist anymore. So, hey, these are errors. Maybe you should clean up your path settings a little bit. They're kind of

00:17:19.380 --> 00:17:22.839
wrecked, which I don't really care. Yeah, it's cool. I don't really care if that gets,

00:17:23.860 --> 00:17:29.160
I don't run that very often, but it's around. But I have PLS. Are you familiar with PLS?

00:17:30.040 --> 00:17:32.040
instead of LS, the pretty LS?

00:17:32.780 --> 00:17:32.900
- No, I try.

00:17:32.900 --> 00:17:33.760
- Oh my God, it's so beautiful.

00:17:33.860 --> 00:17:37.700
So when you do LS, it will use like the nerd font.

00:17:37.700 --> 00:17:43.260
So you have to have a nerd font, nerdfonts.com, I think it is, nerd font for your terminal.

00:17:43.420 --> 00:17:47.360
But then like if there's a Python file, I have a Python logo next to it.

00:17:47.840 --> 00:17:52.200
And if there's a GitHub, a Git ignore, it'll have like a GitHub logo.

00:17:52.780 --> 00:17:58.980
And it does things like looks at the Git ignore and determines which hidden files to show actually and which hidden files to actually hide or other stuff.

00:17:59.060 --> 00:18:04.180
So like your git ignore will appear even though it's a regular LS and dot VNV will appear.

00:18:04.420 --> 00:18:06.880
And it has like a, anyway, nice.

00:18:07.260 --> 00:18:09.720
If that thing goes wrong, LS stops working on my system.

00:18:09.780 --> 00:18:15.780
And I got to go like an, like a stone man going around, type in slash bin slash LS until I can fix the virtual environment.

00:18:15.940 --> 00:18:27.000
So if I like remove the Python that uv installed when I said tool install that thing and I want a newer one and then I try to run it, it's like, well, the Python is gone.

00:18:27.280 --> 00:18:27.920
Ah, yeah.

00:18:28.640 --> 00:18:32.360
Right? Is this uv Python upgrade related to that or is it unrelated?

00:18:32.480 --> 00:18:40.380
Yes, but I was just trying to look at the documentation because I'm trying to remind myself what's in preview

00:18:40.560 --> 00:18:43.620
and what's not. We have a preview mode

00:18:44.320 --> 00:19:30.660
which lets you opt into newer features and one of the things that we wanted to solve with uv Python upgrade and with Python installs in general is basically this, which is when you when you create like an executable script you have to put the path to the python interpreter in the header like literally the path to it goes in the file and so if that path contains like the patch version of python like 3.13.0 and then you upgrade your machine to like 3.13.1 suddenly those scripts can break because they point to interpreters that no longer exist so we implemented again i I don't remember off the top of my head if it's in preview or not, but we implemented a solution to this, which is we basically do some like kind of fancy sim linking stuff.

00:19:31.040 --> 00:19:37.340
So like we have a sim link that's like 3.13 that like points to 3.13.1.

00:19:37.560 --> 00:19:39.120
And like we write the sim link to those files.

00:19:39.400 --> 00:19:46.360
So if you upgrade from 3.13.0 to 3.13.1, we operate the sim link and the files remain the same.

00:19:46.680 --> 00:19:48.200
There's like two sim links.

00:19:48.520 --> 00:19:50.440
So you've got that level of abstraction to swap.

00:19:50.540 --> 00:19:50.680
Yeah.

00:19:51.340 --> 00:19:53.120
Yeah, I think we took this from homebrew.

00:19:53.130 --> 00:19:58.560
I think homebrew actually does it this way, which is they create, it's kind of like a sim link for the minor version, like 3.13.

00:19:59.280 --> 00:20:01.380
And then that points to the specific patch version.

00:20:02.040 --> 00:20:04.580
And so when we upgrade the patch version, we also update the sim link.

00:20:04.810 --> 00:20:07.000
And then like everything else kind of like just works.

00:20:07.440 --> 00:20:10.120
But I can't remember if this is only if you pass preview.

00:20:12.180 --> 00:20:12.540
Unfortunately.

00:20:12.720 --> 00:20:14.240
You all are shipping fast.

00:20:14.960 --> 00:20:16.720
By the time most people hear this, probably it'll be.

00:20:18.000 --> 00:20:19.600
By the time people are here, it won't be in preview.

00:20:19.850 --> 00:20:19.960
Yeah.

00:20:21.140 --> 00:20:21.540
Exactly.

00:20:22.580 --> 00:20:22.960
Exactly.

00:20:23.480 --> 00:20:23.580
Yeah.

00:20:24.580 --> 00:20:27.000
But yeah, I use uv tool install all the time.

00:20:27.020 --> 00:20:28.020
I really, really love it.

00:20:29.480 --> 00:20:30.680
A lot of neat tools there.

00:20:30.760 --> 00:20:37.740
I think it's the stealth secret way of like, you now have ways of installing CLI apps that are just published at PyPI.

00:20:38.580 --> 00:20:38.680
Right.

00:20:38.720 --> 00:20:39.980
A single line to go.

00:20:40.360 --> 00:20:45.060
That doesn't quite give us full GUIs and things that go into the docs with icons and stuff.

00:20:46.460 --> 00:20:46.840
But that's okay.

00:20:47.480 --> 00:20:49.160
It's definitely a positive step in the right direction.

00:20:50.440 --> 00:20:57.700
Yeah, no, it's been, yeah, I'm really, like, we're also trying to make that, like, Python upgrade experience a lot better.

00:20:57.910 --> 00:21:01.800
So I'm glad that, I'm glad that you were told about it and that we had a second shout

00:21:01.930 --> 00:21:02.260
about it.

00:21:02.680 --> 00:21:03.940
Like, how am I missing all this hype?

00:21:04.100 --> 00:21:04.600
What have I missed?

00:21:06.220 --> 00:21:06.400
Exactly.

00:21:06.540 --> 00:21:07.700
No, it's, it's super good.

00:21:07.820 --> 00:21:08.200
It's super good.

00:21:08.420 --> 00:21:08.480
Okay.

00:21:09.980 --> 00:21:18.260
So let's talk about, if I can find it, the next step in Python packaging.

00:21:20.040 --> 00:21:24.060
what is this talk about it and so i think the first thing i would like you to go on record for

00:21:24.180 --> 00:21:36.840
people because i still to this day have debates with people whether how to pronounce it yes people are like yeah i got it from pi pi i'm like yeah and i'll say pipe you're like you're saying

00:21:36.840 --> 00:21:47.860
it wrong michael i'm like maybe but everyone who works on it says it the same way so i think i might be saying it the right way yeah let's let's get the let's get the pronunciation good it's kind of

00:21:47.780 --> 00:22:15.320
funny because like we basically have this problem with like all of our tools and it's like very common advice that like when naming things they shouldn't be like ambiguously pronounced yeah and we've kind of just ignored it so like ty is the same people call it like some people call it tie right sure um i don't know what you call it i call it ty i call it ty as well i mean in general for us ty right in general for us it's always the initialization so like uv i love r u f f it's No, just kidding.

00:22:15.740 --> 00:22:17.120
Yeah, okay, Ruff is the one exception.

00:22:17.300 --> 00:22:20.080
And that's because I created Ruff

00:22:20.140 --> 00:22:21.060
before we started the company

00:22:21.180 --> 00:22:23.260
and before we had any of these patterns.

00:22:23.640 --> 00:22:25.140
I didn't really know what it was going to be.

00:22:25.600 --> 00:22:27.280
Of course, we talked about that on the show.

00:22:28.780 --> 00:22:32.040
First time I had you on was about Ruff before you started Astral, I believe.

00:22:32.360 --> 00:22:32.740
Yeah, yeah.

00:22:33.580 --> 00:22:36.680
So it's U-D-T-Y, and then here it's P-Y-X.

00:22:37.500 --> 00:22:37.820
Yeah.

00:22:38.320 --> 00:22:40.560
When I have some kind of AI read it back to me,

00:22:40.580 --> 00:22:46.720
because a lot of times I'll have a lot of stuff to read and I'm like, oh, let me throw it into some kind of like text to speech thing so I can listen while I'm driving

00:22:46.830 --> 00:22:47.900
and then I'll be able to talk.

00:22:48.760 --> 00:22:50.880
And it's like, oh yeah, of is amazing.

00:22:51.040 --> 00:22:55.040
I'm like, it's probably not of, or of or however it says it.

00:22:55.110 --> 00:22:56.220
Yeah, so uv, okay, great.

00:22:56.460 --> 00:22:57.440
And pyx.

00:22:58.700 --> 00:23:04.620
- Yes, and this is our kind of our first hosted infrastructure product.

00:23:04.860 --> 00:23:10.920
So it's a big, I guess I would say expansion for us in terms of problems we're trying to solve.

00:23:13.000 --> 00:23:19.120
Historically, everything we've built so far has been focused on command line tooling, like rough UVTY.

00:23:19.270 --> 00:23:20.200
These are tools that you install.

00:23:20.590 --> 00:23:21.320
They run in your terminal.

00:23:22.680 --> 00:23:25.180
They're kind of, you know, they just run on the client.

00:23:25.440 --> 00:23:28.460
And this for us is the first thing that has a server.

00:23:28.760 --> 00:23:32.040
It is a live thing that we run as a service for companies.

00:23:34.360 --> 00:23:37.600
And it's sort of the counterpart to uv in some ways.

00:23:37.840 --> 00:23:39.020
So like uv is the client.

00:23:39.470 --> 00:23:41.320
And in that sense, pyx is the server.

00:23:42.260 --> 00:24:04.460
UIX is our package registry, also does a lot of other things, but ultimately it's kind of like a backend that accompanies uv and lets us solve a bunch of problems that otherwise we were kind of limited from solving in the past. I think a lot of the motivation for actually building this and the specific features that we're working on, et cetera, they basically come from the uv issue tracker.

00:24:04.840 --> 00:24:40.980
It's like talking to users, hearing about their problems and being like, well, we actually can't really solve that for you because like that's the responsibility of the server and we're just the client and pyx is in a lot of ways our response to that being like well but if we had a server then we actually could solve that problem um and we could solve like all these other problems and so really i for me it's kind of like it was kind of the natural evolution of what we were already doing with uv was to say well um if we have all these users who have all these problems that we think we can solve or hope we can solve by building our own server, then we should do that.

00:24:41.020 --> 00:24:59.680
And because it's a server, because we have to run the server and we have to serve packages, we can charge money for it. And because it's a product that competes in a space of things that people already pay money for, we can charge money for it. And that will be the first thing that we basically charge money for and try to build our business around, which is this package registry.

00:25:00.600 --> 00:25:04.160
I'm definitely wanting to talk about the business model. I think that's a really important thing.

00:25:04.560 --> 00:25:11.600
But before we get to it, let's think of some of the problems that might be solvable on the server, but not solvable.

00:25:11.880 --> 00:25:18.780
Because uv has certainly made a dramatic splash in how many people are using it just out of nowhere, which is really impressive.

00:25:19.400 --> 00:25:20.820
That, you know, count me among them.

00:25:21.040 --> 00:25:22.660
That really is really an awesome tool.

00:25:23.500 --> 00:25:29.020
But maybe let me throw out some ideas and you can tell me if I'm on or off the track.

00:25:30.120 --> 00:25:35.640
So one of the things I think that was really challenging is to resolve the right versions.

00:25:35.900 --> 00:25:42.620
Like I have this version of requests and this version of beautiful soup and this version of whatever.

00:25:42.810 --> 00:25:46.660
And maybe one of them has the same dependency on another with constraints.

00:25:46.900 --> 00:25:47.940
You've got to like work that out, right?

00:25:48.700 --> 00:25:51.980
So maybe something you could do with a server is just go, here are all the packages and versions.

00:25:52.660 --> 00:25:53.260
Resolve that.

00:25:53.440 --> 00:26:02.640
And then once you figure it out once on the server, you could cache like, well, this combination always resolves to these go like instantly index database query.

00:26:02.780 --> 00:26:03.320
Give me the answer.

00:26:04.030 --> 00:26:12.060
So you basically share the resolution across all of humanity instead of every time an install happens, it starts.

00:26:12.180 --> 00:26:12.580
Right, right.

00:26:12.720 --> 00:26:14.460
It's kind of server side resolution concept.

00:26:14.860 --> 00:26:16.140
That is something we want to do.

00:26:16.620 --> 00:26:16.680
Yeah.

00:26:16.960 --> 00:26:19.480
That is an example of a kind of thing we could do.

00:26:20.740 --> 00:26:27.480
You know, I think in general, there's like maybe two or more ways to think about what we're trying to do here.

00:26:27.660 --> 00:26:31.740
So like, like pyx is not really like a PyPI competitor.

00:26:32.000 --> 00:26:35.880
Like we're not trying to like host public packages for like people to consume.

00:26:36.050 --> 00:26:43.340
Like this is a product that's like aimed at companies like enterprises, teams, people who have these problems.

00:26:43.620 --> 00:26:46.060
Maybe they already pay for some kind of alternate registry solution.

00:26:46.700 --> 00:26:47.400
That's not PyPI.

00:26:48.980 --> 00:26:59.460
And so one class of problems is basically, what are things that teams need or have that they can't get from PyPI around packaging and package hosting?

00:27:00.340 --> 00:27:06.860
And some subset there is basically people who come to the uv issue tracker and they use some other registry and they have a bunch of problems with it.

00:27:07.160 --> 00:27:10.580
And we actually can't solve those because we're like, we can't fix your registry.

00:27:11.480 --> 00:27:19.780
And so the table stakes thing is a great private registry, which means something that's really like Python first.

00:27:20.320 --> 00:27:25.820
Most alternate package registries that support Python support a bunch of different...

00:27:26.420 --> 00:27:27.040
Sorry, one sec.

00:27:29.380 --> 00:27:30.120
Is it loud or no?

00:27:30.480 --> 00:27:30.580
Yeah.

00:27:30.780 --> 00:27:31.300
It's all right.

00:27:31.940 --> 00:27:32.300
It's fine.

00:27:32.490 --> 00:27:32.800
Keep going.

00:27:33.000 --> 00:27:33.300
It's life.

00:27:33.670 --> 00:27:33.800
Yeah.

00:27:36.520 --> 00:27:40.720
So these alternative solutions that support Python also support a bunch of different ecosystems.

00:27:41.120 --> 00:27:42.920
And Python is typically like a small thing for,

00:27:43.210 --> 00:27:45.220
and so often those registries are.

00:27:45.880 --> 00:27:48.220
We're going to host like, here's your binary artifact.

00:27:48.390 --> 00:27:51.500
And then whatever your thing does to get the artifact, it's like, it's just going to get it.

00:27:51.580 --> 00:27:55.940
And like, and that's kind of more or less what might be happening there, right?

00:27:55.990 --> 00:27:56.560
Not like, right.

00:27:56.850 --> 00:27:58.460
And so for us, it's like, okay,

00:27:58.490 --> 00:28:02.760
we want a registry that like, it should support all the latest standards.

00:28:04.160 --> 00:28:06.700
It should be really optimized for Python.

00:28:06.830 --> 00:28:09.520
And we should just provide like a great Python experience because it's Python.

00:28:09.860 --> 00:28:11.200
like Python is a first class thing.

00:28:11.620 --> 00:28:19.840
And so that's part of it is like, how do we build just a great private registry that is super modern, is really fast.

00:28:20.120 --> 00:28:24.700
A lot of the private registries are very slow for a variety of reasons, some of them related to standards.

00:28:26.160 --> 00:28:28.680
But our goal is like, we want to provide a great experience for that use case.

00:28:28.760 --> 00:28:37.680
So if you're a company that needs to like host private Python packages, especially if you're using uv, we should just be like, well, we want to be like the obvious choice, right, for those companies.

00:28:37.940 --> 00:28:38.140
Yeah.

00:28:38.600 --> 00:28:40.640
Hold on, before we leave that topic.

00:28:40.960 --> 00:28:41.140
Yeah.

00:28:41.660 --> 00:28:42.880
Why would anybody do that?

00:28:44.100 --> 00:28:44.920
Why would anyone do what?

00:28:45.000 --> 00:28:45.080
Sorry.

00:28:45.500 --> 00:28:46.700
Want private packet testing?

00:28:46.980 --> 00:28:47.700
A private package.

00:28:48.480 --> 00:28:49.180
Oh, yeah.

00:28:49.940 --> 00:28:50.400
It's very common.

00:28:50.760 --> 00:29:02.740
So, like, especially if you get beyond a company of a certain size, maybe you have code that you need to share across the organization, like packages that, you know, subsets of your project that you want to be able to use, reuse elsewhere.

00:29:03.920 --> 00:29:07.120
You know, sometimes at small scale, you'll solve that with like Git dependencies or something.

00:29:07.320 --> 00:29:08.600
Like maybe you just depend on the Git repo.

00:29:09.090 --> 00:29:13.300
But typically as you scale, people will tend to start creating actual packages that they publish.

00:29:14.760 --> 00:29:19.620
In some cases, you also want to be able to do like fine-grained access control around that.

00:29:19.810 --> 00:29:26.220
Like maybe you want to be able to publish code that like only certain people can access within the org or maybe like select customers can access.

00:29:26.560 --> 00:29:36.420
Like these are all use cases we want to be able to serve, which you can't do on PyPI, which is we want to host packages that are not totally public and we want to be able to control who can use them.

00:29:36.960 --> 00:29:42.100
because they contain IP or, well, yeah, I mean,

00:29:42.100 --> 00:29:43.840
I guess that would be the main reason they control it.

00:29:44.040 --> 00:29:55.440
I also think just like we want to be able to ship versions of our library to all the other teams at our organization, right?

00:29:55.450 --> 00:30:01.620
Like we wrote the definitive Python library to talk to some service we have running internally.

00:30:02.090 --> 00:30:21.360
We don't want people, everyone recreating some Python library, working with different versions. If we roll out a new version of that service, we want to just push to our little internal repository, a new version that works with that new and all the projects get it. Right. Like that kind of thing seems real valuable. It's like a library reuse story.

00:30:22.100 --> 00:30:37.680
Yeah, exactly. And like, you know, for those same users, like enterprises that care about this kind of thing, even if they're not publishing private packages, there are other things that we can do here. Like, we have this, I mean, I think I was gonna say pretty cool. I think it's pretty cool.

00:30:37.770 --> 00:31:06.400
We have this pretty cool system where you can define what we call like views, which are kind of like composed filtered subsets of other registries. So you could create like an index URL that represents PyPI, but like frozen at a given point in time. And that's like enforced on the server or even like PyPI, but like only things that are at least a week old. That's like a common thing that people use to protect guard against malware because malware tends to get removed, you know, within within a short amount of time.

00:31:07.720 --> 00:31:18.500
And you can also compose them. So you could create like a single index URL that's like, if we uploaded a package of a certain name, then like get it from our upload. Otherwise, like fallback to PyPI.

00:31:19.500 --> 00:31:24.940
You could also like disallow specific versions, specific packages, you can disallow based on like CVE counts.

00:31:25.660 --> 00:31:28.040
So you can do all this, like we have a DSL for it.

00:31:28.040 --> 00:31:31.240
You basically like write Python code to like define the configuration.

00:31:31.600 --> 00:31:33.220
And then we give you like a single index URL.

00:31:34.100 --> 00:31:36.660
So that's both like simplifying a lot of what's happening.

00:31:37.560 --> 00:31:41.060
Like often you have some subset of this logic in your uv configuration.

00:31:41.400 --> 00:31:50.660
And now it's like, as a team, you can actually centralize like and enforce like compliance rules and give you like a single URL that defines this logic for you and is enforced on the server.

00:31:51.160 --> 00:31:55.060
So again, it's about things that like, these are things that companies care about, right?

00:31:55.200 --> 00:31:59.400
like if you're an open source project, you probably don't care about this as much.

00:32:00.000 --> 00:32:14.540
But for companies who care a lot about, you know, visibility and control and security and this kind of shared centralized logic, it's a really helpful, we found it's a very helpful thing.

00:32:15.400 --> 00:32:20.920
So that's part of it is like companies that need to manage private packages or need to manage like their packaging setup.

00:32:21.040 --> 00:32:25.720
And that I just consider kind of like the table stakes of what we can provide.

00:32:26.060 --> 00:32:32.740
It's like a great, fast, modern Python registry that kind of doesn't exist, in my opinion, doesn't really exist in the market.

00:32:34.420 --> 00:32:38.000
And it should be really like a natural thing if you're already using uv.

00:32:38.620 --> 00:32:44.000
Then there are some other things we're doing that are kind of maybe a little bit more crazy, but hopefully in a good way.

00:32:44.700 --> 00:33:00.880
So, you know, one is the thing that we're trying to do is like, we want to build, it's kind of a similar philosophy that we've taken to the rest of our tooling, which is like, pyx, you don't have to use uv to use pyx.

00:33:01.170 --> 00:33:08.520
Like, this is like a registry that implements like the simple API, like the upload API, which is not really standardized.

00:33:08.730 --> 00:33:11.820
But anyway, we implement like all the APIs that other registries implement.

00:33:12.460 --> 00:33:17.880
So you can use like pip and entwine or like whatever with pyx and that's fine.

00:33:19.520 --> 00:33:21.940
You also don't have to use pyx to use uv obviously.

00:33:22.130 --> 00:33:23.960
You can use uv with like whatever register you want.

00:33:24.740 --> 00:33:30.620
But our goal is like if you use uv and pyx together, there are certain things we should be able to do to like deliver a really good experience.

00:33:31.620 --> 00:33:34.740
And some of those are obvious like authentication is a little bit more seamless.

00:33:35.520 --> 00:33:38.460
Like you can, we kind of like know that you need the credentials.

00:33:38.750 --> 00:33:40.500
We know to prompt you to log in that kind of thing.

00:33:41.120 --> 00:33:43.520
But there's also a lot of stuff we can do around performance.

00:33:43.880 --> 00:33:50.620
If the client and the server kind of know each other, there are different fast paths we can take to try and make things a lot faster.

00:33:51.260 --> 00:33:59.600
So there's a lot we want to explore there around how can we vertically integrate these things while also remaining compatible with the rest of the ecosystem.

00:34:01.780 --> 00:34:03.960
And then there's also this bullet on the bottom, right?

00:34:04.240 --> 00:34:07.780
This GPU aware thing, which is another piece that we should talk about.

00:34:10.020 --> 00:34:12.260
Do AI people, maybe AI people use this?

00:34:12.280 --> 00:34:12.679
I don't know.

00:34:12.800 --> 00:34:15.280
That's probably going to be a fad, but you guys might want to add it anyway.

00:34:15.899 --> 00:34:16.179
Yeah.

00:34:17.720 --> 00:34:19.419
This AI stuff, it's going to be a fad, I'm sure.

00:34:20.399 --> 00:34:20.560
Yeah.

00:34:21.240 --> 00:34:27.260
I guess sort of as an aside, it's kind of interesting for us because we don't have or build anything that's AI powered.

00:34:31.220 --> 00:34:34.139
But we power a lot of AI infrastructure companies.

00:34:35.760 --> 00:34:36.879
So I don't know.

00:34:36.940 --> 00:34:42.240
If you think of a big AI company, without naming names, they're probably using our stuff.

00:34:42.490 --> 00:34:52.360
And so it's kind of an interesting position to be in, which is we build a lot of infrastructure that's used by AI companies and also by end users and even by agents.

00:34:52.560 --> 00:34:55.020
If you're running an agent, it's invoking uv and stuff.

00:34:55.240 --> 00:34:59.180
But nothing that we build is actually AI-powered in that way, which is kind of a funny position to be in.

00:35:00.900 --> 00:35:10.340
But yeah, basically, since the start, we've spent a lot of time in uv trying, I will say, specifically trying to make the PyTorch experience good.

00:35:11.459 --> 00:35:15.700
Because the PyTorch experience is kind of like, it's not the only thing in GPUs.

00:35:15.780 --> 00:35:16.640
There's a lot of stuff going on.

00:35:16.730 --> 00:35:18.240
But PyTorch is just super popular.

00:35:18.710 --> 00:35:24.140
And so we've always gotten tons of issues around how do I make this PyTorch setup work?

00:35:24.290 --> 00:35:27.240
Or how do I make, I ran into this error, like what's going on?

00:35:27.400 --> 00:36:56.780
I have this other package that builds on top of PyTorch and I'm having trouble getting them to work together. So we spend a lot of time trying to make that experience good in uv because it's just super popular. And one of the things that we've come back to many times is there are problems we could solve if we had a server that we can't solve on the client. An example would be, there were all these pieces of software that built against PyTorch and build against certain versions of CUDA, which is like NVIDIA's GPU accelerator library. And those things tend to be hard to build. And it's also very hard to make sure that you're getting compatible versions of them, because there are basically some gaps in the Python standards that make that hard that we're working on. But it's hard to, for example, install PyTorch and install this very popular library called Flash Attention. It's very hard to install a compatible version of PyTorch and a compatible version of Flash Attention. And it's not really anyone's fault. There are basically gaps in the standards that make that hard. But if we have our own client and our own server, especially actually even if we just have our own server, there's a bunch of stuff we can do because we can kind of pre-build those for people. We can curate the metadata in certain ways in a way that's all standards compliant, but we could pre-build all those things. And the goal is give people an index that they can point to that will have pre-built versions of a lot of this stuff that's consistent, in the vert, the metadata is compatible. They don't have to worry about how do I build it from source?

00:36:56.920 --> 00:37:13.940
They don't have to worry about how do I make sure that all the versions that I'm installing are like mutually compatible. Like that's like another one of the problems that we're trying to solve. And again, it's the kind of thing that like we want, we've wanted to be able to offer users for a long time, but like, there's only so much we can do on the client. Sure. Let's dive into this just a

00:37:13.980 --> 00:37:25.520
little bit. So is the problem, I am a consumer of LLMs and AI, and I also have programs that the themselves use LLMs, but I have not built an LLM.

00:37:25.550 --> 00:37:27.020
So I don't really have much experience with this.

00:37:27.820 --> 00:37:40.920
So is the problem that it's kind of a source distribution that you've got to compile for PyTorch and maybe some other things, or they actually come as binary wheels, but they're incompatible with each other, even though they're pre-compiled?

00:37:41.050 --> 00:37:41.640
Like what is the,

00:37:42.099 --> 00:37:44.220
what is it that you're kind of doing to make it work here?

00:37:44.640 --> 00:37:45.800
- Yeah, so it depends a little bit.

00:37:45.920 --> 00:37:51.740
So like for PyTorch, just as an, PyTorch itself, like the Python package, like import torch.

00:37:52.180 --> 00:38:07.540
If we just think about that, they do pre-build wheels, but a lot of the complexity comes from the fact that there's this access that isn't really captured by Python standards, which is the GPU accelerator.

00:38:08.180 --> 00:38:14.860
So on your machine, if you want to run PyTorch, typically you have a GPU plugged into your machine.

00:38:15.440 --> 00:38:18.680
And that could be an NVIDIA GPU, it could be an AMD GPU.

00:38:20.140 --> 00:38:22.200
And each of those use very different software stacks.

00:38:22.840 --> 00:38:24.840
And those software stacks are also versioned.

00:38:25.100 --> 00:38:32.240
So when they build PyTorch and they publish to their registry, it's not just one build.

00:38:33.820 --> 00:38:39.220
And it's not even just the standard build matrix of Python version and architecture and operating system.

00:38:39.800 --> 00:38:43.960
There's another axis, which is accelerator slash accelerator version.

00:38:44.820 --> 00:38:49.760
And there's actually no way to capture that really in Python standards right now.

00:38:50.659 --> 00:38:54.640
So what they end up doing is they create separate indexes for each of those accelerators.

00:38:54.790 --> 00:39:05.280
So if you've ever installed PyTorch, there's sort of like a UI on the PyTorch page where you click through, like, this is my GPU, this is my operating system, this is my Python version, and it gives you an index URL.

00:39:05.850 --> 00:39:07.760
And they have different index URLs for the different accelerators.

00:39:07.780 --> 00:39:08.260
Oh, wow.

00:39:08.620 --> 00:39:10.820
So it shows that multiple projects on PyPI?

00:39:12.220 --> 00:39:12.580
No.

00:39:12.600 --> 00:39:41.140
No. So on PyPI, they still basically, those wheels aren't even published on PyPI. So they do publish on PyPI, but they can only publish basically one wheel. So they publish for one of those GPU versions and all the rest go on the PyTorch index. So the first one source of complexity is as a PyTorch user, how do I get the right version of PyTorch that's prebuilt?

00:39:42.300 --> 00:39:50.580
And then there's a next level of complexity, which is then I have libraries that build against PyTorch, like Flash Attention.

00:39:51.020 --> 00:39:59.100
So when you build Flash Attention, that's a source distribution, and it needs to build against a specific version of PyTorch and a specific version of the GPU.

00:39:59.460 --> 00:40:01.040
So it's yet another dimension.

00:40:01.900 --> 00:40:06.460
It's not just because it's also specific to like CUDA 12.8 or whatever.

00:40:07.100 --> 00:40:09.660
But in addition, it's also specific to the PyTorch version.

00:40:10.160 --> 00:40:13.800
So they have to publish wheels for each combination of PyTorch version and accelerator.

00:40:14.880 --> 00:40:16.180
And none of those go on PyPI.

00:40:17.500 --> 00:40:19.640
So they publish those to a GitHub releases page.

00:40:19.980 --> 00:40:21.420
But PyPI is just the source distribution.

00:40:24.700 --> 00:40:31.320
And the root cause of those problems are really some gaps in the standards that are hard to solve.

00:40:31.650 --> 00:40:37.700
And we're also working on some standards, some sort of proposed evolutions to solve this in standards.

00:40:39.800 --> 00:40:44.040
But ultimately, it means that it's kind of hard to install the right version of Torch.

00:40:44.760 --> 00:40:50.620
And then if you need to install these other things, again, these won't mean anything to you unless you've really used them.

00:40:50.680 --> 00:40:57.200
But VLLM is the most popular piece of software that people use for actually serving models.

00:40:57.340 --> 00:41:02.620
So if you wanted to do inference, like serve an LLM, VLLM would be a very popular choice.

00:41:03.900 --> 00:41:07.960
And that has to build against a specific version of Torch, and it's built for specific accelerators.

00:41:08.140 --> 00:41:12.960
And so basically you have kind of these many levels of complexity of how do I get this thing to build?

00:41:13.070 --> 00:41:14.100
How do I make sure I get the right version?

00:41:14.619 --> 00:41:17.100
And we want to kind of abstract that away from people.

00:41:17.620 --> 00:41:18.120
I see.

00:41:18.270 --> 00:41:19.940
It gets combinatorially bad.

00:41:21.320 --> 00:41:21.640
Yeah.

00:41:21.670 --> 00:41:51.880
I mean, the flash attention build matrix, if you think about it, it has, so for a single flash attention version, you have to build across Python version, operating system, architecture, version, which is like NVIDIA GPU version, and then PyTorch version. And so it's a very big build matrix. And it's very hard to get right. I'm sure. Let's talk about security a little bit.

00:41:52.200 --> 00:42:22.960
You talked about some of the things. I really like the idea of just, let's just put a delay in there, like a week, a month, whatever. That's pretty new, pretty cutting edge. But by the time something's gone through there. If it's something we're using, it's going to be found out. Someone's going to report it, pull it off of PyPI, and basically block it. Yeah. We also recently hired William

00:42:23.180 --> 00:43:55.420
Woodruff, who joined the team, who was an author on the attestations pep. He implemented a lot of trusted publishing work in PyPI. So he's done a lot of the sort of cutting-edge security work in the PyPI ecosystem. And we basically have some ideas for more outlandish things we can do around security. Or sorry, outlandish is the wrong word. Maybe ambitious things we can do around security that we want to explore. I don't know if we'll actually do any of these things, but there's basically things that we can learn from other ecosystems around how to do more secure workflows for packaging. So we want that to be a big part of what we're doing. But I think something that's important for me about this product is when you think about a registry, like a private registry, a lot of the time it's motivated by like security and compliance. And that is an important piece of what we want to do. Like we do want to build a registry that's like very, very strong and in security and compliance. But we also want to solve problems that I think people never really associated with like a private registry. Like, like we want to solve some problems like the GPU stuff, for example, those are just like user experience problems. Like we're trying to use the registry as a way to solve user experience and developer experience problems, even for companies where otherwise they would never have considered using a private registry.

00:43:55.990 --> 00:44:03.520
So our goal is that over time, we build more things into pyx that help with the overall Python experience.

00:44:03.780 --> 00:44:05.300
How do we make your Python team more productive?

00:44:05.760 --> 00:44:08.920
It's not just about how do we help them be more secure.

00:44:09.120 --> 00:44:09.800
That is part of it.

00:44:10.220 --> 00:44:18.360
But ultimately, we love building things that make people more productive and remove problems that they have to even think about.

00:44:18.790 --> 00:44:22.120
And so ultimately, we want to use this as a position to solve more problems.

00:44:22.720 --> 00:44:25.680
Yeah, like this PyTorch example you talked about.

00:44:26.020 --> 00:44:26.960
Like the PyTorch example.

00:44:27.480 --> 00:44:28.280
Yeah, yeah, yeah.

00:44:32.539 --> 00:44:33.600
I had a good question.

00:44:33.670 --> 00:44:34.140
It has vanished.

00:44:34.300 --> 00:44:35.240
So let me ask you a different question.

00:44:35.270 --> 00:44:36.040
We'll come back to it.

00:44:37.740 --> 00:44:38.460
Yeah, sounds good.

00:44:39.000 --> 00:44:40.580
Yeah, so is this...

00:44:40.830 --> 00:44:42.520
No, I got it back.

00:44:42.660 --> 00:44:43.440
It's come back to me.

00:44:43.560 --> 00:44:48.680
Is there going to be an API for pyx?

00:44:48.900 --> 00:44:53.980
Like if I am a customer of yours and I want to control some things, can I set up automation?

00:44:55.420 --> 00:45:05.400
Or are there ways to put code running in pyx that will, you know, check on things additionally, webhooks, or any of that kind of stuff?

00:45:05.480 --> 00:45:10.520
Like what is the, I want to participate in pyx sort of thing.

00:45:11.260 --> 00:45:15.780
Yeah, we have a bunch of APIs.

00:45:15.930 --> 00:45:19.220
So we implement some of the standard, what I would call standardized APIs.

00:45:19.600 --> 00:45:26.960
So obviously, the way that we query package metadata and download packages is based on the simple API.

00:45:28.170 --> 00:45:29.720
And then we also implement the upload API.

00:45:29.980 --> 00:45:39.200
So basically, uploading and downloading packages follows-- that's public API that follows basically standards/what other registries do.

00:45:39.290 --> 00:45:39.480
Sorry.

00:45:40.380 --> 00:46:04.400
is a little bit strange because it tends to be people just kind of like do what pypi does outside of that we do have apis that we're kind of like considering how we want to expose them like i talked before about um this idea of custom views like being able to like sort of declaratively write code to create an index url like that should all be scriptable and that should all

00:46:04.420 --> 00:46:34.900
public API over time. Yeah. I'll give you a sense of what I'm thinking. Like if I'm in charge of developer security, developer package security, supply chain security, I guess I would say at a big organization or any level of organization where it really matters, you know, or I care enough to buy your service, maybe I would do something like I would subscribe or I would have an automated system subscribe to a bunch of RSS feeds for security places, right?

00:46:35.220 --> 00:46:39.560
Like leaving computer and others and look at all the articles and I see PyPI show up.

00:46:40.660 --> 00:46:45.240
And maybe like, well, let's feed that to an LLM and ask like, okay, well, what packages are actually affected?

00:46:46.020 --> 00:46:52.200
And then if I can determine something we're using, or even if it's not, we're using it just something relevant that we care about.

00:46:52.860 --> 00:46:57.540
Maybe I want to call an API back to you guys and say, block this, block this one permanently.

00:46:57.600 --> 00:47:00.200
We're walking back for like three months ago.

00:47:01.659 --> 00:47:02.720
It's sus right now.

00:47:02.880 --> 00:47:05.300
We're going to put it on a timeout and make it go back.

00:47:05.460 --> 00:47:05.920
You know what I mean?

00:47:06.280 --> 00:47:06.820
Something like that.

00:47:07.700 --> 00:47:08.080
Yeah, yeah.

00:47:08.290 --> 00:47:10.920
No, we should definitely support all of that.

00:47:13.280 --> 00:47:17.940
I have to think about whether that's in a position where we'd make it available to customers yet.

00:47:20.179 --> 00:47:22.620
But in theory, they could absolutely script against that today.

00:47:23.360 --> 00:47:23.740
Sure, cool.

00:47:23.950 --> 00:47:51.221
I mean, that is also something you guys could write once and like have it all right kind of a a little preemptive sort of thing so um pi pi pi what is the role like i want to publish a package that is a public thing do i upload it to you guys do i just publish it to pi pi but are you guys a proxy you mentioned that you're not a replacement for pi pi but what does that really mean yeah yeah so we're not trying to be like um the public source

00:47:51.260 --> 00:48:05.600
of record for packages. So for people who are publishing packages, PyPI is still the place that they should go to publish those. We do mirror in PyPI. So you can use PyX to install things that

00:48:05.720 --> 00:48:16.400
ultimately come from PyPI, which is pretty common. You can just have to proxy through, you could just instantly go and... Yeah, we pull those over onto our own infrastructure,

00:48:17.080 --> 00:48:21.540
which is pretty common, as in other mirrors do this kind of thing too.

00:48:22.740 --> 00:48:33.420
But the nice thing is that PyPI has very good uptime, but the nice thing is if you depend on us, it also means that you're not introducing more sources of failure, basically,

00:48:34.770 --> 00:48:35.800
because we mirror the stuff ourselves.

00:48:36.120 --> 00:48:44.300
So obviously, we could go down in some sense, but now you're not relying on both us and PyPI to serve packages, which can be helpful.

00:48:45.620 --> 00:48:51.260
But the basic idea for us is we're obviously big fans of PyPI.

00:48:51.620 --> 00:48:55.780
And I won't speak for them, but we spend time with the PyPI team.

00:48:57.839 --> 00:49:01.540
I talked to them about this before we announced it.

00:49:03.180 --> 00:49:06.740
And I view PyPI as a critical piece of a healthy Python ecosystem.

00:49:07.700 --> 00:49:14.020
And we're not trying to displace PyPI as the public source of record for traffic.

00:49:15.180 --> 00:49:30.160
Our goal is we're trying to build something effectively on top of PyPI, a slightly different layer that's more focused on the needs that enterprises have and companies have, which is a little different than what PyPI is trying to do.

00:49:30.390 --> 00:49:32.160
In my opinion, they could obviously come out and say something.

00:49:33.030 --> 00:49:37.660
Again, I don't want to speak for them, but at least from my perspective, it's a little different than PyPI's mandate.

00:49:40.180 --> 00:50:17.080
you know, for us, I think I said online something like, pyx is success depends on the success of PI PI. And like, we basically operate that way. So, we'll like continue to support, you know, I think it's a hard thing to, to, to, to message out succinctly, which is why it's nice to be able to talk about it with you. but like, we're, we're trying to build something that we think addresses like a different gap. and it's less focused on how we compete with like pypi and it's more focused on how do we compete with um uh like artifactory or like other products that are private registries that people pay for i mean how can we provide

00:50:17.300 --> 00:50:39.340
something that's a little bit different than what those people are providing yeah super neat is there going to be an on-premise option oh such a good question what are you a customer i'm like um no but i did say last night yeah it was holiday and express i don't know what that

00:50:39.700 --> 00:51:06.840
yeah if someone will pay us enough money then yeah um but we don't we're not doing on-prem right now but uh we do have a lot we do have a decent amount of people who want it um and i think it will be ultimately be important but like in the early days of the product obviously we're very focused on trying to iterate with like customers as quickly as we can and so the fastest feedback there tends to be from, you know, basically we want to be able to deploy this quickly to people and like get feedback on it quickly.

00:51:07.100 --> 00:51:11.700
So like on-prem is a much bigger, you know, a bigger investment and also.

00:51:12.260 --> 00:51:13.320
And what does on-prem mean?

00:51:13.960 --> 00:51:14.040
Right.

00:51:14.200 --> 00:51:16.020
Is on-prem like the entire implementation?

00:51:16.380 --> 00:51:18.200
This is whole, yeah, this is a whole spectrum.

00:51:18.200 --> 00:51:18.820
Or is it a proxy?

00:51:19.080 --> 00:51:19.260
Yeah.

00:51:19.360 --> 00:51:21.940
Is it just a proxy server?

00:51:22.080 --> 00:51:24.180
Like if you've seen this request before, you've already downloaded it.

00:51:24.180 --> 00:51:26.880
It's like a little VM that's hanging out in our data center.

00:51:27.040 --> 00:51:27.580
Just pass that out.

00:51:27.700 --> 00:51:29.700
That's pretty low hanging fruit.

00:51:29.940 --> 00:51:33.840
Whereas like, we want to give you the entire thing in a box.

00:51:34.060 --> 00:51:34.560
That's a different deal.

00:51:35.079 --> 00:51:35.400
Yeah.

00:51:35.740 --> 00:51:45.240
We've also experimented with some kind of interesting hybrid models where like all the packages, I shouldn't even say this because then people are going to like come ask for it.

00:51:45.260 --> 00:51:46.780
And like, I don't really want to support it.

00:51:46.780 --> 00:51:47.920
Don't speak it into existence.

00:51:48.560 --> 00:51:49.700
No, it's kind of a cool idea though.

00:51:49.800 --> 00:51:55.660
It's basically like all the packages would live in an S3 bucket that the customer controls and that we don't even have access to.

00:51:56.640 --> 00:51:58.240
And we could actually support that.

00:51:58.720 --> 00:52:05.760
So we would be like the server that understands metadata about what packages exist and where they are, but we wouldn't actually have access to the contents.

00:52:06.519 --> 00:52:10.320
And there are basically cool ways that we could make that work, which is kind of an interesting hybrid model.

00:52:12.339 --> 00:52:16.600
But anyway, yeah, right now we're pretty focused on not doing on-prem, but I'm sure we will eventually.

00:52:16.600 --> 00:52:17.640
Maybe someday, yeah.

00:52:18.180 --> 00:52:18.360
Yeah.

00:52:19.060 --> 00:52:19.900
If the product is successful.

00:52:19.920 --> 00:52:21.460
If they give a check and they're like, you know what?

00:52:21.880 --> 00:52:22.640
On-prem is a good idea.

00:52:22.740 --> 00:52:23.060
Let's do that.

00:52:23.280 --> 00:52:23.680
Right, right.

00:52:25.140 --> 00:52:26.980
For the right price, on-prem is definitely available.

00:52:29.860 --> 00:52:30.040
All right.

00:52:30.070 --> 00:52:31.500
Well, I think this is the perfect transition.

00:52:31.860 --> 00:52:39.860
And I know that this has been something that has been discussed on and off basically since uv.

00:52:40.440 --> 00:52:43.020
And for some reason, I don't think it was at all discussed with rough.

00:52:43.230 --> 00:52:43.600
I don't know.

00:52:43.630 --> 00:52:44.460
You make that make sense.

00:52:44.700 --> 00:52:45.480
Maybe you can.

00:52:45.580 --> 00:52:46.140
I can't.

00:52:48.180 --> 00:52:50.420
I'll tell you if you're right, depending on what the question is.

00:52:50.540 --> 00:52:55.140
The question is, a lot of people are like, oh my god, uv is incredible.

00:52:55.480 --> 00:52:56.860
We have to switch everything to uv.

00:52:57.260 --> 00:53:01.220
And then there's always someone that says, but it's owned by a company.

00:53:01.380 --> 00:53:03.780
It's not 100% open source.

00:53:04.940 --> 00:53:05.820
What if that changes?

00:53:05.940 --> 00:53:07.520
What if its usage model changes?

00:53:07.760 --> 00:53:11.700
What if Charlie and team decide it's a tenth of a cent per package install,

00:53:12.040 --> 00:53:12.900
and then we're out?

00:53:13.900 --> 00:53:17.340
That's certainly been a lingering issue.

00:53:17.500 --> 00:53:18.700
I don't think it was with Ruff.

00:53:18.800 --> 00:54:01.080
like people aren't like well what if it's like a thousandth of a cent per line of code you know what i mean i get for some reason about uv i think it's just more foundational like stuff runs because of uv stuff is nicer because of rough maybe i don't know that that's the like there's even a comment by chris in the audience like what if you guys change your mind and i know you've been very open about saying that's not our intention we intend to build products around it when i saw this announcement i'm like wonderful this is the first glimpse into what you guys are building that supports uv, supports rough and all this other stuff you're doing in a way that is not like, well, we took that feature out of uv because it only encourages you to make uv even better.

00:54:03.100 --> 00:54:03.260
Right?

00:54:03.700 --> 00:54:05.040
So maybe just talk about that.

00:54:05.220 --> 00:54:06.680
Talk about that for people who are listening

00:54:06.980 --> 00:54:07.680
around the business model.

00:54:07.900 --> 00:54:11.940
How does this solidify the stuff that you've mentioned and the more abstract?

00:54:12.680 --> 00:54:12.860
Totally.

00:54:13.620 --> 00:54:16.480
Yeah, and I think about this all the time.

00:54:18.120 --> 00:55:21.380
um you know from the start and it was something that came up when we when we talked about rough but i think um i've kind of sensed for a long i don't know about a long time but i've sensed for a while there's like kind of two sources of um anxiety around this from users and you know one form is like oh what if we depend on all this stuff and the company goes under the company disappears the other form is like you know what if we depend on all this stuff and then they like pull the rug out from under us. And I think the first one is a little bit easier, I think, to talk about, just because we have a good amount of funding. We're not going to disappear in the next year or anything like that. We're very well supported. But the second one is obviously more complicated because I'm very transparent and I'll say a bunch of things on this podcast that I've said a bunch of other times in other places.

00:55:21.780 --> 00:55:26.620
But ultimately people, I think we have to basically prove out trust over time.

00:55:26.840 --> 00:55:29.240
I can say, I will say things right here, obviously.

00:55:29.440 --> 00:55:35.520
I've said, we have no rough uv, our tools should be free forever.

00:55:36.200 --> 00:55:38.320
And we want to keep them free and open source.

00:55:38.510 --> 00:55:39.860
And that's very, very important.

00:55:41.400 --> 00:55:44.160
But ultimately, we have to like earn that trust over time, I think.

00:55:44.410 --> 00:55:47.340
Like I can say all these things, but there will still be people who will be skeptical.

00:55:48.520 --> 00:55:58.380
And, you know, ultimately our model, it's been the same from the start, really, which is, or, well, I don't know, from the start is wrong, because I sort of had no idea what I was doing when I started the company.

00:55:58.720 --> 00:56:19.020
But like my, the intention has been, we want to build this like open source, what we think of like as our open source tools, which is like Ruff, uv, ty, this tool chain. And that should be free, permissively licensed. And we should be incentivized to like keep investing in it and like to see it grow.

00:56:19.880 --> 00:56:32.000
And what we want to do from there is monetize services that we build that are kind of like natural extensions of or I think what I said in the post is something along the lines of the natural next thing you need if you're already using our tooling.

00:56:32.640 --> 00:56:43.180
And for me, the registry is a really good example of that, because basically, if you're already using uv and you're a company that has or needs a registry, like we should be the obvious choice for that.

00:56:43.340 --> 00:56:47.000
And people pay for, not if you're just using PyPI, right?

00:56:47.120 --> 00:56:51.400
This might not resonate with you, but a lot of people pay a lot of money for products in that space for registries.

00:56:51.500 --> 00:56:59.460
And we should be able to build a better registry and gain a lot of distribution and visibility by building the open source.

00:56:59.600 --> 00:57:11.180
The open source should basically be, you know, in addition to something that we continue to invest in and solve, you know, solves a lot of problems for users and gives value to most people not paying us any money, right?

00:57:11.220 --> 00:57:51.781
even in the limit. I think most users of our open source tool will not pay us any money, but it should be a way for us to get distribution. Companies should be like, oh, we use this open source thing. We need a solution for this. Okay. That's from the same people. It probably plays really well with the tools. It can probably solve more problems for us. And so that's been very consistent, which is the tooling should be free, open source, permissively licensed. And we have absolutely no plans to change that. It should always be that way. And what we want to do instead is we view pyx as a different class of things. That's our hosted services as opposed to our open source tools. And we'll keep pushing in that direction. And I think...

00:57:54.860 --> 00:59:28.060
I shouldn't really say this, but I've been thinking a lot about how people... I've been a software engineer my whole career. And we as software engineers have been been trained to like really distrust corporate open source and it's not like without reason like there are a lot of companies that have done things that um you know feel users feel burned by and i'm very empathetic to that and so i um as i said i will be as open and transparent and honest as uh you know as possible which is like we don't want to do that with the tooling like the tooling is it's like too important it's too valuable it's too like to the community to to do that and so our goal is to like keep building that stuff we're investing a lot in continuing to make it great and then we wanted our you know our goal here with pyx is to build a business on top of it um and we'll keep pushing in that direction so um you know i think there will be hard i'm sure there will be hard decisions for us around like what goes in the open source and what doesn't um we want single sign off can go in the closed source we want as much as possible to like set up an incentive structure whereby we actually don't have to like worry about that like that's something that i've been trying to do which is to say like okay if there's a problem that we can solve and we can just solve it in the open source then like we should solve it in the open source if there's a problem that we can that we can't solve in the open source but we could solve with the server then we

00:59:28.340 --> 00:59:36.320
Yeah, to me, it seems super clear that this is not significantly in the way of uv advancing.

00:59:36.740 --> 00:59:45.600
If anything, it just puts more energy to uv because as people use pyx, well, they're effectively customers of uv as well.

00:59:48.440 --> 00:59:49.300
Yes. Yeah.

00:59:50.720 --> 01:00:00.320
But I think the critical thing that I can just keep saying is we don't want to re-license our tools.

01:00:00.410 --> 01:00:02.300
We do not want to charge people money to use our tools.

01:00:02.540 --> 01:00:04.440
I think we find ourselves in a position to do that.

01:00:05.110 --> 01:00:06.720
As a company, we're in serious trouble anyway.

01:00:07.280 --> 01:00:12.040
So that's something that I'll never do.

01:00:13.760 --> 01:00:20.640
And we're just going to continue to focus on the strategy that we've had from the start, which is like we build the free open source tooling.

01:00:21.240 --> 01:00:22.920
We're incentivized to grow it as much as we can.

01:00:23.520 --> 01:00:24.540
That's the thing that we love doing.

01:00:25.070 --> 01:00:28.100
And now we're going to go and try to solve more problems and hopefully problems people will pay for.

01:00:29.740 --> 01:00:35.700
Yeah, I think, you know, you look at the GitHub repository, you guys have almost 67,000 GitHub stars.

01:00:36.330 --> 01:00:37.380
First of all, congratulations.

01:00:38.240 --> 01:00:38.720
That's insane.

01:00:38.840 --> 01:00:39.200
Oh, thanks.

01:00:39.860 --> 01:00:43.500
I mean, when you started this, doesn't that count as success?

01:00:43.670 --> 01:00:46.840
You're like, we have almost as many stars as Django.

01:00:47.140 --> 01:00:47.960
Like that's pretty wild.

01:00:49.319 --> 01:01:01.500
I don't know. I mean, I think when I started working on this stuff, I would have thought 100 stars was crazy. Like, no, I'm serious. I was not like a person who did a lot of open source.

01:01:01.910 --> 01:01:25.300
And so like I said, not on this show, but I think I've said this before. It's like, I was kind of like, just average consumer of open source. I was using open source software all the time that I wasn't contributing or maintaining or anything. And so like for us now, yeah, I don't even like look at the stars anymore. I don't know. Yeah. I feel like it's, it's gotta be on star

01:01:25.440 --> 01:01:50.760
history, right? But, you know, in addition to that, I feel like the reason I brought that up is because it's, if worst case scenario, this is not me speaking for me, this is me speaking for the people who are speaking to the people out there who are like, I can't believe what if, you know, like sort of a doom sort of thing.

01:01:51.460 --> 01:01:54.840
It's still out there under a permissive license on GitHub and it's 2000 forks.

01:01:55.510 --> 01:02:00.100
Like that's pretty likely that there's going to be a version out there, but here's your, here's your star.

01:02:00.980 --> 01:02:01.280
Star.

01:02:02.120 --> 01:02:02.680
Looks pretty cool.

01:02:03.420 --> 01:02:03.780
Yeah.

01:02:04.660 --> 01:02:05.200
It's got strong.

01:02:05.580 --> 01:02:06.180
That's a lot.

01:02:06.700 --> 01:02:07.800
Still growing up.

01:02:08.760 --> 01:02:09.780
I know I'll put that link to it.

01:02:09.780 --> 01:02:09.940
Yeah.

01:02:10.640 --> 01:02:11.200
That's wild.

01:02:11.960 --> 01:02:12.100
Yeah.

01:02:12.140 --> 01:02:29.860
the yeah i know and i mean you know we do think a lot too about about project governance um it's i remember when thankfully most people didn't weren't really thinking about this but when uh

01:02:30.080 --> 01:02:36.300
do you remember when svb went under silicon valley bank yes yeah oh yeah i absolutely yeah so all our

01:02:36.440 --> 01:03:22.020
money basically all our money was in silicon valley bank was it oh no i didn't even yeah together oh my god no which is i mean which is us and you know every other startup uh but and at the time we were a pretty small team um so it wasn't you know uh it wasn't super it was it's a whole story anyway it was obviously very worrying but uh but there was also a sense that you know it would be resolved and um but i remember at the time i got on the phone with the founder of another company you know that i won't name but it's a belt patrols company and And he was like, yeah, I had like a real moment where I was like, wow, if the company goes under, at least the open source project will be totally fine because we've really invested in governance and like it could run like totally without us.

01:03:22.630 --> 01:03:28.180
And I was like, wow, that's amazing because, you know, I think like that's what I would like to get to, you know.

01:03:29.439 --> 01:03:30.960
So we do think about that.

01:03:31.050 --> 01:03:33.060
It is governance is hard, is very hard.

01:03:34.279 --> 01:03:38.140
And, you know, over time, we're trying to build a bigger contributor base.

01:03:38.340 --> 01:03:44.560
But that's basically the North Star for me of what I would like to get to is ideally, even if the company didn't exist, the project could keep going.

01:03:45.360 --> 01:03:48.160
So I'm not saying we're not there yet.

01:03:48.700 --> 01:03:50.280
And I'm fine to admit that.

01:03:50.440 --> 01:03:52.240
But that's what I would like to get to.

01:03:52.920 --> 01:03:53.240
Yeah.

01:03:54.880 --> 01:04:01.200
I think, I guess wrapping that part of it up, I think the concerns about that are overblown.

01:04:01.820 --> 01:04:03.540
People say, well, I got to learn a new tool.

01:04:04.880 --> 01:04:07.580
well, you just put the letters uv in front of what you're doing before.

01:04:07.800 --> 01:04:08.620
It's probably fine.

01:04:08.760 --> 01:04:09.060
You know what I mean?

01:04:09.140 --> 01:04:13.320
It's like, it's not that huge of a investment in terms of like a disruption.

01:04:13.480 --> 01:04:21.140
And I think I, for one, am a wholehearted adopter of uv and the tools and then appreciate it every day.

01:04:22.060 --> 01:04:27.320
Thanks. Yeah. No, I appreciate that. I mean, I just like, I just love building this stuff, honestly.

01:04:27.740 --> 01:04:43.480
And I just love like solving problems for people like, like, Like that, it's sort of sad because I find myself at less time to just like, like I, a day where I can just hang out in the issue tracker and just like close bugs and help people is like the greatest.

01:04:44.040 --> 01:04:48.300
And so, you know, I'm trying to find ways to keep doing as much of that as I can.

01:04:48.420 --> 01:04:51.600
But as a team has grown, obviously my attention gets split in a lot of different ways.

01:04:51.900 --> 01:05:13.200
But basically, like a lot of what we're trying to do is just like build, like build a company, right, that lets us continue to invest in what is effectively R&D to like build out all this open source tooling. And so, you know, hopefully, hopefully we can we can make that work. And that's like the push that we're going towards. Yeah, amazing. All right, let's we're pretty much out

01:05:13.220 --> 01:05:30.020
of time here. So let's close it out with people are interested in this. What do they do? Can they try it out is it available yet is it for random individual developer type yeah not yet so like

01:05:30.140 --> 01:05:52.160
we're starting with uh what we're calling the closed beta so we basically launched in private with some customers through like direct outreach just talking with teams that we'd already been working with and that's why when we did the public launch you can see we had a couple customers already listed on there and then um we put on an interest form on uh it's linked on the pyx page and in the blog post, that's the best thing for people to do is fill out the interest form.

01:05:53.700 --> 01:05:57.540
We got a lot of responses to the interest form, which is great.

01:05:58.540 --> 01:06:01.980
But it's also going to take us time to get through them, like many, many thousands.

01:06:03.280 --> 01:06:06.860
So we started basically going through that list and onboarding people.

01:06:08.600 --> 01:06:10.920
And we'll keep doing that, and we'll basically ramp it up over time.

01:06:11.180 --> 01:06:15.260
So we're working towards a GA release.

01:06:15.540 --> 01:06:20.440
And then hopefully everything, the plan then for everything to be self-serve and for people to try it out themselves.

01:06:20.750 --> 01:06:28.360
But right now we're doing kind of this slow rollout just as we scale up the product and also just spend more time learning from the early customers.

01:06:29.500 --> 01:06:29.660
Right.

01:06:30.359 --> 01:06:32.280
So you have an idea for what people want,

01:06:32.360 --> 01:06:33.240
but you've got to actually see.

01:06:34.460 --> 01:06:35.580
You have to actually build it.

01:06:35.860 --> 01:06:36.320
No, I'm kidding.

01:06:37.720 --> 01:06:42.420
Well, people also say we want this, but in fact they actually want something slightly differently potentially.

01:06:43.380 --> 01:06:43.440
Yeah.

01:06:44.859 --> 01:06:51.960
I mean, the cool thing is, yeah, we're live in production with, with companies, the amount of traffic's going up and up and it's,

01:06:52.140 --> 01:06:57.140
I mean, it's a little, it's a little scary, but you know, it's, it's going to say the bandwidth bill is probably not non-trivial.

01:06:57.170 --> 01:07:02.660
And then you started talking to the ML people, their packages are like half a gig, not half a meg, right?

01:07:03.060 --> 01:07:03.140
Yeah.

01:07:03.290 --> 01:07:09.420
The biggest PyTorch builds are like, like the biggest PyTorch wheels are like almost three gigs, I think.

01:07:09.740 --> 01:07:10.020
Wow.

01:07:11.060 --> 01:07:11.160
Yeah.

01:07:11.440 --> 01:07:12.220
Which is pretty wild.

01:07:14.120 --> 01:07:14.320
Cool.

01:07:14.400 --> 01:07:22.600
Well, - Congratulations so far and thanks for coming on and checking in with us and talking about pyx and updates on the channel.

01:07:22.600 --> 01:07:23.620
- Yeah, thanks for having me back on.

01:07:23.760 --> 01:07:30.200
No, it's always fun and I appreciate the opportunity just to talk more about what we're doing and try to explain what we're building and why.

01:07:30.780 --> 01:07:33.940
And yeah, I'm excited to come back on, hopefully at some point in the future.

01:07:34.480 --> 01:07:37.480
- Yeah, well, when you're ready to share more, you're always welcome.

01:07:37.700 --> 01:07:38.740
So thanks for being on. - Appreciate it.

01:07:38.800 --> 01:07:39.060
- See you later.

01:07:39.220 --> 01:07:40.140
- Thanks a lot, take care.

01:07:40.280 --> 01:07:40.740
- Bye.

01:07:41.360 --> 01:07:41.720
- Bye.

